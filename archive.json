{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-07-18T01:10:45.097885+00:00",
  "repo": "openpgp-pqc/draft-openpgp-pqc",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "postponed",
      "description": "",
      "color": "d93f0b"
    },
    {
      "name": "meeting-2023-06-05",
      "description": "",
      "color": "c5def5"
    },
    {
      "name": "administrative",
      "description": "Make the drafting/editing process run more smoothly",
      "color": "F3D4AB"
    },
    {
      "name": "editorial",
      "description": "minor editorial changes, will not be noted in weekly mailing list summary",
      "color": "BFD4F2"
    },
    {
      "name": "OpenPGP summit",
      "description": "",
      "color": "006b75"
    },
    {
      "name": "Version 03",
      "description": "",
      "color": "8F042A"
    },
    {
      "name": "NIST final std.",
      "description": "",
      "color": "258D21"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "I_kwDOIrmZ-85aIRQu",
      "title": "Guidance on how to avoid encrypting PQ(/T) and traditional for the same user",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/2",
      "state": "OPEN",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "wussler"
      ],
      "labels": [],
      "body": "The text contains the following statement:\r\n> Implementations MUST NOT encrypt a message to a purely traditional public-key encryption key of a recipient if it is encrypted to a PQ/T key of the same recipient.\r\n\r\nThis should be expanded to ensure what to check when encrypting to the same recipient. Should it be the primary identity?\r\n\r\n",
      "createdAt": "2022-12-27T19:56:07Z",
      "updatedAt": "2023-06-05T11:28:36Z",
      "closedAt": null,
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Meeting 2023-01-19:\r\n* Aron: was difficult to implement. At which level should this be done: application level or library level? Check for different keys how / where? use primary identity as identification ?\r\n* Andreas: should at least inform the user\r\n* Aron: then not \"MUST\". In go we cannot model warnings, only errors\r\n* Andreas: when allowing users to use some primary identity ...\r\n* Aron: concept of linked keys with same primary identity, an impl. should only encrypt to one of these. Could be seen as task for application or for library.\r\n* Aron: keep statement but give guidance for how to do it. Define standard behaviour\r\n* Andreas: Aron, would you come up with a proposal?\r\n* Aron: yes, but not clear so far. Key pointing to another key as newer then no false positive.\r\n* Stavros: is parallel public key encryption done often?\r\n* Aron: can be done by the library if it receives the key information\r\n* Stavros: migration sec says prefer PQC\r\n* Aron: but not MUST, but if using PQC encryption \"use only PQC\"\r\n* Stavros: talking about the same certificate:\r\n* Aron: not necessarily. Cannot safely decide whether 2 certs belong to the same user. thus false positives can happen. Should not stop encryption.\r\n* Stavros: 2 statements about this: this one and 7.1 migration considerations. There: SHOULD prefer PQC certificate.\r\n* Aron: reference to this statement in migrations considerations.\r\n* Falko: make this statmt a SHOULD?\r\n* Aron: keep it, but give guidance\r\n* Stavros: can always make PQC cert\r\n* Falko: but what if no end date in old\r\n* Aron: will make proposal",
          "createdAt": "2023-01-19T14:15:08Z",
          "updatedAt": "2023-01-19T14:15:08Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Meeting 2023-06-05:\r\n\r\n  * FSE: not a fundamental security concern\r\n  * AW: could be SHOULD not encrypt to the same recipient. Leave it open to the implementer if and how to do it. Shall we make it a SHOULD?\r\n  * FSE: I agree\r\n",
          "createdAt": "2023-06-05T11:28:27Z",
          "updatedAt": "2023-06-05T11:28:27Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOIrmZ-85aIUrV",
      "title": "Missing key generation procedures",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/3",
      "state": "CLOSED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "wussler"
      ],
      "labels": [],
      "body": "Encryption, decryption, signing and verification are described, but not how to generate keys",
      "createdAt": "2022-12-27T20:15:10Z",
      "updatedAt": "2023-02-23T13:00:13Z",
      "closedAt": "2023-02-23T13:00:13Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is perfectly in line with the existing OpenPGP standards. As far as I know, they do not specify anything about key generation. Historically, the OpenPGP standard is a mere \"on wire format\", meaning that it only specifies how to encode the data on the wire and not how implementations are supposed to process the data. I think latest with the crypto-refresh that is changing in the sense that more specifications about the behaviour of an implementation are made. But I think key generation is still out of scope for the OpenPGP standard. The NIST standards will specify how this is done.\r\n",
          "createdAt": "2023-01-03T07:25:04Z",
          "updatedAt": "2023-01-03T07:25:04Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "AFAIK our draft is much more verbose with the encryption and decryption procedures, while RFC 4880, 6637, or the crypto-refresh tend to be more dry about that.\r\nMy point is that if we include verbose and explicit instructions on how to encrypt and decrypt, we should also include a paragraph stating that keys should be generated natively according to \\[spec\\].\r\n\r\nI'd propose something like:\r\n```\r\n### Key generation procedure {#ecc-kyber-generation}\r\n\r\nTo generate Kyber + ECC composite key the implementation MUST independently\r\ngenerate  the Kyber and the ECC component keys.\r\nFor Kyber this is done in native format as specified in {{Kyber-Subm}} and encoded\r\nas fixed-length octet strings depending on the security level. \r\nFor ECC this is done following the relative specification in {{RFC7748}}, \r\n{{NIST-SP800-186}}, or {{RFC5639}}, and encoding the outputs as fixed-length \r\noctet strings based on the curve's field size.\r\n```\r\n\r\nSimilar for Dilithium and SPHINCS+.",
          "createdAt": "2023-01-03T09:35:30Z",
          "updatedAt": "2023-01-03T09:35:30Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Minutes Meeting 2023-01-19:\r\n\r\n* Aron: crypto-refresh already addesses key generation of X...\r\n* Stavros: should have paragraph\r\n* Falko: agreed",
          "createdAt": "2023-01-19T13:54:17Z",
          "updatedAt": "2023-01-19T13:54:17Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "I_kwDOIrmZ-85abN1-",
      "title": "Various review comments",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/6",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "~~Regarding the sentence in the introduction:~~\r\n\r\n~~> \"Here, the term \"composite\" indicates that the combination of the two components forms a single atomic object.~~\r\n\r\n~~I don't think that this sentence is saying something useful. Clearly, they are not essentially atomic (as nothing is in the known universe, not even atoms). What is meant here, is that they appear as single cryptogrpaphic schemes on the protocol layer. Accordingly, that is what I would propose to state here.~~\r\n\r\nFalko: moved to separate issue",
      "createdAt": "2023-01-03T08:43:32Z",
      "updatedAt": "2023-01-09T14:51:54Z",
      "closedAt": "2023-01-09T14:51:54Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "~~Section 4.1.1.1:~~\r\n\r\n~~> Generate an ephemeral key pair {v, V=vG}, without any masking or clamping as defined in [[RFC7748](file:///home/fstrenzke/doc/pqc_thunderbird/draft-openpgp-pqc/draft-wussler-openpgp-pqc.html#RFC7748)]~~\r\n\r\n~~I think this can be understood in two ways:~~\r\n~~1. that the definition in RFC7748 should be used and that this definition does not include \"masking or clamping\"~~\r\n~~2. that \"masking or clamping\" should not be used, and that \"masking and clamping\" is defined in RFC7748~~\r\n\r\n~~In my understanding, the first variant is the intended statement. To make that entirely clear, I would rather write: \"Generate an ephemeral key pair {v, V=vG} according to the procedure defined in RFC7748, that is, without any measure such as masking or clamping that are applied previous OpenPGP specifications of this scheme.\"~~\r\n\r\nPR with the proposed change is in progess...",
          "createdAt": "2023-01-03T09:08:19Z",
          "updatedAt": "2023-01-03T11:45:25Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "~~In Section 4.1.2 we state~~\r\n\r\n~~> Extract the component public key kyberPublicKey that is part of the recipient's composite public key~~\r\n\r\n~~This seems inconsistent in wording with the descriptions for the EC-KEMs, where no mentioning of the extraction of the component public key from the composite key is made. IMO it should be mentioned in for each scheme or for none.~~\r\n\r\nFalko:  moved to separate issue",
          "createdAt": "2023-01-03T09:14:36Z",
          "updatedAt": "2023-01-09T14:48:28Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "~~> Section 4.1.1.1~~\r\n~~> the first variant is the intended statement~~\r\n\r\n~~Correct. The spec still defines clamping, but not in the key generation context.~~\r\n\r\n~~> Generate an ephemeral key pair {v, V=vG} according to the procedure defined in RFC7748, that is, without any measure such as masking or clamping that are applied previous OpenPGP specifications of this scheme.~~\r\n\r\n~~I like it! Mind making a PR?~~\r\n\r\nFalko: strikeout as this point is covered in an upcoming PR",
          "createdAt": "2023-01-03T09:45:07Z",
          "updatedAt": "2023-01-03T11:46:10Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "~~> In Section 4.1.2~~\r\n~~>This seems inconsistent in wording with the descriptions for the EC-KEMs, ~~\r\n\r\n~~In the ECC sections we mention~~\r\n```...where R is the component public key eccPublicKey...```\r\n~~I would consider removing point (1) from 4.1.2 and rewrite~~\r\n``` \r\n2. Invoke (kyberCipherText, keyShare) <- kyberKem.encap(kyberPublicKey) \r\n   where kyberPublicKey is extracted from recipient's composite public key\r\n```\r\n\r\nFalko: moved to separate issue",
          "createdAt": "2023-01-03T09:50:54Z",
          "updatedAt": "2023-01-09T14:50:31Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "~~In Section 4.2.3 we have a forward reference to Section 4.3.2. I think normally in a specification one would only make backwards references to things already defined. Thus the referenced section specifying the packet structure should better be moved in front IMO.~~\r\n\r\n~~(Section 4.2.4 also has a similar forward reference)~~\r\n\r\nFalko: moved to separate issue",
          "createdAt": "2023-01-03T11:40:51Z",
          "updatedAt": "2023-01-09T14:43:53Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "~~In Section 5.2.1 it says: ~~\r\n~~> Given that Dilithium + ECC signature support is mandatory, an implementation MUST support SHA3-256 and SHOULD support SHA3-512.~~\r\n\r\n~~The logic implied by \"Given ...\" is not entirely convincing to me, as it sounds as that the requirements stated the second clause sentence somehow naturally arise based on the first clause. But that seems not to hold, as an implementation could also just support one of them. So I would suggest to simply remove the first clause of that sentence, i.e. let the sentence start with \"An implementations MUST ...\"~~\r\n\r\nResolved already.",
          "createdAt": "2023-01-03T12:06:59Z",
          "updatedAt": "2023-01-04T06:37:28Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "~~> forward reference~~\r\n\r\n~~I personally don't have anything against forward references. I usually like even the backrefs, so that you can navigate the spec in both directions.\r\nGenerally, when implementing, I don't use the spec linearly~~\r\n\r\nFalko: moved to separate issue",
          "createdAt": "2023-01-03T12:07:20Z",
          "updatedAt": "2023-01-09T14:44:15Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "~~> as an implementation could also just support one of them~~\r\n\r\n~~Indeed. But here we define which one of the two is \"more important\".~~\r\n\r\n~~We can rephrase it as~~\r\n```\r\n~~An implementation MUST support SHA3-256 and SHOULD support SHA3-512, since \r\nthis specification mandates Dilithium + ECC signature support.~~\r\n```",
          "createdAt": "2023-01-03T12:10:05Z",
          "updatedAt": "2023-01-04T06:38:11Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "~~> > as an implementation could also just support one of them~~\r\n>\r\n~~> Indeed. But here we define which one of the two is \"more important\".~~\r\n> \r\n~~> We can rephrase it as~~\r\n> \r\n> ```\r\n> An implementation MUST support SHA3-256 and SHOULD support SHA3-512, since \r\n> this specification mandates Dilithium + ECC signature support.\r\n> ```\r\n\r\n~~I don't think that this rephrasing makes an essential difference. But it is also not a really severe point in my view, so maybe we simply leave it as it is.~~",
          "createdAt": "2023-01-03T12:29:52Z",
          "updatedAt": "2023-01-04T06:38:51Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "~~I personally like it more, as it puts the focus on the MUST. We can also drop the \"since...\" but I would keep some justification for that must there.~~\r\n\r\n~~What about~~\r\n```\r\nAn implementation MUST support SHA3-256 and SHOULD support SHA3-512, in\r\norder to support the hash binding with Dilithium + ECC signatures.\r\n```",
          "createdAt": "2023-01-03T12:32:19Z",
          "updatedAt": "2023-01-04T06:39:12Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "~~> I personally like it more, as it puts the focus on the MUST. We can also drop the \"since...\" but I would keep some justification for that must there.~~\r\n> \r\n~~> What about~~\r\n> \r\n> ```\r\n> An implementation MUST support SHA3-256 and SHOULD support SHA3-512, in\r\n> order to support the hash binding with Dilithium + ECC signatures.\r\n> ```\r\n\r\n~~Would also be OK for me.~~",
          "createdAt": "2023-01-03T15:05:41Z",
          "updatedAt": "2023-01-04T06:39:42Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "~~Section 8.4:~~\r\n\r\n~~> In order not to extend the attack surface, we bind the hash algorithm to the hash internally used into the signature algorithm.~~\r\n\r\n~~I don't understand the meaning of the word \"into\" here. What is supposed to signify exactly? In my understanding, we are ensuring that the hash algorithm used for message digestion is the same as the one used internally in the signature algorithm.~~",
          "createdAt": "2023-01-03T15:22:17Z",
          "updatedAt": "2023-01-04T07:03:56Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "~~In the Security Considerations, under Section 8.5, a normative statement is made (\"MUST NOT\"). In my understanding, normative statements do not belong in the Security Considerations, but under one of the normative sections.~~",
          "createdAt": "2023-01-03T15:23:56Z",
          "updatedAt": "2023-01-09T14:46:12Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "~~This is technically already in the crypto-refresh: https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-07.html#section-12.2.3~~\r\n\r\n~~I would like to reiterate here in the security considerations~~\r\n\r\nFalko: moved to separate issue (applies also to comment above this one)",
          "createdAt": "2023-01-03T15:26:18Z",
          "updatedAt": "2023-01-09T14:46:47Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "~~> Section 8.4:~~\r\n> \r\n~~> > In order not to extend the attack surface, we bind the hash algorithm to the hash internally used into the signature algorithm.~~\r\n> \r\n~~> I don't understand the meaning of the word \"into\" here. What is supposed to signify exactly? In my understanding, we are ensuring that the hash algorithm used for message digestion is the same as the one used internally in the signature algorithm.~~\r\n\r\n~~We can do `in` instead~~",
          "createdAt": "2023-01-03T15:28:00Z",
          "updatedAt": "2023-01-04T06:47:57Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "~~In Section 5.2.2 and 5.2.3 there are statements like~~\r\n~~> Sign dataDigest with eddsa.sign() from [Section 5.1.1]~~\r\n\r\n~~I think it is somewhat unlucky to speak of \"signing\" here, because word this means \"create a signature and add it to the signed data\". However, how to add the signature to the packet is not specified here. This becomes clear only later when the signature packet structure is explained. ~~\r\n\r\n~~I suggest to change the specification to saying \"create an EdDSA signature with ...\" and \"create a Dilithium signature with ...\" and then in a new step after these two: \"encode the EdDSA and Dilithium signatures according to the the packet structure given in Section ...\". But sure there also other possibilities to make the same statement.~~\r\n\r\nadapted into upcoming PR\r\n",
          "createdAt": "2023-01-03T15:38:18Z",
          "updatedAt": "2023-01-04T07:02:46Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "~~> > Section 8.4:~~\r\n> > > In order not to extend the attack surface, we bind the hash algorithm to the hash internally used into the signature algorithm.~~\r\n> > \r\n> > \r\n~~> > I don't understand the meaning of the word \"into\" here. What is supposed to signify exactly? In my understanding, we are ensuring that the hash algorithm used for message digestion is the same as the one used internally in the signature algorithm.~~\r\n> \r\n~~> We can do `in` instead~~\r\n\r\n~~OK, and I would also suggest: \"... we bind the hash algorithm used for message digestion to the hash algorithm used internally by signature algorithm.\"~~\r\n\r\nFalko: adapted in upcoming PR",
          "createdAt": "2023-01-03T15:41:10Z",
          "updatedAt": "2023-01-04T06:49:37Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "What's left in this issue?",
          "createdAt": "2023-01-09T13:06:53Z",
          "updatedAt": "2023-01-09T13:06:53Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I now made separate issues with all remaining open points.",
          "createdAt": "2023-01-09T14:51:54Z",
          "updatedAt": "2023-01-09T14:51:54Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOIrmZ-85ai-Ez",
      "title": "Test data",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/10",
      "state": "CLOSED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add some verified test data to the RFC for:\r\n- ECC + Kyber keys\r\n- Dilithium + Kyber keys\r\n- SPHINCS + Kyber keys\r\n\r\n+ relative messages and signatures",
      "createdAt": "2023-01-04T14:55:07Z",
      "updatedAt": "2024-03-04T20:59:57Z",
      "closedAt": "2024-03-04T20:59:57Z",
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Here is a first Alg ID 25 Kyber768 + X25519 key, hex-encoded\r\n```\r\```",
          "createdAt": "2023-01-04T14:55:56Z",
          "updatedAt": "2023-01-04T14:56:08Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "As a first step, since there is no PKESK v6 + SEIPD v2 test vector yet, and the PQC stuff builds upon it, we would like to confirm the correct crypto refresh implementation. Then, we can try to verify each other's PQC-encrypted messages.\r\n\r\nOur implementation produces the following v6 PKESK and encrypted+signed data when using the minimal v6 certificate example keys from the crypto refresh (X25519+ED25519).\r\n* https://gitlab.com/openpgp-wg/rfc4880bis/-/blob/f6666e844c6272179b5ed217f659856c90f66ab8/test-vectors/v6-minimal-cert.key\r\n* https://gitlab.com/openpgp-wg/rfc4880bis/-/blob/3a558002d0e16ef00b613848746549b05d038841/test-vectors/v6-minimal-secret.key\r\n\r\n```\r\n-----BEGIN PGP MESSAGE-----\r\n\r\nwWwGBhLIPx5wb2MI/hUaQXdDofAzeQ6T6ZeEiNHbN42pkwiFGdDU+AVuOX24qYAftylAGBedTokQ\r\ngTHLdUMHj7NMdtxvKGCdgxibASYy6+5s0CoHxIFN9nrfCzdjAtDAxT5Xxuwpyjo/cdKwctrSwD0C\r\nCQIMCwJkT+lMlC9zpURVbphYpUw6bh+O+9g5RCjFeEegZDmiUYsmqmhh9DBNuhD2VcIaRU64Mm8E\r\nDXY2w4Ir/10NKX/p6MN97oeJqsEft2Je8STR8QDIB44DjD3RNOmiwMPFK97S5LCKNJFfOdLN96Wi\r\n4UjixlXmSO9aux2F/JuOjhxmQFeUmTDN8p3DXrx0hZtjtMNm2vCYmT29Eob4yt4O2ULcMMWwFsgF\r\nFcAzxwVVupRqtBH2VDeg14cwT0s8rzp3gRlG4Qsa4IXL5IedQazCyBzauhRFFoKLhW+9QI6lk7vz\r\nF9HBGFYQVwh1YqWEahZ+qqz+zvF48WZH\r\n=Y9Dz\r\n-----END PGP MESSAGE-----\r\n```\r\n\r\nThe session key should decrypt to the following value:\r\n```\r\n94 E3 81 99 71 6F 82 DB B2 0A C2 DA 79 60 9D 60 46 DD 6A C8 8C 42 59 16 0E 40 68 D1 29 8A B6 29\r\n```\r\n\r\n@wussler are you able to process and verify this?\r\n\r\nEdit: I think we are compatible with the current state of the Crypto Refresh (what's merged in) but for example do not yet implement https://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/278",
          "createdAt": "2023-04-19T14:20:30Z",
          "updatedAt": "2023-04-20T06:12:40Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry @TJ-91, this notification slipped under the radar!\r\n\r\nSo, I had to tweak our implementation a bit as this does not implement [the PK material mixing](https://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/278), but then it decrypted fine to `cleartext` with the session key you mention.",
          "createdAt": "2023-04-26T10:26:15Z",
          "updatedAt": "2023-04-26T10:26:15Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you very much Aron - good to see that it's compatible to this point!\r\n\r\nSince the MR is now merged, I have implemented the changes. New test data:\r\n\r\n```\r\n-----BEGIN PGP MESSAGE-----\r\n\r\nwWwGBhLIPx5wb2MI/hUaQXdDofAzeQ6T6ZeEiNHbN42pkwiFGV6u2cBu1I3WWL+9QCwBZhsWT1de\r\n29lzVcOk2whKB0YaKASCgXvLDUWzOtc4L/XGFrT8BneU1oQbFQ/Du0zLXx0o0soORYXAbG/SwD0C\r\nCQIMBP6H/FXbpqS7Xs5InDZXRfxs6daF5iiNKCArsLqXZ3yIOlTGMSiVzHVumzZjEszevlKA4m5i\r\nBza38SGDJrzphiKcIwhlItcAbknNfAB4aHom8ezTd7k1+123JQfKy/dUdnWJsTfDAStXtDI7nsmo\r\nG0tIMRg62WpufrK+r4EPx9BdRsfaDEUqJH1Jv9isY+U1xZKUg3bNgms9HHbH2jzuYc6UEDhUe0CY\r\nAmx+xFBE9l2XXmD42S0DbLSSGz0iZRQoIQ9zEkvhvp9LcCnDERB9GZyKL2gY+UmK1uWrQX31PFC/\r\nqIiywOPxvTW0OyF/UDvWjew2zDEktmz5\r\n=3McN\r\n-----END PGP MESSAGE-----\r\n```\r\n\r\nSession Key:\r\n```\r\n8C 43 65 CF 6B F7 4B AA 4D 13 E6 66 E9 F1 F8 79 A4 A6 6B 67 54 1C 40 54 BD 60 5C 98 60 A8 10 1A\r\n```",
          "createdAt": "2023-04-26T10:47:08Z",
          "updatedAt": "2023-04-26T10:47:08Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I confirm it decrypts correctly. \r\n\r\nJust beware that\r\n```\r\nThe CRC24 footer MUST NOT be generated if it can be determined by context or by the OpenPGP object being encoded that the consuming implementation accepts Radix-64 encoded blocks without CRC24 footer.\r\nNotably:\r\nAn ASCII-armored Encrypted Message packet sequence that ends in an v2 SEIPD packet MUST NOT contain a CRC24 footer.\r\n```",
          "createdAt": "2023-04-26T11:05:31Z",
          "updatedAt": "2023-04-26T11:05:31Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the hint! I was not aware of this.",
          "createdAt": "2023-04-26T11:08:23Z",
          "updatedAt": "2023-04-26T11:08:23Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Test data has been added to the draft, and will be updated there as we change the draft",
          "createdAt": "2024-03-04T20:59:57Z",
          "updatedAt": "2024-03-04T20:59:57Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOIrmZ-85a8MB_",
      "title": "definition of term \"composite\"",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/12",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "falko-strenzke"
      ],
      "labels": [],
      "body": "Regarding the sentence in the introduction:\r\n\r\n> \"Here, the term \"composite\" indicates that the combination of the two components forms a single atomic object.\r\n\r\nI don't think that this sentence is saying something useful. Clearly, they are not essentially atomic (as nothing is in the known universe, not even atoms). What is meant here, is that they appear as single cryptogrpaphic schemes on the protocol layer. Accordingly, that is what I would propose to state here.",
      "createdAt": "2023-01-09T14:42:12Z",
      "updatedAt": "2023-01-30T12:41:48Z",
      "closedAt": "2023-01-30T12:41:47Z",
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "> they appear as single cryptogrpaphic schemes on the protocol layer\r\n\r\nI think this was the original statement and we replaced it.\r\nThe problem I raised was that \"protocol layer\" is not clear terminology. In internal discussions we distinguish protocol and algorithm layer but in the draft everything is the protocol layer.\r\n\r\nPerhaps we can just phrase it slightly differently, for example that they appear as single cryptographic schemes to the rest of the protocol.",
          "createdAt": "2023-01-09T15:20:21Z",
          "updatedAt": "2023-01-09T15:20:21Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "If the word \"layer\" is the problem, then I propose just to leave it out and say:  \"they appear as single cryptographic schemes in the protocol\".",
          "createdAt": "2023-01-09T15:34:03Z",
          "updatedAt": "2023-01-09T15:34:03Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/22",
          "createdAt": "2023-01-30T12:41:47Z",
          "updatedAt": "2023-01-30T12:41:47Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOIrmZ-85a8NS0",
      "title": "should we use forward reference?",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/13",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "TJ-91"
      ],
      "labels": [],
      "body": "# Falko's original remark\r\n\r\nIn Section 4.2.3 we have a forward reference to Section 4.3.2. I think normally in a specification one would only make backwards references to things already defined. Thus the referenced section specifying the packet structure should better be moved in front IMO.\r\n\r\n(Section 4.2.4 also has a similar forward reference)\r\n\r\n# Comment on this from Aron (from previous issue):\r\n\r\n> forward reference\r\n\r\nI personally don't have anything against forward references. I usually like even the backrefs, so that you can navigate the spec in both directions.\r\nGenerally, when implementing, I don't use the spec linearly",
      "createdAt": "2023-01-09T14:44:54Z",
      "updatedAt": "2023-09-01T04:18:19Z",
      "closedAt": "2023-09-01T04:18:19Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Meeting 2023-01-19: \r\n\r\n* Aron: circle reference not avoidable for data generation and their encoding\r\n* Stavros: do we have many forward references?\r\n* Aron: a couple in the context of packet formats\r\n* Falko: agreed to the circular dependency problem\r\n* All: generally we should make it without forward references\r\n* Stavros: will read through and check for forward references again",
          "createdAt": "2023-01-19T13:19:08Z",
          "updatedAt": "2023-01-19T13:19:08Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "Non-local forward references:\r\n\r\n\u00a71.2.3 --> \u00a79.1\r\n\u00a71.3.3 --> Table 6, 7, 11\r\n\u00a71.4.2 --> \u00a73.2 and \u00a73.4\r\n\u00a74.2.1 --> \u00a78.2\r\n\u00a74.2.3 --> \u00a74.3.1 and \u00a74.3.2\r\n\u00a74.2.4 --> \u00a74.3.1 and \u00a74.3.2\r\n\u00a75.2.2 --> \u00a75.3.1\r\n\u00a76.1.2 --> \u00a78.3\r\n\r\nTo summarize the types of forward references:\r\n- Pointing to \"considerations\" in 8,9\r\n- From introductory section to later descriptions, i.e. \u00a71.x.y --> see above\r\n- Procedural before packet description \u00a74.2.x --> \u00a74.3.y and and \u00a75.2.x --> \u00a75.3.y\r\n",
          "createdAt": "2023-02-23T07:50:44Z",
          "updatedAt": "2023-02-23T07:51:10Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "We have a circular reference for the wrapped session key between `({#ecc-kyber-pkesk}` and `{#ecc-kyber-encryption}` (5.3.1. and 5.2.4). Both say \"as specified in\" or \"as described in\" the respective other section.\r\n\r\nI think it's not a real problem and it's easy enough to understand as it is, but we might consider to resolve such circular references.",
          "createdAt": "2023-03-27T15:42:28Z",
          "updatedAt": "2023-03-27T15:42:28Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Meeting 2023-06-05:\r\n* JRH will resolve the only critical point he pointed out above.",
          "createdAt": "2023-06-05T11:21:01Z",
          "updatedAt": "2023-06-05T11:21:01Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOIrmZ-85a8OeO",
      "title": "Should we have normative statements in the Security Considerations?",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/14",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "falko-strenzke"
      ],
      "labels": [],
      "body": "# Falko's original remark\r\n\r\nIn the Security Considerations, under Section 8.5, a normative statement is made (\"MUST NOT\"). In my understanding, normative statements do not belong in the Security Considerations, but under one of the normative sections.\r\n\r\n# Comment by Aron (from previous issue)\r\n\r\nThis is technically already in the crypto-refresh: https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-07.html#section-12.2.3\r\n\r\nI would like to reiterate here in the security considerations",
      "createdAt": "2023-01-09T14:47:23Z",
      "updatedAt": "2023-01-30T12:34:02Z",
      "closedAt": "2023-01-30T12:34:01Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Minutes meeting 2023-01-19:\r\n\r\n* Andreas: normative statement should be in EC section\r\n* Aron: have no such section\r\n* Stavros: section 1\r\n* Falko: sec 1 not normative\r\n* Aron: move normative statement to sec 1\r\n* Aron and Falko: make new section 2 with normative preliminaries",
          "createdAt": "2023-01-19T13:37:33Z",
          "updatedAt": "2023-01-19T13:37:33Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Adressed in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/21",
          "createdAt": "2023-01-30T12:34:01Z",
          "updatedAt": "2023-01-30T12:34:01Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOIrmZ-85a8QHX",
      "title": "Consistency with respect to wording \"extraction\" of component key",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/15",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "# Falko's original remark\r\n\r\nIn Section 4.1.2 we state\r\n\r\n> Extract the component public key kyberPublicKey that is part of the recipient's composite public key\r\n\r\nThis seems inconsistent in wording with the descriptions for the EC-KEMs, where no mentioning of the extraction of the component public key from the composite key is made. IMO it should be mentioned in for each scheme or for none.\r\n\r\n# Aron's comment on this (from previous issue)\r\n\r\n> In Section 4.1.2\r\n>This seems inconsistent in wording with the descriptions for the EC-KEMs, \r\n\r\nIn the ECC sections we mention \r\n```...where R is the component public key eccPublicKey...```\r\nI would consider removing point (1) from 4.1.2 and rewrite\r\n``` \r\n2. Invoke (kyberCipherText, keyShare) <- kyberKem.encap(kyberPublicKey) \r\n   where kyberPublicKey is extracted from recipient's composite public key\r\n```\r\n",
      "createdAt": "2023-01-09T14:50:58Z",
      "updatedAt": "2024-04-29T09:15:23Z",
      "closedAt": "2024-04-29T09:15:23Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Meeting 2023-01-19:\r\n\r\n* Aron & Falko: just about consistency, will be aligned",
          "createdAt": "2023-01-19T13:49:39Z",
          "updatedAt": "2023-01-19T13:49:39Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Meeting 2023-06-05:\r\n* AW will work on this",
          "createdAt": "2023-06-05T11:17:58Z",
          "updatedAt": "2023-06-05T11:17:58Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "will be fixed by #80 ",
          "createdAt": "2024-02-13T12:34:48Z",
          "updatedAt": "2024-02-13T12:34:48Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "fixed via #80",
          "createdAt": "2024-04-29T09:15:23Z",
          "updatedAt": "2024-04-29T09:15:23Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOIrmZ-85bTd2r",
      "title": "From pqc@ietf: Summary OpenPGP crypto functions and further references",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/16",
      "state": "OPEN",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "wussler"
      ],
      "labels": [],
      "body": "In view of\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/pqc/rX2AcijHUbdiijehEaZS5PmpulQ/\r\n\r\naddress (how?) the following\r\n\r\n>> I think it would also benefit from a intro section that summarizes OpenPGP Crypto functions. ... Even references to the proper RFCs for more info would be beneficial.\r\n\r\n> This RFC is designed to be an addition to the crypto-refresh (what the WG is working on right now), and is directly based on it. I think you're right about the references, and it could be very beneficial to add more links to it, with specific references to the sections.\r\n",
      "createdAt": "2023-01-13T07:19:20Z",
      "updatedAt": "2024-02-12T15:26:52Z",
      "closedAt": null,
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Personally I think there are still some places where we can add backreferences, especially when we introduce packets or so on. This is mostly cosmetic, and I can take care of this.",
          "createdAt": "2023-01-13T08:37:40Z",
          "updatedAt": "2023-01-13T08:37:40Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we can orient towards RFC 6637 in this respect. [There](https://www.rfc-editor.org/rfc/rfc6637#section-9), it is written for instance\r\n\r\n```\r\n9. Encoding of Public and Private Keys\r\n\r\n   The following algorithm-specific packets are added to Section\u00a05.5.2\r\n   of [RFC4880], \"Public-Key Packet Formats\", to support ECDH and ECDSA.\r\n```\r\n\r\nIt also [mentions](https://www.rfc-editor.org/rfc/rfc6637#section-10) where no changes are needed:\r\n```\r\n10.  Message Encoding with Public Keys\r\n\r\n   Section\u00a05.2.2 of [RFC4880], \"Version 3 Signature Packet Format\"\r\n   defines signature formats.  No changes in the format are needed for\r\n   ECDSA.\r\n```\r\n",
          "createdAt": "2023-01-16T08:05:32Z",
          "updatedAt": "2023-01-16T11:49:20Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Meeting 2023-06-05:\r\n* AW has it still on his list, will make these cosmetic changes",
          "createdAt": "2023-06-05T11:17:07Z",
          "updatedAt": "2023-06-05T11:17:07Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "@wussler @TJ-91 Can anyone say what is the status of this? I am not entirely certain anymore, what we had in mind here.",
          "createdAt": "2024-02-12T14:52:46Z",
          "updatedAt": "2024-02-12T14:52:46Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Still TODO",
          "createdAt": "2024-02-12T15:26:51Z",
          "updatedAt": "2024-02-12T15:26:51Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOIrmZ-85bTht0",
      "title": "Should we point to https://datatracker.ietf.org/doc/draft-ounsworth-cfrg-kem-combiners/",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/17",
      "state": "OPEN",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "postponed"
      ],
      "body": "Such that our proposal for KEM combination automatically docks to the discussion of this draft?",
      "createdAt": "2023-01-13T07:34:54Z",
      "updatedAt": "2024-05-22T12:34:42Z",
      "closedAt": null,
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Minutes Meeting 2023-01-19:\r\n\r\n* Stavros: expect to be discussed in CFRG and our construction is an instance of this\r\n* Aron: wait until CFRG has given a vote\r\n* Andreas: what ounsworth needs is a dual-prf, but we use SHA3 which is thus a dual-prf\r\n* Andreas: the simple way is to just concat everything into a KDF, but this is not addresing the attacks that were pointed out some time ago. \r\n* Stavros: we can decide whether to include reference\r\n* Andreas, Stavros: when CFRG has voted, add statement to sec. considerations",
          "createdAt": "2023-01-19T13:45:40Z",
          "updatedAt": "2023-01-19T13:45:40Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Wait until https://github.com/EntrustCorporation/draft-ounsworth-cfrg-kem-combiners/pull/9 is merged",
          "createdAt": "2023-06-05T11:14:59Z",
          "updatedAt": "2023-06-05T11:14:59Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Meeting 2023-06-05:\r\n\r\n  * AW: cannot point there currently as construction is still different\r\n  *     Wait for my PR there to be merged then can point to it\r\n",
          "createdAt": "2023-06-05T11:15:32Z",
          "updatedAt": "2023-06-05T11:15:32Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "@wussler What about the status of this? Can we / should we add the pointer here now? Or can we close this anyway?",
          "createdAt": "2024-02-12T14:50:23Z",
          "updatedAt": "2024-02-12T14:50:23Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Adoption call is ongoing right now, let's see what's the outcome next week",
          "createdAt": "2024-02-12T15:25:43Z",
          "updatedAt": "2024-02-12T15:25:43Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "This was discussed at IETF 119 as well, for now we use the agreed constructions, with the idea that it might be provisional if CFRG produces an outcome",
          "createdAt": "2024-05-22T12:34:41Z",
          "updatedAt": "2024-05-22T12:34:41Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOIrmZ-85cVkcZ",
      "title": "Missing SPHINCS+ reference",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/18",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "at [1.2.3. ](https://www.ietf.org/archive/id/draft-wussler-openpgp-pqc-00.html#section-1.2.3)[SPHINCS+](https://www.ietf.org/archive/id/draft-wussler-openpgp-pqc-00.html#name-sphincs-7)",
      "createdAt": "2023-01-19T13:26:21Z",
      "updatedAt": "2023-02-27T12:12:30Z",
      "closedAt": "2023-02-27T12:12:30Z",
      "comments": []
    },
    {
      "number": 23,
      "id": "I_kwDOIrmZ-85dICav",
      "title": "Fix GitHub actions: node-js upgrade to 16",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/23",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.blog/changelog/2022-09-22-github-actions-all-actions-will-begin-running-on-node16-instead-of-node12/",
      "createdAt": "2023-01-30T12:48:29Z",
      "updatedAt": "2023-02-23T12:58:35Z",
      "closedAt": "2023-02-23T12:58:34Z",
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Also fixed",
          "createdAt": "2023-02-23T12:58:34Z",
          "updatedAt": "2023-02-23T12:58:34Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOIrmZ-85dIDBc",
      "title": "Fix GitHub actions: save-state and set-output commands",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/24",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/",
      "createdAt": "2023-01-30T12:50:05Z",
      "updatedAt": "2023-02-23T12:58:18Z",
      "closedAt": "2023-02-23T12:58:18Z",
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems like this got fixed",
          "createdAt": "2023-02-23T12:58:18Z",
          "updatedAt": "2023-02-23T12:58:18Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "I_kwDOIrmZ-85ehLrn",
      "title": "\"Session Key\" is unclear / inconsistent with Crypto Refresh",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/27",
      "state": "CLOSED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The encryption/decryption of the session key is not sufficiently described and inconsistent with the Crypto Refresh.\r\n\r\nIn the Crypto Refresh for PKESKv5, we do not encrypt the session key itself, but the session key + 2 checksum bytes (for PKESK v3 also an algorithm identifier is included). The PQ/T algorithms should therefore encrypt the session key + checksum as well and it should be made explicit to the reader. I realize that the key wrap itself already has an integrity check but there is no harm in including the checksum bytes. Otherwise we explicitly have to deviate from the standard PKESK format which introduces an unnecessary special case.\r\n\r\nThen, the additional problem of AES Key Wrap (RFC3394) only accepting data with length of multiples of 8 bytes arises: With the checksum, the key has improper length. The crypto refresh already uses pkcs5/pkcs7 padding for ECDH (Section 12.5).\r\nWe can do the same or use another method, e.g., there exists RFC5649 which extends the AES Key Wrap with padding.\r\nEven if it is decided to only wrap the session key without a checksum, we should include some form of padding. This reduces the risk of future incompatibilities if (for whatever reasons) there are symmetric algorithms with key sizes that are not multiples of 64 bit.\r\n\r\nRelevant lines in the Crypto Refresh for the ECDH encryption (Section 12.5):\r\n```\r\nm = symm_alg_ID || session key || checksum || pkcs5_padding;\r\n```\r\n```\r\nCompute C = AESKeyWrap( Z, m ) as per [[RFC3394](https://www.rfc-editor.org/info/rfc3394)]\r\n```\r\n\r\n",
      "createdAt": "2023-02-15T12:15:32Z",
      "updatedAt": "2023-02-23T12:59:18Z",
      "closedAt": "2023-02-23T12:59:17Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think this is inconsistent with the crypto-refresh. The checksum is not part of the v5 PKESK specification, but only of the ECDH specification. And we are defining an alternate algorithm, so we are not at all bound to align it with the existing ECDH specification. I think this part is intentional. Otherwise, which part of the specification in our draft would you want to change and how?\r\n\r\nRegarding the AES-Keywrap, without the checksum we wouldn't have that problem. But if I remember correctly, Aron intended to use the RFC 5649 key wrap that doesn't have this limitation. @wussler Is that correct?",
          "createdAt": "2023-02-15T12:45:41Z",
          "updatedAt": "2023-02-15T12:45:41Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "> The checksum is not part of the v5 PKESK specification\r\n\r\nSee https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-crypto-refresh-07#section-5.1.2:\r\n\r\n> Before encrypting, a two-octet checksum is appended, which is equal to the sum of the preceding session key octets, modulo 65536.\r\n> \r\n> The resulting octet string (session key and checksum) is encrypted according to the public-key algorithm used, as described below.\r\n\r\n--- \r\n\r\n> Otherwise, which part of the specification in our draft would you want to change and how?\r\n\r\nWe only need to make clear that the session key includes the checksum bytes and reference to Crypto Refresh Section 5.1.2. We can rename the session key in the procedures to something else, to avoid confusion.\r\n\r\nAs an example, the RSA encryption case is specified as:\r\n> * Multiprecision integer (MPI) of RSA-encrypted value m**e mod n.\r\n>\r\n> The value \"m\" in the above formula is the plaintext value described above, encoded in the PKCS#1 block encoding EME-PKCS1-v1_5 described in Section 7.2.1 of [[RFC8017](https://www.rfc-editor.org/info/rfc8017)] (see also [Section 13.1](https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-crypto-refresh-07#pkcs-encoding)).",
          "createdAt": "2023-02-15T13:17:39Z",
          "updatedAt": "2023-02-15T13:17:39Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think we need the checksum bytes, they are already included in the AES wrapping.\n\nI had also considered upgrading the wrapping, but it's useless: we don't need padding at all, unless we want to support ciphers with keys not multiple of 8 bytes.\n\nCheck out this 4880bis MR: https://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/223/diffs\n\nAlso, from the minutes of the meeting:\n\n> Remove checksum and padding for v5 PKESK? This reduces the bytes on the wire at no loss of functionality as there is already a checksum in the key wrapping algorithm.\nMR that does this: !223\n...\n> dkg: poll: shall we simplify v6 ECDH PKESK keywrap input?\n> dkg: 5 for, 0 against. Fewer people are actively engaging, but no one is objecting.\nstephen: we're 90 minutes in, let's speed up\n\u200b\n\n--\nAron Wussler\nSent with ProtonMail, OpenPGP key 0x7E6761563EFE3930\n\n-------- Original Message --------\nOn Feb 15, 2023, 08:17, Johannes Roth wrote:\n\n>> The checksum is not part of the v5 PKESK specification\n>\n> See https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-crypto-refresh-07#section-5.1.2:\n>\n>> Before encrypting, a two-octet checksum is appended, which is equal to the sum of the preceding session key octets, modulo 65536.\n>>\n>> The resulting octet string (session key and checksum) is encrypted according to the public-key algorithm used, as described below.\n>\n> ---------------------------------------------------------------\n>\n>> Otherwise, which part of the specification in our draft would you want to change and how?\n>\n> We only need to make clear that the session key includes the checksum bytes and reference to Crypto Refresh Section 5.1.2. We can rename the session key in the procedures to something else, to avoid confusion.\n>\n> As an example, the RSA encryption case is specified as:\n>\n>> - Multiprecision integer (MPI) of RSA-encrypted value m**e mod n.\n>>\n>> The value \"m\" in the above formula is the plaintext value described above, encoded in the PKCS#1 block encoding EME-PKCS1-v1_5 described in Section 7.2.1 of [[RFC8017](https://www.rfc-editor.org/info/rfc8017)] (see also [Section 13.1](https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-crypto-refresh-07#pkcs-encoding)).\n>\n> \u2014\n> Reply to this email directly, [view it on GitHub](https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/27#issuecomment-1431356950), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/ACFR5N7R5KDIDNIFGKBNL6DWXTJP5ANCNFSM6AAAAAAU4YU5DA).\n> You are receiving this because you were mentioned.Message ID: ***@***.***>",
          "createdAt": "2023-02-15T13:36:54Z",
          "updatedAt": "2023-02-15T13:36:54Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok with this MR the checksum is obsolete.\r\n\r\n> I had also considered upgrading the wrapping, but it's useless: we don't need padding at all, unless we want to support ciphers with keys not multiple of 8 bytes.\r\n\r\nPadding is simple enough to justify it even if there is only a very slight chance that it will become relevant. If we go with RFC5649 it's the same as RFC3394 AES Key Wrap for keys that are multiples of 8 (i.e., no padding is applied). That means, implementers can simply ignore the padding part (for now) if MR!223 goes through. I'm not insisting on padding, but it'd make the construction more robust against protocol changes or new ciphers with \"strange\" key sizes at no additional cost.",
          "createdAt": "2023-02-15T14:08:07Z",
          "updatedAt": "2023-02-15T14:08:07Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Here we don't have to consider ciphers as v5 PKESK session keys are only used in v2 SEIPD which  use the session key as input to the key derivation. Thus I wouldn't see a problem without the padding.",
          "createdAt": "2023-02-15T14:12:48Z",
          "updatedAt": "2023-02-15T14:12:48Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Very good point @falko-strenzke. I think this should be reflected on the rfc4880bis PR too, as this comment from dkg may be misleading, I got tricked by it too. The random material for key derivation could always be defined by rounding up to 8 bytes in future cipher constructions if needed.\n\nIn general I think this discussion is more relevant on the refresh if we decide to adopt this for v5 pkesk. Once we have a constraint there we gotta live with it.\n\n--\nAron Wussler\nSent with ProtonMail, OpenPGP key 0x7E6761563EFE3930\n\n-------- Original Message --------\nOn Feb 15, 2023, 09:12, Falko Strenzke wrote:\n\n> Here we don't have to consider ciphers as v5 PKESK session keys are only used in v2 SEIPD which use the session key as input to the key derivation. Thus I wouldn't see a problem without the padding.\n>\n> \u2014\n> Reply to this email directly, [view it on GitHub](https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/27#issuecomment-1431434563), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/ACFR5N4PDCAZ752TINGOT73WXTP6VANCNFSM6AAAAAAU4YU5DA).\n> You are receiving this because you were mentioned.Message ID: ***@***.***>",
          "createdAt": "2023-02-15T15:11:05Z",
          "updatedAt": "2023-02-15T15:11:05Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "This passed on the C-R, therefore seems clear here",
          "createdAt": "2023-02-23T12:59:17Z",
          "updatedAt": "2023-02-23T12:59:17Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "I_kwDOIrmZ-85fKJNI",
      "title": "Finalize Algorithm IDs at some point",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/28",
      "state": "CLOSED",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Possibly when crypto-refresh is finalized, taking into account:\r\nhttps://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/242",
      "createdAt": "2023-02-23T09:21:33Z",
      "updatedAt": "2024-02-12T11:50:13Z",
      "closedAt": "2024-02-12T11:50:13Z",
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I aligned this to the cr-08 in #37",
          "createdAt": "2023-03-17T08:26:47Z",
          "updatedAt": "2023-03-17T08:26:47Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we can close this since the whole topic of preliminary algorithm IDs has come up and will be reflected by the draft text anyway.",
          "createdAt": "2024-02-12T11:50:13Z",
          "updatedAt": "2024-02-12T11:50:13Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "I_kwDOIrmZ-85fKJQi",
      "title": "Bump versions to v6",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/29",
      "state": "CLOSED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "fluppe2"
      ],
      "labels": [],
      "body": "Bump PKESK, Signature and Key version to v6 according to crypto-refresh",
      "createdAt": "2023-02-23T09:21:43Z",
      "updatedAt": "2023-03-24T11:48:36Z",
      "closedAt": "2023-03-24T11:48:36Z",
      "comments": [
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "I would propose to bump the version once draft-08 of the crypto-refresh has been published (that incorporates [!231](https://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/231). Right now the crypto-refresh it is still draft-07 and referring to v5 packets.",
          "createdAt": "2023-02-24T12:17:17Z",
          "updatedAt": "2023-02-24T12:17:17Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOIrmZ-85goQUn",
      "title": "Does fixedInfo in KEM Combiner need Public Key (Packet)?",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/34",
      "state": "CLOSED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently we have\r\n\r\n```\r\n//   Input:\r\n//   algID - the algorithm ID encoded as octet\r\n//   publicKey - the recipient's encryption sub-key packet\r\n//               serialized as octet string\r\n\r\nfixedInfo = algID || SHA3-256(publicKey)\r\n```\r\n\r\n1) Do we really need the sub-key **packet** here? The key material itself would be easier to implement as the raw packet is not usually passed through to the crypto operations.\r\n2) Wouldn't `fixedInfo = algID` suffice or does hashing the public key here achieve stronger security?",
      "createdAt": "2023-03-13T10:09:27Z",
      "updatedAt": "2023-03-27T15:11:19Z",
      "closedAt": "2023-03-27T15:11:19Z",
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "No, I think it's required. Like this we're binding to both public keys in the exchange:\r\n- On one side (the sender) we're binding to the ciphertext (that is the PK of the sender in this case)\r\n- On the recipient side we're binding to the PK of the recipient\r\n\r\nRight now in v4 we're putting the fingerprint, that is equivalent",
          "createdAt": "2023-03-23T10:06:26Z",
          "updatedAt": "2023-03-23T10:06:26Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Also for @falko-strenzke we need to bind the actual key used in the exchange, that is not the primary certification PK",
          "createdAt": "2023-03-23T10:08:24Z",
          "updatedAt": "2023-03-23T10:08:24Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, we should keep it like it is then. Also it turned out not to be that hard to pass through the raw packet data after all.",
          "createdAt": "2023-03-27T15:11:19Z",
          "updatedAt": "2023-03-27T15:11:19Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOIrmZ-85gxxR7",
      "title": "Restrictions regarding combinations of legacy and \"PQC\" recipients",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/35",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "TJ-91"
      ],
      "labels": [],
      "body": "Johannes pointed out that we have the following restriction:\r\n\r\n- Since our draft restricts PQC algos to be used only with v5 PKESK (which we do not really need for the implicit rejection with AEAD through the associated v2 SEIPD because the AES Key Wrap has integrity protection [RFC3394](https://www.rfc-editor.org/rfc/rfc3394#section-2.2.3) which already provides implicit rejection ), a sender cannot send a message to both a legacy recipient that doesn't support v5 PKESK and a recipient for which the sender only knows PQC keys.\r\n- The cryptorefresh allows in this case downgrade to v3 PKESK / v1 SEIPD.\r\n- We have the following alternatives:\r\n  - We can stick to this restriction,\r\n  - or we can drop the requirement which then would allow the same downgrade as in the crypto-refresh.\r\n    - for this we would have to add padding bytes in case of the v3 PKESK (because here the algo ID is also included). This is the same issue as discussed [here](https://gitlab.com/openpgp-wg/rfc4880bis/-/issues/157) for the crypto-refresh and the solution defined there should be used in our case, too.\r\n\r\nThis needs a decision.",
      "createdAt": "2023-03-14T14:58:06Z",
      "updatedAt": "2023-06-20T13:42:39Z",
      "closedAt": "2023-06-20T13:42:39Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I strongly vote for adopting the same behaviour as in the crypto-refresh, as otherwise the user experience may may suffer in real world applications. ",
          "createdAt": "2023-03-14T15:03:08Z",
          "updatedAt": "2023-03-14T15:03:08Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I also vote for allowing v3 PKESK and include the same padding (seven zero-octets) as in the crypto refresh.\r\n\r\nFurther, I think we should add a clarifying statement that for v6 PKESK no padding is applied and we do not add checksum bytes to the session key (for both v3/v6 PKESK).\r\n\r\nUpdate: Currently, there is the discussion to revert the v3 PKESK padding, see https://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/266\r\nUpdate2: This will be discussed in IETF 116",
          "createdAt": "2023-03-17T08:18:01Z",
          "updatedAt": "2023-03-22T14:58:29Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "https://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/266 is now merged and no padding is applied for X25519/X448. Instead, the algorithm identifier is not included as part of the session key in the AES Key Wrap and left unenecrypted.\r\n\r\nI can make a MR to align our draft to the crypto refresh",
          "createdAt": "2023-03-27T12:03:46Z",
          "updatedAt": "2023-03-27T12:03:46Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Meeting 2023-06-05:\r\n\r\n    * v6 PQC KEM-Keys currently may not create v3 PKESK. This shall now be enabled.\r\n    * v4 PQC KEM-Keys are not currently not allowed. This shall now be enabled.\r\n    * Restricting PQC signatures to v6 keys and signatures remains as before.\r\n    * SK: v4 PQC KEM keys causes any wire format changes?\r\n    * AW: no\r\n    * AW: bind PQC KEM to AES as symm. algo ID as in the crypto refresh\r\n    * AW: for signatures there are differences regarding packet length fields, but not for encryption\r\n    * JRH will complete the PR above",
          "createdAt": "2023-06-05T11:13:21Z",
          "updatedAt": "2023-06-05T11:13:21Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I updated PR #42.\r\n\r\n> v4 PQC KEM-Keys are not currently not allowed. This shall now be enabled.\r\n\r\nI think the current text does not disallow this (at least not at `5.3.2. Key Material Packets`, maybe I've missed it somewhere else)\r\nMaybe we should write that it's allowed to use v4 kyber-ecdh keys, to make it explicit",
          "createdAt": "2023-06-15T09:54:49Z",
          "updatedAt": "2023-06-15T09:54:49Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "I_kwDOIrmZ-85h30B9",
      "title": "Cite quantum indifferentiability of Keccak",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/40",
      "state": "CLOSED",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "meeting-2023-06-05"
      ],
      "body": "Eventually cite https://eprint.iacr.org/2021/192 for the quantum indifferentiability of Keccak in the security considerations.",
      "createdAt": "2023-03-27T12:48:26Z",
      "updatedAt": "2023-06-05T11:11:29Z",
      "closedAt": "2023-06-05T11:11:29Z",
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Issues with the cited paper",
          "createdAt": "2023-06-05T11:11:29Z",
          "updatedAt": "2023-06-05T11:11:29Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOIrmZ-85h30Cv",
      "title": "Cite quantum indifferentiability of Keccak",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/41",
      "state": "CLOSED",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Eventually cite https://eprint.iacr.org/2021/192 for the quantum indifferentiability of Keccak in the security considerations.",
      "createdAt": "2023-03-27T12:48:41Z",
      "updatedAt": "2023-04-27T10:09:05Z",
      "closedAt": "2023-04-27T10:09:05Z",
      "comments": []
    },
    {
      "number": 43,
      "id": "I_kwDOIrmZ-85khrhn",
      "title": "Optimizing/Aligning the IND-CCA2 construction",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/43",
      "state": "CLOSED",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "fluppe2",
        "ahuelsing"
      ],
      "labels": [],
      "body": "It seems that the crypto-refresh merged the following:\r\n\r\nhttps://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/278\r\n\r\nThat is X25519 and X448 now mix the public key and ephemeral share (from encrypting party) into the KDF.\r\n\r\nShould we align or still try to find an argument that the hashing step in X15519-/X448-/ECDH-KEM is covered by the KEM combiner?\r\n\r\n",
      "createdAt": "2023-04-27T10:16:46Z",
      "updatedAt": "2023-06-13T13:09:32Z",
      "closedAt": "2023-06-13T13:09:32Z",
      "comments": [
        {
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think there are two aspects to consider here.\r\n\r\na) Do we want to optimize away the hash, and\r\nb) if we do not do so, do we want to follow the crypto-refresh.\r\n\r\nI think b) is clearly a yes as it will ease the transition, allowing code-reuse and does not initiate new discussions.\r\n\r\nRegarding a) the situation is as follows. From a provable security point of view we could omit the hash in hashed-DH as the output anyway gets fed to a KDF in the key combiner. What we would have to show is that the resulting KEM is still secure whenever just one of the input KEMs is still secure. Let's consider the case where ECDH is still secure. In that case, the key-share and ciphertext (as well as potentially the receiver key-share a.k.a pk in the KEM) get fed to a KDF with some additional, public, but potentially adversary controlled inputs. I.e., the hash is happening and in the ROM it is straight-forward to argue that the additional input does not hurt security. A similar, but simpler argument works in the Kyber case.\r\n\r\nHowever, from a computational point of view, we are not gaining much. OpenPGP is not deployed in settings where a single hash will make a massive difference in terms of cost or energy (in contrast to Kyber in general -- see the pqc-forum discussion about the PRNG-hash in Kyber). At the same time, I think there is a second dimension to be considered. In optimizing away the hash, we build something that breaks down when people reuse parts of it. E.g., if people decide to implement \"the DH-KEM as in openPGP\" without reading the security considerations in detail, option a) will leave them with an only passively secure (== insecure in general applications) KEM. Similarly, if at a later point someone decides to change the KEM combiner and the new one does not include a ciphertext hash as it works somehow differently... the result is insecure. \r\n\r\nGiven that we describe the setup in a somewhat modular way, I consider it dangerous to base security on the monolithic construct. Hence, I suggest to not do a) but do b).         ",
          "createdAt": "2023-05-03T08:39:27Z",
          "updatedAt": "2023-05-03T08:39:27Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "  * SK: our X25519 / X448 construction is a little bit different from how the C-R is doing it but same security\r\n  * We could add a reference to the X... drafts saying that we also fulfill their requirements\r\n  * AH: adding public key only for  multi user security \r\n  * AW: code reuse is not primary concern:\r\n  * AH: might have to include the public key into every hash function call for multi user security.\r\n  *     Will have to look into it and determine which attack has to countered.\r\n        Kyber hashes the public key internally.\r\n  * AW: remove public key from fixed info in key combiner and include in ECC algorithm\r\n  * AW: current MR https://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/278/diffs with secret as last part in KDF.\r\n  * FSE: secret should come first due to preventing collision vulnerability\r\n  * AW:  since there is no code reuse we can use that order\r\n  * AH: could mix in own long term public key\r\n  * AW: but sender might not have a public key\r\n  * AW: use public key in both schemes and then also in the KDF?\r\n  * AH: decryption operation might not be the only point of attack\r\n  * FSE: mixing in once should be sufficient?\r\n  * AH: depends on the attack\r\n  * AW hold back PR until  clarified by AH: https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/50 \r\n",
          "createdAt": "2023-06-05T11:35:42Z",
          "updatedAt": "2023-06-05T11:43:19Z"
        },
        {
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Here once more my conclusion regarding multi-user security:\r\n\r\nSetup: We have two KEMs which we assume to be multi-user secure. We combine their outputs using a KEM-combiner k = H(k1, c1, k2, c2), c = (c1, c2).\r\n\r\nQuestion 1: Do we have to add pk1 and pk2 to H to preserve multi-user security?\r\n\r\nAnswer: No. To break security the adversary has to distinguish a set of challenge keys k*_u from random (one per user / pk). For each of these k* it holds that if the adversary never makes a query H(k1*_u, c1*_u, k2*_u, c2*_u) they have a zero advantage over guessing [the result of the query is k*_u if it was not random and something different from k*_u if it was random -- without querying a random oracle H at a position x an adversary cannot make any statement about H(x)].\r\n\r\nThe only multi-user advantage that the adversary could gain therefore consists of queries to H that are meaningful for two different users u1 != u2 and their associated public keys. This is only the case if (c1*_u1, c2*_u1) = (c1*_u2, c2*_u2) as the ciphertext values decide for which challenge the query is meaningful. I.e., we need a ciphertext collision between challenges. We will argue that this is sufficiently unlikely. \r\n\r\nNote, that up to decryption errors, encapsulation is an injective function (otherwise you could not decapsulate). That means that the actual image of the (partial) encapsulation function in the ciphertext space C is at least as large as the space of shared secrets K which in turn has to have sufficient size such that the min-entropy of the challenge k* is linear in the security parameter (in practice it will be 256bit and therefore |K| >= 2^256). Now, even if (worst case ever) two users have the same public key, the probability that the challenge ciphertexts are identical is at most 2^-min_entropy (this makes the assumption that the randomness used in the generation of the two challenges is uncorrelated; if it is not independent this is not guaranteed). Hence, the probability that any two users have the same challenge ciphertext is |U^2| * 2^-min_entropy.\r\n\r\nIn consequence, the ciphertexts already work sufficiently well as domain-separator. \r\n\r\n\r\nQuestion 2: Can adding pk1 and pk2 to H add multi-user security if the KEMs themselve are not multi-user secure (beyond the trivial non-tight bound)?\r\n\r\nAnswer: Unlikely, we were unable to construct a counter-example in a short time period, but previous works were only able to show that using a key-ID to domain-separate all hashes preserves multi-user security (see, e.g. https://eprint.iacr.org/2021/1351.pdf).   \r\n\r\n\r\nIn consequence, it seems as if it does not make sense to add the pk.",
          "createdAt": "2023-06-13T13:09:15Z",
          "updatedAt": "2023-06-13T13:09:15Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "I_kwDOIrmZ-85lcKGB",
      "title": "PKESK wire format concern",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/45",
      "state": "CLOSED",
      "author": "teythoon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "```\r\n### Public-Key Encrypted Session Key Packets (Tag 1) {#ecc-kyber-pkesk}\r\n\r\nThe composite Kyber algorithms MUST be used only with v6 PKESK, as defined in\r\n[I-D.ietf-openpgp-crypto-refresh] Section 5.1.2.\r\n\r\nThe algorithm-specific v6 PKESK parameters consists of:\r\n\r\n - A fixed-length octet string representing an ECC ephemeral public key in the\r\n   format associated with the curve as specified in {{ecc-kem}}.\r\n\r\n - A fixed-length octet string of the Kyber ciphertext, whose length depends on\r\n   the algorithm ID as specified in {{tab-kyber-artifacts}}.\r\n\r\n - A variable-length field containing the symmetric key:\r\n\r\n   - A one-octet size of the following field;\r\n\r\n   - Octet string of the wrapped symmetric key as described in\r\n     {{ecc-kyber-encryption}}.\r\n```\r\n\r\nI think the octet count for the encrypted symmetric key is not necessary here: the algorithm-specific ciphertext is the last field in the PKESK packet anyway, and if you don't understand the composite PK algorithm you have no chance to parse the ciphertext anyway.",
      "createdAt": "2023-05-09T11:15:14Z",
      "updatedAt": "2024-02-12T15:17:28Z",
      "closedAt": "2024-02-12T15:17:28Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "It is correct that the length octet is not strictly necessary, but on the other hand I think it is good practice to prefix a variable length field with its length.",
          "createdAt": "2023-05-10T06:11:19Z",
          "updatedAt": "2023-05-10T06:11:19Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that it is good practice, that is why I made sure every variable-length field has a length-prefix.  It is just in this case I don't see any benefit at all.\r\n\r\nWhen parsing a PKESK I see two cases: either you know the combined pk algorithm, or you don't.\r\n\r\nIf you know the pk algorithm, you know how long the ecc public key is, you know how long the kyber ciphertext is, then you find the octet count field which tells you the number of octets left in the PKESK packet, but that information is fully redundant.\r\n\r\nIf you don't know the pk algorithm, you don't know the ecc public key length, you don't know the kyber ciphertext length, you cannot find the octet count field, the whole algorithm-specific part of the PKESK packet is opaque to you.\r\n\r\nSo it doesn't help with parsing if you know the pk algorithm, and it doesn't help if you don't.  The only thing it adds is a chance to be wrong, so there is now a new way in which PKESK packets can be malformed.",
          "createdAt": "2023-05-10T09:33:25Z",
          "updatedAt": "2023-05-10T09:33:25Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "While there are other packets using the remainder of the packet length to encode data (compressed, literal data, user ID) I would rather be consistent with the X25519, X448, and ECDH algorithm specific data.\r\n\r\nIn case some extra data is added after the algorithm-specific data in a future version this might need to customize the algorithm-specific data based on the PKESK version, that is not great. I would try to keep the algorithm-specific data self-defined.",
          "createdAt": "2023-06-05T10:42:47Z",
          "updatedAt": "2023-06-05T10:42:47Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with Aron here. Similarly to Aron's argument for future PKESK versions, this makes experimental implementations also more robust during the draft-stage, where wire format changes are likely to change the length of the packet and are then detectable.\r\n\r\n@teythoon Are you OK with closing this issue? Otherwise, do you have further arguments?",
          "createdAt": "2024-02-12T14:42:20Z",
          "updatedAt": "2024-02-12T14:42:20Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> While there are other packets using the remainder of the packet length to encode data (compressed, literal data, user ID) I would rather be consistent with the X25519, X448, and ECDH algorithm specific data.\r\n\r\nFair, though somewhat depressingly the octet count in the X25519, X448, and ECDH algorithm-specific data is likewise superfluous and doesn't help with parsing (because if you don't know the PK algorithm, you cannot find the octet count, because it comes after the ephemeral key that you don't know the length of).\r\n\r\nI retract my concern.",
          "createdAt": "2024-02-12T15:17:28Z",
          "updatedAt": "2024-02-12T15:17:28Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "I_kwDOIrmZ-85lcPEh",
      "title": "SHA-3 vs KMAC for KDF",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/46",
      "state": "CLOSED",
      "author": "teythoon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "postponed"
      ],
      "body": "Are there specific reasons for preferring KMAC over HKDF as key combiner?  Seeing that v6 OpenPGP now uses HKDF everywhere, it seems tempting to also use it as combiner to reduce the number of required algorithms, no?",
      "createdAt": "2023-05-09T11:27:07Z",
      "updatedAt": "2024-02-12T14:45:27Z",
      "closedAt": "2024-02-12T14:45:26Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "The problem, as far as I understand it, is that HKDF is HMAC-based and HMAC does not qualify as a dual-PRF, which is what is needed when a secret shall be derived from two input keys: https://datatracker.ietf.org/meeting/113/materials/slides-113-cfrg-a-dual-prf-construction-00#page=8",
          "createdAt": "2023-05-16T14:27:05Z",
          "updatedAt": "2023-05-16T14:27:05Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't understand.  The authors of the document are indeed using HMAC, albeit with an expansion step before, and they are doing HMAC twice, once with key 1 as key input and key 2 as data, the second time with the inputs swapped for symmetry, then xoring the HMAC outputs.\r\n\r\nIn contrast, this document simply does `KMAC(key1 || key2)`.  I don't understand why that should be a dual-PRF whereas `HKDF(key1 || key2)` should not be one.\r\n\r\nPlease unconfuse me.\r\n\r\nThe reason I'm bringing this up is that KMAC seems not to be widely available in cryptographic libraries.  A quick survey of the five cryptographic libraries that Sequoia can use paints a bleak picture:\r\n\r\n- Nettle: not implemented\r\n- OpenSSL: implemented in some versions, but not available in the bindings\r\n- Botan: implementation in progress\r\n- Rust: planned\r\n- CNG: only in very new versions (starting with Windows 11 Preview Build 25324)\r\n\r\nIn contrast, HKDF (and HMAC) is available in all libraries in all versions we support.",
          "createdAt": "2023-05-17T07:19:23Z",
          "updatedAt": "2023-05-17T07:19:23Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I completely understand the problem regarding the implementation aspect. Regarding the theoretical questions, I cannot address them profundly. But yes, I would also assume that an HMAC-based and thus also HKDF-based construction should be possible. It might be far from optimal in terms of efficiency though. If that doesn't matter, we could try to figure out whether this is possible.\r\n\r\nThe reason why KMAC yields a dual-PRF simply with concatenation of the keys is apparently because it is based on SHA-3. When talking about HMAC above, I refer only (and also the authors of the slides, I assume) about HMAC using SHA-2.",
          "createdAt": "2023-05-17T07:33:05Z",
          "updatedAt": "2023-05-17T07:33:05Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I see the statement \"HMAC is generally not a dual-PRF.\" in the slides, but I don't see the assertion that KMAC should be one.",
          "createdAt": "2023-05-17T07:41:52Z",
          "updatedAt": "2023-05-17T07:41:52Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> I see the statement \"HMAC is generally not a dual-PRF.\" in the slides, but I don't see the assertion that KMAC should be one.\r\n\r\nYes, sure. That work apparently does not deal with SHA-3 as dual-PRF at all. For these considerations you will have to look  into the security considerations of [draft-ounsworth-cfrg-kem-combiners](https://datatracker.ietf.org/doc/draft-ounsworth-cfrg-kem-combiners/) (which is work in progress, though, and might not be up to date). This was also discussed on the CFRG mailing list, see for instance [here](https://mailarchive.ietf.org/arch/msg/cfrg/LYkaqKMS2yIWqkHKASWbZ9aHhTY/)\r\n\r\nEdit: The repository of the KEM combiner draft is here: https://github.com/EntrustCorporation/draft-ounsworth-cfrg-kem-combiners",
          "createdAt": "2023-05-17T07:48:16Z",
          "updatedAt": "2023-05-17T08:31:23Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "By the way, this is the paper to the slides mentioned above: https://eprint.iacr.org/2022/065.pdf",
          "createdAt": "2023-05-17T07:54:40Z",
          "updatedAt": "2023-05-17T07:54:40Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "If we consider adopting the [HMAC-based approch from the above paper](https://datatracker.ietf.org/meeting/113/materials/slides-113-cfrg-a-dual-prf-construction-00#page=18), there would be quite some overhead in the implementation, as apparent from the slide at the link.\r\n\r\nSo we should ask the question, if implementing this construction is really simpler than implementing KMAC on top of SHA-3. And for the latter, indeed, there can be a problem, as I learned from my implementation of KMAC in Botan. KMAC  [makes use of KECCAK[c]](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-185.pdf#page=28), a hash-function building block from which also SHA-3 is derived, that is most likely not readily available in most libraries. It wasn't in Botan, and I had to dig into the SHA-3 details and refactor some code to make KECCAK[c] available. This lead to a longer discussion of how the new design of the KECCAK[c]-based hash functions should look with the Botan maintainers. See \r\n\r\n* https://github.com/randombit/botan/issues/3279\r\n* and https://github.com/randombit/botan/pull/3525.\r\n\r\nThe reason for the need for refactoring is the following: Formally, SHA-3 is derived from KECCAK[c] as specified [here](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf#page=28). For instance:\r\n```\r\nSHA3-224(M) = KECCAK[448] (M || 01, 224)\r\n```\r\nHere, `01` denotes the final padding bits of SHA3. KMAC uses a different final bit padding. Now there is also a [final bit padding already in KECCAK[c]](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf#page=27), which is applied prior to that of the derived hash function. However, in Botan, these final bit paddings were mixed together, which made it difficult to understand what is happing in the code exactly and required me not only to use the KMAC specification, but also to disentangle the SHA-3 implementation from its basic building block KECCAK[c].\r\n\r\nI haven't looked into any other crypto libraries, but I would assume that at least some will have the same problem. So my conclusion is that an HMAC-based approach might indeed be simpler, even though it will require some overhead in coding the dual-PRF. But at least that will be straightforward and not require an analysis or refactoring of the underlying algorithms, as I experienced with Botan.",
          "createdAt": "2023-05-17T08:26:40Z",
          "updatedAt": "2023-05-17T08:26:40Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that the [draft-ounsworth-cfrg-kem-combiners](https://github.com/EntrustCorporation/draft-ounsworth-cfrg-kem-combiners/blob/master/draft-ounsworth-cfrg-kem-combiners.txt) also allows for \r\n\r\n* KDF = SHA3-256 and\r\n* KDF = SHA3-512",
          "createdAt": "2023-05-17T08:34:20Z",
          "updatedAt": "2023-05-17T08:34:20Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, the SHA3-based combiners seem to be easier to implement on top of existing primitives.",
          "createdAt": "2023-05-17T08:35:58Z",
          "updatedAt": "2023-05-17T08:35:58Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I've made a corresponding PR: https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/48",
          "createdAt": "2023-05-17T09:21:45Z",
          "updatedAt": "2023-05-17T09:21:45Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Hey @teythoon and @falko-strenzke, sorry for being late at the party. Thanks for the feedback and PR.\r\n\r\nI'm not the biggest fan of this change. I agree it's extra work to get KMAC right, but it does provide some practical advantages over both SHA2 and SHA3. \r\n\r\nSHA2, as Falko has said has the issue of not being a dual-PRF or anywhere close to a split-key pseudorandom functions (as required for the formal proof in the [paper Falko linked](https://eprint.iacr.org/2022/065.pdf)).\r\n\r\nThen, I personally think KMAC is still superior to SHA-3:\r\n- It requires the same primitives to be available, therefore it does not really expand the implementation footprint\r\n- It provides domain separation. SHA-3 can be used to perform KDF in the ECDH packet too. That packet's fucked up because it tries to be NIST SP 800 56C compliant but  includes a variable length left-encoded OID that messes up the right-encoded values (i.e. fixed positions counting from the right). Algorithm ID and version are in the limbo of the variable-length part.\r\n- SHA3 (especially in its 512 bit variant, to provide the same bit-level security as KMAC256) is slower than KMAC\r\n- As implemented in the PR, SHA3 limits the key size to its output size, i.e. using SHA3-256 effectively bars out using anything higher than 256 bit keys (not that I'm greatly concerned about using 512 bit keys, but to be kept in mind)\r\n- KMAC provides an independent output based on the requested oBits length, while SHA-3 just truncates the output. This could be achieved from SHA-3 too, but needs some readapting.\r\n\r\nI don't think that any implementation supporting SHA3 can't support KMAC. It might be tricky to have access to the primitives, as Falko mentioned.\r\n\r\nAs an author of [draft-ounsworth-cfrg-kem-combiners](https://github.com/EntrustCorporation/draft-ounsworth-cfrg-kem-combiners) I gotta add that we considered dropping the SHA3 variants and leave KMAC only, because of the previous reasons and the feedback we got from the CFRG. We decided to leave it in there because there could be some really constrained protocol that might have a good use of it and it's indeed not insecure, but just offers less. OpenPGP is IMO definitely not a constrained protocol.\r\n\r\nFinally Nettle offers [shake256 with context](https://docs.rs/nettle-sys/latest/nettle_sys/fn.nettle_sha3_256_shake.html), and rust offers [sha3::CShake256Core](https://docs.rs/sha3/latest/sha3/struct.CShake256Core.html) upon which KMAC can be built as [we did in golang](https://github.com/ProtonMail/go-crypto/blob/3d33cfd85858654533d5ab2728c4048dadccc87b/internal/kmac/kmac.go). OpenSSL seems indeed not to offer the bindings, and I hope to be wrong, but seems like CNG [does not even offer SHA3](https://learn.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-identifiers).\r\n\r\nNote that this is still a draft, and am happy to hear feedback from developers. If the community thinks the advantages of KMAC does not counterbalance the costs of implementing it I'm still happy to switch to the SHA3-256 variant, but not as done in #48, as I think some parts are missing there. In particular I'd include the counter increase and improve the context separation definition.\r\n\r\n\r\n\r\n",
          "createdAt": "2023-05-17T16:53:48Z",
          "updatedAt": "2023-05-17T16:53:48Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "And as a small PS: since we're all gonna be at the summit, let's have a chat there about this :)",
          "createdAt": "2023-05-17T16:56:54Z",
          "updatedAt": "2023-05-17T16:56:54Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Finally Nettle offers [shake256 with context](https://docs.rs/nettle-sys/latest/nettle_sys/fn.nettle_sha3_256_shake.html), and rust offers [sha3::CShake256Core](https://docs.rs/sha3/latest/sha3/struct.CShake256Core.html) upon which KMAC can be built as [we did in golang](https://github.com/ProtonMail/go-crypto/blob/3d33cfd85858654533d5ab2728c4048dadccc87b/internal/kmac/kmac.go). OpenSSL seems indeed not to offer the bindings, and I hope to be wrong, but seems like CNG [does not even offer SHA3](https://learn.microsoft.com/en-us/windows/win32/seccng/cng-algorithm-identifiers).\r\n\r\nThat is good to hear, I didn't realize that, and indeed that seems like something we could steal^Wadapt.  I'm sure the OpenSSL bindings can be easily extended.  CNG gets Keccak-based constructions \"soon\", but it will be quite some time until people can rely on that being available.  But in the mean time, we will augment CNG with algorithms from RustCrypto, as we do for other algorithms (notably, Ed25519... wtf CNG...)\r\n\r\nhttps://blogs.windows.com/windows-insider/2023/03/23/announcing-windows-11-insider-preview-build-25324/\r\n\r\nI guess that addresses my concern.",
          "createdAt": "2023-05-19T16:44:18Z",
          "updatedAt": "2023-05-19T16:44:18Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi, as said on the PR #48, I would keep this issue open in order to see if the implementation turns out to be too complex here for other parties too, or if there is any slightly more complex SHA-3 construction that could give us the same properties (for our limited use scenario) for a lower implementation cost.\r\n\r\nThanks for looking into this @teythoon!",
          "createdAt": "2023-05-23T07:51:56Z",
          "updatedAt": "2023-05-23T07:51:56Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "NONE",
          "body": "Hey @teythoon and @falko-strenzke, @wussler, sorry for being _very_ late at the party.\r\n\r\nI am not going to wade into the theoreticals -- that's what Falko, Aron, and Stavros are for ;) -- but we already faced criticism that \r\n\r\n```\r\nKDF(counter || k_1 || ... || k_n || fixedInfo, outputBits)\r\nwhere\r\nk_i = H(ss_i || ct_i)\r\n```\r\nis too many invocations of `H`, and thus as a consolation to performance, we also offer\r\n```\r\nk_i = ss_i || ct_i\r\n```\r\nwhen safe.\r\n\r\nGiven this, I cannot imagine that the construction from [2022/065] will be well received given that involves the expander\r\n\r\n```\r\nF(k) = H(0||k1)||H(1||k1)||...||H(j||k1)||H(0||k2)||H(1||k2)||...||H(j||k2)||H(0||Kn)||H(1||Kn)||...||H(j||kn)\r\n```\r\nwhich I believe calls `H()` 3x for each block of input.\r\n\r\nSo I think the debate comes down to how much the dual-PRF property matters in practice. Based on discussions, I get the feeling that the answer is \"not enough to be worth doing\".",
          "createdAt": "2023-06-04T22:23:37Z",
          "updatedAt": "2023-06-04T22:25:20Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "So far we have not seen any further requests regarding this change. @teythoon: I think you also now have implementations available, right? Can we close this issue?",
          "createdAt": "2024-02-12T14:37:13Z",
          "updatedAt": "2024-02-12T14:37:13Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Finally Nettle offers [shake256 with context](https://docs.rs/nettle-sys/latest/nettle_sys/fn.nettle_sha3_256_shake.html)\r\n\r\nFTR, that is a misunderstanding.  The context in the function signature is the context object for the Shake operation, not the context in the cryptographic context sense.\r\n\r\nNevertheless, I am convinced that KMAC will be the least of our problems algorithm-wise, and we'll depend on Botan which has KMAC for the PQ algorithms in the short-term anyway.  So yeah, my concern is sufficiently addressed, thanks for bearing with me.",
          "createdAt": "2024-02-12T14:45:27Z",
          "updatedAt": "2024-02-12T14:45:27Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "I_kwDOIrmZ-85lrNFW",
      "title": "512 bit vs. 384 bit curves",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/47",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "falko-strenzke"
      ],
      "labels": [
        "meeting-2023-06-05"
      ],
      "body": "We are currently specifying composite schemes combining PQC Level 5 with 384 bit curves. \r\n\r\nThe potential problem that I see here is that 384 bit curves do not fulfull requirements for long term security.\r\n\r\nFor instance the BSI uses 512 bit curves already now for long term secure keys:\r\n* BSI country signing CA: 512 bit ECDSA from 2019:\r\n  * https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Publikationen/TechnischeRichtlinien/TR03116/BSI-TR-03116-2.pdf?__blob=publicationFile&v=5#page=10\r\n  * Refers for long term secure key size to https://www.ecrypt.eu.org/csa/documents/D5.4-FinalAlgKeySizeProt.pdf#page=59\r\n    * There, for long term security (up to 30 - 50 years): 512 bit ECC keys \r\n\r\nOne point to consider here is that we do not necessarily know today what the relevant requirements will be for the composite pairs. Today it may be convincing that the traditional scheme plays only a transitory role. But actually an application with long term security requirements that has to use the composite at the point where the new standard is available, it is necessary to fulfill that requirement in both scenarios where either of the two schemes turns out to be insecure.\r\n\r\nFrom that perspective I see it as natural to pair schemes in composite constructions only with equal classical security. Especially for encryption this is ultimately important in my opinion, but also applies to signatures.\r\n\r\nI am aware that the the current selection of pairs is aligned with the choices of LAMPS. However, from my perspective it would make sense to point them to this issue as well.",
      "createdAt": "2023-05-11T13:21:42Z",
      "updatedAt": "2023-06-05T13:20:19Z",
      "closedAt": "2023-06-05T12:55:10Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "For the sake of completeness: With X448+Kyber1024 we have one combination with a similar security level. However, whoever is by regulatory requirements committed to 256 bit cannot use X448. Furthermore, there may be other reasons to why Secp or Brainpool parameters have to be used in certain context.",
          "createdAt": "2023-05-15T11:44:13Z",
          "updatedAt": "2023-05-15T11:44:13Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "After the internal discussions among the draft team, we came to the conclusion that it makes sense to keep the current combinations that combine EC and Dilithium / Kyber as given in the following table\r\n\r\n| targeted classical security level / bits| Kyber / Dil. level | curve length /bits | \r\n| -------------------------                   |   --------------------|    -------------------| \r\n| 128                                            |  L3 (192 bit class. sec.)              |   256                   |\r\n| 192                                             | L5 (256 bit class. sec.)                     |  384                   |\r\n\r\nThat means that the EC curves are chosen to match the targeted classical (not PQ) security level. The PQC scheme is chosen with a safety margin in the security parameters to account for potential improvements of classical attacks on the new lattice based algorithms.",
          "createdAt": "2023-06-05T12:38:37Z",
          "updatedAt": "2023-06-05T13:20:19Z"
        }
      ]
    },
    {
      "number": 49,
      "id": "I_kwDOIrmZ-85nzAM4",
      "title": "Refer to Kyber `standard` branch (modified FO transform)",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/49",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "postponed"
      ],
      "body": "",
      "createdAt": "2023-06-05T09:59:46Z",
      "updatedAt": "2023-09-11T13:18:47Z",
      "closedAt": "2023-09-11T13:18:47Z",
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Will be switched on a future draft version once the NIST (draft) standard is published, when changing the ref",
          "createdAt": "2023-06-05T10:29:41Z",
          "updatedAt": "2023-06-05T10:29:41Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "NIST ML-KEM draft covers this already.",
          "createdAt": "2023-09-11T13:18:47Z",
          "updatedAt": "2023-09-11T13:18:47Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "I_kwDOIrmZ-85ozRKh",
      "title": "Remove PK hash from key combiner",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/51",
      "state": "CLOSED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Use the considerations in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/50 and remove the duplicated PK info from the key combiner, since it's already in all KDFs\r\n\r\n",
      "createdAt": "2023-06-15T08:02:47Z",
      "updatedAt": "2023-07-10T09:12:16Z",
      "closedAt": "2023-07-10T09:12:16Z",
      "comments": []
    },
    {
      "number": 53,
      "id": "I_kwDOIrmZ-85plUkY",
      "title": "Ambiguity around serialization of encryption packet in section 5.2.1",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/53",
      "state": "CLOSED",
      "author": "alexanderkjall",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi\r\n\r\nIn section `5.2.1` it's stated:\r\n\r\n```\r\n   //   Input:\r\n   //   algID     - the algorithm ID encoded as octet\r\n   //   publicKey - the recipient's encryption sub-key packet\r\n   //               serialized as octet string\r\n\r\n   fixedInfo = algID || SHA3-256(publicKey)\r\n```\r\n\r\nAs far as I have understood it, the sub-key packet might be represented in different ways.\r\n\r\nThis is from a conversation I had about it:\r\n\r\n```\r\n< teythoon> capitol: because when we hash packets or kdf them, we provide an explicit normalized form\r\n< teythoon> capitol: normalized wrt the packet framing\r\n< teythoon> capitol: because the ctb may be new or old, the packet length can be encoded in different ways, none of which should change the semantics\r\n< capitol> oh, tricky\r\n< teythoon> yeah\r\n< teythoon> my preferred interpretation of that would be to simply exclude packet framing\r\n``` \r\n\r\nShould there maybe be a clarification around this added to `5.2.1`?",
      "createdAt": "2023-06-23T12:39:16Z",
      "updatedAt": "2023-09-11T13:18:01Z",
      "closedAt": "2023-09-11T13:18:00Z",
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Hello @alexanderkjall, we considered to remove the PK hash in favor of hashing the PK material only with PRs #50 and #55",
          "createdAt": "2023-07-06T10:33:41Z",
          "updatedAt": "2023-07-06T10:33:41Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "The problem is solved by not using the public key as input any more.",
          "createdAt": "2023-09-11T13:18:00Z",
          "updatedAt": "2023-09-11T13:18:00Z"
        }
      ]
    },
    {
      "number": 57,
      "id": "I_kwDOIrmZ-85tKtSX",
      "title": "Hash binding too restrictive?",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/57",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The specification of the hash binding currently doesn't allow the stronger hash functions (SHA512 vs. SHA256 and SHA3-512 vs. SHA3-256) for the smaller PQC signature parameter sets. But I think this restriction doesn't make sense. We should better both hash algorithms of the respective family for the smaller parameter set.",
      "createdAt": "2023-08-01T15:23:34Z",
      "updatedAt": "2023-09-11T13:09:46Z",
      "closedAt": "2023-09-11T13:09:46Z",
      "comments": [
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "There might be some reluctance to go with SHA512 or SHA3-512 when using the Category 3 (+ ECC-256) parameter sets. However, let's discuss it in #60.",
          "createdAt": "2023-08-28T14:05:51Z",
          "updatedAt": "2023-08-28T14:13:08Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I think #60 addresses this well",
          "createdAt": "2023-08-30T18:44:29Z",
          "updatedAt": "2023-08-30T18:44:29Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Where is it addressed?\r\nI think what Falko wants is the following.\r\n\r\nCurrent State in #60:\r\n```\r\n{: title=\"Binding between ML-DSA and signature data digest\" #tab-mldsa-hash}\r\nAlgorithm ID reference | Hash function | Hash function ID reference\r\n----------------------:| ------------- | --------------------------\r\n35, 37, 39             | SHA3-256      | 12\r\n36, 38, 40             | SHA3-512      | 14\r\n```\r\n\r\nSuggested Change (changes in first row):\r\n```\r\n{: title=\"Binding between ML-DSA and signature data digest\" #tab-mldsa-hash}\r\nAlgorithm ID reference | Hash function | Hash function ID reference\r\n----------------------:| ------------------ | --------------------------\r\n35, 37, 39             | SHA3-256, SHA3-512 | 12, 14\r\n36, 38, 40             | SHA3-512           | 14\r\n```\r\n\r\nIt doesn't make sense to restrict the implementation to the use of SHA3-256 if instead SHA3-512 is what the implementer/user wants (for whatever reasons).\r\nFor SLH-DSA in Table 15 it'd be the same: you should be able to sign with SHA-512 or SHA-384 even if it's a SHA-256 parameter set (the same for SHA3).\r\n\r\nDo you disagree with that?\r\n\r\nI can only imagine interoperability concerns as an argument against it. However, the [Preferred Hash Algorithms](https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-crypto-refresh-10#name-preferred-hash-algorithms) subpacket exists to signal what hash algorithms to use. And currently, there are no restrictions on the hash algorithms in OpenPGP, so we are more \"in line\" with the OpenPGP standard if we only restrict the hash-algorithm family and the minimum output length for each signature algorithm instead of a strict one-to-one mapping.\r\n\r\nCurrently, in the security consideration it is stated:\r\n> In order not to extend the attack surface, we bind the hash algorithm used for signature data digestion to the hash algorithm used internally by the signature algorithm.\r\n\r\nIf we make the change, we should slightly change the security considerations to reflect it, too.",
          "createdAt": "2023-09-01T08:21:31Z",
          "updatedAt": "2023-09-01T08:21:31Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "We should discuss that interactively during a meeting. I have no objections allowing more signature data digest algorithms, but I don't know if that is what is wanted in terms of simplicity.\r\n\r\n\r\nBTW: SHA3-256 seems to be an odd choice when you aim for NIST security level 3 Dilithium, as SHA3-256 is level 2. I understand that we chose this due to lacking support for SHA3-384 in the crypto-refresh. For SPHINCS+ we went with SHA(3)-512 for security levels 3 and 5.",
          "createdAt": "2023-09-04T07:08:53Z",
          "updatedAt": "2023-09-04T07:15:28Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Isn't SHA2-256 level 2? Or also SHA3?",
          "createdAt": "2023-09-05T10:22:17Z",
          "updatedAt": "2023-09-05T10:22:17Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "See https://csrc.nist.gov/projects/post-quantum-cryptography/post-quantum-cryptography-standardization/evaluation-criteria/security-(evaluation-criteria)\r\n\r\n1. Any attack that breaks the relevant security definition must require computational resources comparable to or greater than those required for key search on a block cipher with a 128-bit key (e.g. AES128)\r\n\r\n2. Any attack that breaks the relevant security definition must require computational resources comparable to or greater than those required for collision search on a 256-bit hash function (e.g. SHA256/ SHA3-256)\r\n\r\n3. Any attack that breaks the relevant security definition must require computational resources comparable to or greater than those required for key search on a block cipher with a 192-bit key (e.g. AES192)\r\n\r\n4. Any attack that breaks the relevant security definition must require computational resources comparable to or greater than those required for collision search on a 384-bit hash function (e.g. SHA384/ SHA3-384)\r\n\r\n5. Any attack that breaks the relevant security definition must require computational resources comparable to or greater than those required for key search on a block cipher with a 256-bit key (e.g. AES 256)",
          "createdAt": "2023-09-05T10:52:48Z",
          "updatedAt": "2023-09-05T10:52:48Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "With a randomized digest you do not rely on collision resistance. But do people understand this? I guess a straight-forward combination is SHA(3)-384 with Dilithium Level 3. My concern is only that other working groups might look what \"they\" did in OpenPGP and simply copy the combinations without having the expertise to judge if the combination is fine. However, maybe SHA3-256 is fine if you argue that the randomization ensures that an attacker has to find a preimage and that cost is higher than finding a collision.",
          "createdAt": "2023-09-05T10:58:31Z",
          "updatedAt": "2023-09-05T10:58:31Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Draft team meeting 2023-09-11: Agrees to leave hash-bindings as specified currently.",
          "createdAt": "2023-09-11T13:07:06Z",
          "updatedAt": "2023-09-11T13:07:06Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "I_kwDOIrmZ-85tOlhW",
      "title": "Add/Update References to IETF pquip Documents",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/58",
      "state": "CLOSED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "TJ-91"
      ],
      "labels": [
        "Version 03"
      ],
      "body": "See https://datatracker.ietf.org/wg/pquip/documents/\r\n\r\n* The terminology draft for PQ/T has been moved there (adopted by pquip WG), we need to reference the new document.\r\n* https://datatracker.ietf.org/doc/draft-ar-pquip-pqc-engineers/ might also be a reference to consider",
      "createdAt": "2023-08-02T06:43:59Z",
      "updatedAt": "2024-05-16T08:25:56Z",
      "closedAt": "2024-05-16T08:25:56Z",
      "comments": []
    },
    {
      "number": 59,
      "id": "I_kwDOIrmZ-85vLmCR",
      "title": "Align to NIST PQC (Draft) Standards",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/59",
      "state": "CLOSED",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Available at:\r\n\r\nhttps://csrc.nist.gov/News/2023/three-draft-fips-for-post-quantum-cryptography\r\n\r\nWork items:\r\n- Rename algorithms to ML-KEM, ML-DSA, SLH-DSA.\r\n- Align to the randomization options in ML-DSA (see \"hedged\" variant in \u00a76 of FIPS-204) and SLH-DAS (see \"opt_rand\" in \u00a79.2 of FIPS-205). As I understand we do not define the deterministic versions but rather use the salt in v6 signature packets to sign via the randomized versions.\r\n- Translate or adopt terminology (e.g. in ML-KEM they speak of encapsulation/decapsulation keys rather than private/public).",
      "createdAt": "2023-08-24T14:38:18Z",
      "updatedAt": "2023-09-12T15:39:58Z",
      "closedAt": "2023-09-12T15:39:58Z",
      "comments": []
    },
    {
      "number": 61,
      "id": "I_kwDOIrmZ-85v3AeA",
      "title": "Format hyperlinks to mentioned sections in external documents (e.g. RFCs)",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/61",
      "state": "OPEN",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Makes dev life easier.",
      "createdAt": "2023-09-01T04:19:55Z",
      "updatedAt": "2024-05-23T13:12:43Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 67,
      "id": "I_kwDOIrmZ-852ORFp",
      "title": "Concerns regarding section 4.2, restrictions on T and PQ/T encryption to the same recipient",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/67",
      "state": "OPEN",
      "author": "teythoon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "wussler"
      ],
      "labels": [
        "postponed"
      ],
      "body": "Curerntly, the spec states:\r\n\r\n> [4.2. ](https://www.ietf.org/archive/id/draft-wussler-openpgp-pqc-03.html#section-4.2)[Parallel Public-Key Encryption](https://www.ietf.org/archive/id/draft-wussler-openpgp-pqc-03.html#name-parallel-public-key-encrypt)\r\n>\r\n> As explained in [Section 1.4.2](https://www.ietf.org/archive/id/draft-wussler-openpgp-pqc-03.html#non-composite-multi-alg), the OpenPGP protocol inherently supports parallel encryption to different keys of the same recipient. Implementations MUST NOT encrypt a message with a purely traditional public-key encryption key of a recipient if it is encrypted with a PQ/T key of the same recipient.\r\n\r\nIt is not quite clear to me what that means, and how implementations should enforce that restriction.  To be clear, I get the intention and I think it is a valid concern.\r\n\r\n- Does that mean that if there is an OpenPGP certificate that has both a T and a PQ/T encryption subkey, an implementation MUST NOT encrypt to both subkeys?\r\n- Does that mean that if an implementation has two OpenPGP certificates with the same user ID (or aliasing user ID, whatever that exactly means), where one has a T encryption subkey, and the other one has a PQ/T encryption subkey, an implementation MUST NOT encrypt to both subkeys?\r\n- Does that mean that if an implementation has two OpenPGP certificates with different, non-aliasing user IDs, but the implementation or application knows somehow that the certificates belong to the same recipient, where one has a T encryption subkey, and the other one has a PQ/T encryption subkey, an implementation MUST NOT encrypt to both subkeys?",
      "createdAt": "2023-11-08T12:08:15Z",
      "updatedAt": "2024-02-13T09:29:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "We tried to tackle this in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/20, but so far without success. We'll bring this to the list once we're clear on the larger topics",
          "createdAt": "2024-02-13T09:27:59Z",
          "updatedAt": "2024-02-13T09:27:59Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Also duplicate of https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/2",
          "createdAt": "2024-02-13T09:29:21Z",
          "updatedAt": "2024-02-13T09:29:21Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "I_kwDOIrmZ-852OjcK",
      "title": "Consistency in the KEM descriptions",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/68",
      "state": "CLOSED",
      "author": "teythoon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 5.1.2 about ML-KEM starts with\r\n\r\n> 1. Extract the encapsulation key mlkemPublicKey that is part of the recipient's composite public key\r\n\r\nbut in the description of X*-KEM and ECDH-KEM, the recipients pubic key appears out of nowhere.  I think this should be made consistent, one way or the other.",
      "createdAt": "2023-11-08T12:45:16Z",
      "updatedAt": "2024-04-29T08:18:51Z",
      "closedAt": "2024-04-29T08:18:51Z",
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree. Since 5.1. is about the building blocks (for composites), there should not be details of the composite key format. How the public keys are extracted is already part of 5.2.4 (where it belongs)",
          "createdAt": "2023-11-08T13:16:57Z",
          "updatedAt": "2023-11-08T13:16:57Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Now addressed in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/80",
          "createdAt": "2024-02-12T12:10:43Z",
          "updatedAt": "2024-02-12T12:10:43Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as fixed in #80",
          "createdAt": "2024-04-29T08:18:51Z",
          "updatedAt": "2024-04-29T08:18:51Z"
        }
      ]
    },
    {
      "number": 69,
      "id": "I_kwDOIrmZ-852Om7R",
      "title": "Abbreviation MB appears out of nowhere, is not used again",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/69",
      "state": "CLOSED",
      "author": "teythoon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 5.2.2 Key Combiner has:\r\n\r\n> MB = KMAC256(domSeparation, encData, oBits, customizationString)\r\n\r\nBut MB is not motivated, nor used ever again.",
      "createdAt": "2023-11-08T12:49:45Z",
      "updatedAt": "2024-04-29T08:13:59Z",
      "closedAt": "2024-04-29T08:13:59Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Will be fixed by #80.",
          "createdAt": "2024-02-13T12:41:56Z",
          "updatedAt": "2024-02-13T12:41:56Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #80",
          "createdAt": "2024-04-29T08:13:59Z",
          "updatedAt": "2024-04-29T08:13:59Z"
        }
      ]
    },
    {
      "number": 70,
      "id": "I_kwDOIrmZ-852Pa7I",
      "title": "Make explicit how composite verification results are combined",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/70",
      "state": "CLOSED",
      "author": "teythoon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "falko-strenzke"
      ],
      "labels": [],
      "body": "Currently:\r\n\r\n> [6.2.4. ](https://www.ietf.org/archive/id/draft-wussler-openpgp-pqc-03.html#section-6.2.4)[Signature Verification](https://www.ietf.org/archive/id/draft-wussler-openpgp-pqc-03.html#name-signature-verification)\r\n>\r\n> ...\r\n> As specified in [Section 4.3](https://www.ietf.org/archive/id/draft-wussler-openpgp-pqc-03.html#composite-signatures) an implementation MUST validate both signatures, i.e. EdDSA/ECDSA and ML-DSA, to state that a composite ML-DSA + ECC signature is valid.\r\n\r\nBut the signature verification primitives introduced in section 6 looks like\r\n\r\n> (verified) <- EdDSA.Verify(eddsaPublicKey, eddsaSignature, dataDigest)\r\n\r\nSo, \"validate both signatures\" could be understood to do that operation, and it doesn't explicitly say that the result must be `true` (assuming `verified` is a boolean).  This may be overly nitpicky, but I think that making explicit that both must verify successfully, or even stating how the two results are combined would be short and sweet.",
      "createdAt": "2023-11-08T14:34:57Z",
      "updatedAt": "2024-04-29T08:12:45Z",
      "closedAt": "2024-04-29T08:12:45Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "In section [6.2.4. ](https://www.ietf.org/archive/id/draft-wussler-openpgp-pqc-03.html#section-6.2.4)[Signature Verification](https://www.ietf.org/archive/id/draft-wussler-openpgp-pqc-03.html#name-signature-verification) it is stated that for the composite scheme, both signatures have to be validated. But I think that passage could be still a bit clearer by saying \"In order to classify a composite signature as correctly validated, both component signatures must be verified successfully.\"  \r\n\r\n@teythoon Will this address your concern?",
          "createdAt": "2023-11-09T07:27:19Z",
          "updatedAt": "2023-11-09T07:27:44Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Now addressed by https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/80/commits/3622d630b7fc411e0865eb42367c2114f55176d9.\r\n\r\n@teythoon will this suffice from your point of view? Can we close this issue once the PR is merged?",
          "createdAt": "2024-02-12T12:25:15Z",
          "updatedAt": "2024-02-12T12:25:15Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, thanks!",
          "createdAt": "2024-02-12T12:40:12Z",
          "updatedAt": "2024-02-12T12:40:12Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing it, as the changes are now in the main branch (unfortunately I lost track of the PR which was responsible for it, the commit above apparently fell victim to rebasing):\r\n\"As specified in {{composite-signatures}} an implementation MUST validate both signatures, i.e. EdDSA/ECDSA and ML-DSA, successfully to state that a composite ML-DSA + ECC signature is valid.\"",
          "createdAt": "2024-04-29T08:12:45Z",
          "updatedAt": "2024-04-29T08:12:45Z"
        }
      ]
    },
    {
      "number": 71,
      "id": "I_kwDOIrmZ-852Pqvn",
      "title": "Key generation strategies forbids reuse of ECC keys",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/71",
      "state": "CLOSED",
      "author": "teythoon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> [8.2. ](https://www.ietf.org/archive/id/draft-wussler-openpgp-pqc-03.html#section-8.2)[Key generation strategies](https://www.ietf.org/archive/id/draft-wussler-openpgp-pqc-03.html#name-key-generation-strategies)\r\n>\r\n>It is REQUIRED to generate fresh secrets when generating PQ(/T) keys. Reusing key material from existing ECC keys in PQ(/T) keys does not provide backwards compatibility, and the fingerprint will differ.\r\n\r\nForbidding this seems strong and doesn't seem to be motivated in the section.  And, I can actually imagine a use case for reusing existing ECC key material: Imagine I have a smart card that holds my ECC keys for my existing v6 cert, and I want to create a PQ cert in addition to that.  Reusing the ECC key material seems convenient and adds security over having the ECC keys being softkeys, as in the mid term there won't be PQ-capable smart cards.  If I'm not allowed to reuse the ECC key, I'd have to use a second smart card, which is more expensive and unwieldy, hindering adoption of composite algorithms.",
      "createdAt": "2023-11-08T15:06:09Z",
      "updatedAt": "2024-02-12T13:06:04Z",
      "closedAt": "2024-02-12T13:06:04Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "The background here is that as soon as we allow the reuse of existing standalone keys, that an attacker could strip out the PQC signature from a composite signed document. Our concern here is that these notions are taken rather seriously with respect to CMS signatures. Just now at IETF 118 this aspect was discussed for the LAMPS composite signatures draft. In order to reach the strongest non-separability notion given in the [signature specturms draft](https://datatracker.ietf.org/doc/draft-hale-pquip-hybrid-signature-spectrums/), forbidding key reuse is the only realistic way. I think OpenPGP already achieves the weaker notion, since the signature algorithm ID is part of the hashed data (I couldn't find that in the crypto-refresh, wold be nice if someone could confirm or refute this). Thus, when stripping one of the component signatures of a component scheme, the hash value that is signed wouldn't fit to the message any more.\r\n\r\nIn any case your concern is valid in my opinion. From my point of view this decision would be something for the WG to vote on after they understand the two approaches and advantages and disadvantages.\r\n",
          "createdAt": "2023-11-09T07:56:23Z",
          "updatedAt": "2023-11-09T07:56:23Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See [5.2.4. ](https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-12.html#section-5.2.4)[Computing Signatures](https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-12.html#name-computing-signatures): https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-12.html#section-5.2.4-9.2.2.3.1\r\n\r\n> Once the data body is hashed, then a trailer is hashed. This trailer depends on the version of the signature.\r\n>\r\n> [...]\r\n>\r\n> A v4 or v6 signature hashes the packet body starting from its first field, the version number, through the end of the hashed subpacket data and a final extra trailer. Thus, the hashed fields are:\r\n>\r\n> - An octet indicating the signature version (0x04 for v4, 0x06 for v6),\r\n> - The signature type,\r\n> - The public-key algorithm,\r\n> - The hash algorithm,\r\n> [...]\r\n\r\nAnother concern with this MUST NOT is that it doesn't seem actionable.  How is an implementation that is asked to generate a PQ/T key to know whether or not the key has been used before?",
          "createdAt": "2023-11-09T08:24:39Z",
          "updatedAt": "2023-11-09T08:24:39Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for confirming the hashing of the signature algorithm.\r\n\r\n> Another concern with this MUST NOT is that it doesn't seem actionable. How is an implementation that is asked to generate a PQ/T key to know whether or not the key has been used before?\r\n\r\nWell, if the implementation generates new component keys whenever a composite key is generated, then the requirement is clearly fulfilled. The MUST NOT makes it clear for the implementor that they shouldn't give the user the option to reuse existing keys for incoroporation into a composite key. There might be some corner cases where there are keys used on external crypto devices and the implementation cannot trigger the key generation on that device. But I am not sure if that is practically relevant. ",
          "createdAt": "2023-11-09T08:44:30Z",
          "updatedAt": "2023-11-09T08:44:30Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Seems to me that it should rather be a SHOULD NOT as you have already identified an exception to the rule.",
          "createdAt": "2023-11-09T09:09:29Z",
          "updatedAt": "2023-11-09T09:09:29Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "@TJ-91 @fluppe2 @wussler  Considering the points above it seems reasonable to weaken or remove the prohibition of reuse of the EC keys. The hashing of the algorithm ID ensures that stripping a s signature is impossible. Thus I cannot really see any danger in this. And @teythoon points out a convincing use case for key reuse. I there are no further arguments against this step I will make PR for the change.",
          "createdAt": "2024-02-12T11:56:18Z",
          "updatedAt": "2024-02-12T11:56:18Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "> Another concern with this MUST NOT is that it doesn't seem actionable. How is an implementation that is asked to generate a PQ/T key to know whether or not the key has been used before?\r\n\r\nI think this is actionable on the key generation level, and it boils down to \"make fresh keys\". If an implementation just takes the components and assembles them into an OpenPGP key, then it could argue this check is not in scope.\r\n\r\nGenerally I would be okay with lowering this to a SHOULD NOT, even though in this thread we had a look only at signatures. For KEM the domain separation is the context when deriving the shared secret.",
          "createdAt": "2024-02-12T12:09:34Z",
          "updatedAt": "2024-02-12T12:09:34Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Now covered in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/88",
          "createdAt": "2024-02-12T12:35:48Z",
          "updatedAt": "2024-02-12T12:35:48Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged #88",
          "createdAt": "2024-02-12T13:06:04Z",
          "updatedAt": "2024-02-12T13:06:04Z"
        }
      ]
    },
    {
      "number": 74,
      "id": "I_kwDOIrmZ-854UOet",
      "title": "Mandatory AES for v3 PKESK: AES is not a MUST in RFC4880",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/74",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently our draft states (slightly revised text in my working branch) for ML-KEM cmposite encryption:\r\n\r\n> Note that unlike most public-key algorithms, in the case of a v3 PKESK packet, the symmetric algorithm identifier is not encrypted. Instead, it is prepended to the encrypted session key in plaintext. In this case, the symmetric algorithm used MUST be AES-128, AES-192 or AES-256 (algorithm ID 7, 8 or 9).\r\n\r\nBut this isn't possible with RFC 4880 to which we aim to be compatible here, as there AES-128 is only a SHOULD. The only MUST symmetric algorithm there is TripleDES. So either we require at the same time with introducing PQC that AES-128 becomes a MUST, which seems a bit strange to me, or we have to keep the symmetric algorithm flexible, which would make the most sense in my opinion.\r\n\r\nFrom a practical perspective requiring AES-128 as MUST is most likely realistic. But from a formal perspective it means that a sending client conforming to RFC 4880 and sending an encrypted mail to multiple recipients, some supporting ML-KEM, some not, could come into the conflict of having to use AES-128 for the PQC supporting recipients and TripleDES for the legacy clients. Actually the similar but even bigger problem can happen to a client supporting the crypto-refresh and sending to mutiple clients, since the crypto-refresh even completely forbids TripleDES.\r\n\r\nSo should we simply assume that clients today all support AES-128?\r\n\r\n@TJ-91 @wussler @fluppe2\r\n\r\n\r\n",
      "createdAt": "2023-11-30T12:28:45Z",
      "updatedAt": "2024-04-29T10:44:26Z",
      "closedAt": "2024-04-29T10:44:26Z",
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps a short recap of how it came to the quoted text helps to evaluate the issue:\r\n\r\n* When introducing X25519/X448 in the Crypto Refresh, there was an error such that the algorithm identifier byte caused v3 PKESKs and X25519/X448 to be incompatible due to a wrong length for AES Key Wrap ([rfc4880bis issue 157](https://gitlab.com/openpgp-wg/rfc4880bis/-/issues/157)).\r\n* One proposal was to keep the identifier encrypted and use padding, the other was, to take it out of the encryption. The second approach was chosen.\r\n* Afterwards, the symmetric algorithm identifier has been restricted to AES due to cross-mode attack concerns (see [rfc4880bis MR 276](https://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/276)).\r\n* For consistency with the Crypto Refresh, the PQC draft adopted this solution (https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/42)\r\n\r\nI think you raise a very valid point and this would have been a good argument against the chosen approach in the Crypto Refresh.\r\nThe two options I see now:\r\n\r\n* Stay consistent with the Crypto Refresh and assume AES is always supported and add some text to address this issue.\r\n* Encrypt the algorithm identifier and add padding, remove the binding to AES.\r\n\r\n> So should we simply assume that clients today all support AES-128?\r\n\r\nI think it's a reasonable assumption but it would be better to have something to back up this claim and justify the decision.\r\nI have no clear preference for any approach at the moment.\r\n",
          "createdAt": "2023-12-01T08:58:57Z",
          "updatedAt": "2023-12-01T08:58:57Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "> Stay consistent with the Crypto Refresh and assume AES is always supported and add some text to address this issue.\r\n\r\nThis is my preferred approach. We use AES Key Wrap, and makes no sense to extend the attack surface by adding TripleDES support (or any other algorithm).\r\n\r\nNote that we can just make AES mandatory in this draft, and I would have no issue doing so. Implementing the latest PQC algos to then use CAST5 feels very silly.",
          "createdAt": "2024-01-20T13:01:58Z",
          "updatedAt": "2024-01-20T13:01:58Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @wussler that just mandating AES here is the only thing that makes sense.  This is a weird backward-compatible thing, even bothering with the deprecated PKESKv3/SEIPDv1 approach; it doesn't need to be backward-compatible with every possible historical wart of OpenPGP.\r\n\r\nIf anyone is aware of an OpenPGP implementation that has any sort of vaguely active maintenance but cannot do AES, please point to it.",
          "createdAt": "2024-02-05T20:35:21Z",
          "updatedAt": "2024-02-05T20:35:41Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, so what remains is to decide whether we add an explicit note somewhere in the draft that with the introduction of PQC, AES-128 is considered to be mandatory to implement. A reference to the crypto-refresh would also make sense here.",
          "createdAt": "2024-02-06T08:14:07Z",
          "updatedAt": "2024-02-06T08:14:07Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "I would rather specify AES-256 as MUST. Keep in mind that\r\n- the security niveau of AES-128 doesn't match the one for pqc level 3 and 5 parameter sets, AES-128 is NIST level 1\r\n- AES-192 (as a match for the entry level pqc security niveau, i.e. NIST level 3) feels like a peculiar choice, who is using that?\r\n- we use AES-256 for the key wrap anyway.\r\n\r\nAES-256 (instead of AES-128) as MUST in the pqc draft feels like the more correct choice to me",
          "createdAt": "2024-02-06T11:12:07Z",
          "updatedAt": "2024-02-06T11:12:07Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed with @fluppe2 I think this is a very coherent choice",
          "createdAt": "2024-02-06T11:14:27Z",
          "updatedAt": "2024-02-06T11:14:27Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I guess \"coherent\" is the right word here. When it comes to quantum-safety the international recommendation (e.g. CNSA 2.0, ANSSI, BSI) is to use AES-256. So why not just pin AES-256 to the wall.",
          "createdAt": "2024-02-06T11:24:39Z",
          "updatedAt": "2024-02-06T11:24:39Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I have two points.\r\n\r\nFirst, Stavros and Aron, you seem to be mixing \"per-recipient stuff\" and \"per-message stuff\" up. We do use AES Key Wrap as part of the PKESK packets (for X2559/X448/PQC keys), which are per-recipient. We choose the symmetric algorithm based on the principle of \"least common denominator\" and it is per-message, meaning, everyone gets the same message with the same encryption algorithm/key.\r\n\r\nAlso, are we still talking about the backwards compatible issue to legacy (RFC4880) certificates or about generally restricting the algorithm to AES for PQC? If the former, it does not make any sense to me to mandate AES-256 when we aim for compatibility. Remember: This affects all recipients, also the ones that do not have new algorithms and use AES256-KW anyway. If the latter, this is a much more severe change that we have to discuss separately.\r\n\r\nPlease keep in mind that the choice of the symmetric algorithm is orthogonal to the choice of the public-key encryption algorithm. Even requiring AES-128/192/256 for the PKESKv3 case as we (and the Crypto Refresh) currently do is not really \"natural\" for the protocol. Or am I severely misunderstanding something?\r\n\r\n---\r\n\r\nSecond, I want to add a new perspective (but no new information) on the TripleDES issue.\r\n\r\nIn principle, the \"Preferred Symmetric Algorithms\" have to be honored. There is a mismatch between version standards. The mandatory-to-implement algorithm (TripleDES or AES-128) assures that implementations conforming to the spec will always find an intersection of all recipients' preferences (the mandatory-to-implement algorithm). But this is not the case when interoperating between the two standards.\r\n\r\nThe Crypto Refresh defaults to AES-128 when no other algorithm can be found in the intersection. It acknowledges the fact that old implementations might be TripleDES-only implementations but does not loosen the prohibition of using TripleDES and still mandates AES-128 (see 12.2. Symmetric Algorithm Preferences). Therefore, the Crypto Refresh overrides the mandatory-to-implement algorithm to be AES-128 and implicitly assumes that even recipients with old implementations implement it.\r\n\r\nIn summary I think:\r\nIt's not up to the PQC draft to decide what to do here, since it already follows from the Crypto Refresh. Technically, there is no need to clarify any further but I'd not be opposed to a clarification. The right place for a clarification would be in the Crypto Refresh, however.",
          "createdAt": "2024-02-06T11:27:07Z",
          "updatedAt": "2024-02-06T11:32:15Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the clarification Johannes. I think from this it is clear that we must be careful not to introduce any interoperability issues. Moving to AES-128 as mandatory is in line with the crypto-refresh and thus reasonable, but moving beyond that (i.e., to AES-256) would create interoperability issues.",
          "createdAt": "2024-02-06T11:33:48Z",
          "updatedAt": "2024-02-06T11:33:48Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "@TJ-91 \r\n> First, Stavros and Aron, you seem to be mixing \"per-recipient stuff\" and \"per-message stuff\" up. We do use AES Key Wrap as part of the PKESK packets (for X2559/X448/PQC keys), which are per-recipient.\r\n\r\nTrue, indeed here we might be mixing PQ and traditional recipients. This would have definitely been simpler by limiting encryption to v6, but I still see the advantage of having v4 PQC.\r\n\r\n> Even requiring AES-128/192/256 for the PKESKv3 case as we (and the Crypto Refresh) currently do is not really \"natural\" for the protocol. Or am I severely misunderstanding something?\r\n\r\nHere, I think it's okay. Implementations go forward, and if you are that outdated that you don't support AES, I would blame the person still relying on 3des in 2024.\r\n\r\nAs @dkg  pointed out\r\n> If anyone is aware of an OpenPGP implementation that has any sort of vaguely active maintenance but cannot do AES, please point to it.\r\n\r\nThat I know of, there is no implementation not supporting all flavors of AES.\r\n\r\nRe @falko-strenzke \r\n> Moving to AES-128 as mandatory is in line with the crypto-refresh and thus reasonable, but moving beyond that (i.e., to AES-256) would create interoperability issues.\r\n\r\nI would still be in favor of mandating support of AES-256, and in the long run, when sending PQ-only messages we might be able to enforce it. We'd still allow AES-128 for v3 PKESK, and make mandatory AES-256 support (coherently with PQ requirements and the KW).",
          "createdAt": "2024-02-06T12:00:45Z",
          "updatedAt": "2024-02-06T12:00:45Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "> Here, I think it's okay. Implementations go forward, and if you are that outdated that you don't support AES, I would blame the person still relying on 3des in 2024.\r\n\r\nWhat I meant is that mandating a specific symmetric algorithm that has to be used in combination with a specific public-key encryption algorithm violates the separation that OpenPGP used to have between the two kinds of encryption. Only in the case of v3 PKESK and the usage of X25519/X448/PQC, there is this restriction to use AES. That's what I'm saying is not \"natural\". It was more of a side node, though.\r\n\r\n> I would still be in favor of mandating support of AES-256\r\n\r\nEven the Crypto Refresh does not mandate AES-256 so that requirement would be incompatible with a client that fully conforms to it. And we'd still have special cases where we use AES-128 so to me it seems inconsistent. I'd be in favor of not changing how the protocol handles the symmetric algorithms too much. Hopefully, most keys will include AES-192 and AES-256 in their preferences anyway. But this should probably be discussed in another issue.",
          "createdAt": "2024-02-06T12:41:54Z",
          "updatedAt": "2024-02-06T12:42:35Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> That I know of, there is no implementation not supporting all flavors of AES.\r\n\r\nYet still, the crypto-refresh did not make AES-256 MUST for some reason, but only SHOULD. Before going one step furhter than the c-r, I would ask the WG about this. \r\n\r\nAs I understand, we agree that use of AES-256 as the symmetric algorithm can only happen if all recipients are found to support it. If we make AES-256 a MUST for PQC, then, if a recipient has at least one PQC key, this could be used to assert that they support AES-256. Possibly we would want to bind it only to the existence of PQC encryption key.",
          "createdAt": "2024-02-06T12:54:50Z",
          "updatedAt": "2024-02-06T12:54:50Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "As an alternative to @falko-strenzke's proposal we can simply mandate that AES-256 **MUST** be part of the preferred SEIPDv1 / AEAD subpackets if the certificate has a PQ(/T) encryption key. I think that is uncontroversial and it wouldn't make sense to leave it out. We can further mandate that when encrypting to multiple recipients, and all recipients support AES-256, and at least one PKESK uses a PQ(/T) key, then AES-256 has to be chosen for the symmetric encryption.\r\n\r\nPerhaps it could be loosened to the requirement that \"Level 3\" keys only require AES-192 to be supported, but that's not an important decision for now.",
          "createdAt": "2024-02-06T13:34:23Z",
          "updatedAt": "2024-02-06T13:34:23Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> As an alternative to @falko-strenzke's proposal we can simply mandate that AES-256 **MUST** be part of the preferred SEIPDv1 / AEAD subpackets if the certificate has a PQ(/T) encryption key. I think that is uncontroversial and it wouldn't make sense to leave it out. We can further mandate that when encrypting to multiple recipients, and all recipients support AES-256, and at least one PKESK uses a PQ(/T) key, then AES-256 has to be chosen for the symmetric encryption.\r\n\r\n\ud83d\udc4d\r\n> \r\n> Perhaps it could be loosened to the requirement that \"Level 3\" keys only require AES-192 to be supported, but that's not an important decision for now.\r\n\r\nI would leave out AES-192, from what I understood it is generally considered to be not so well supported.\r\n",
          "createdAt": "2024-02-06T13:42:22Z",
          "updatedAt": "2024-02-06T13:42:22Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "@TJ-91 wrote:\r\n> What I meant is that mandating a specific symmetric algorithm that has to be used in combination with a specific public-key encryption algorithm violates the separation that OpenPGP used to have between the two kinds of encryption.\r\n\r\nI agree with Johannes here that this \"violates the separation that OpenPGP used to have\", but i'm also not convinced that the separation is entirely healthy.  I'll note that another aspect of this draft also \"violates\" a traditional OpenPGP separation: the `SLH-DSA` signatures are obliged to use specific choices of digest algorithm for the message. Traditionally, OpenPGP messages could select any digest algorithm with any asymmetric signature primitive.  This isn't exactly the same thing as binding the symmetric cipher to the PKESK choice, of course (for one thing, if you can't read signature A you might still be able to read signature B), but \"violating a traditional separation\" as a general practice isn't necessarily a bad thing.\r\n\r\nAnyway, i don't see why it would be an objection here, especially given that everyone, everywhere, that has any chance of reading a recent encrypted message appears to support both AES-128 and AES-256.",
          "createdAt": "2024-02-07T13:17:55Z",
          "updatedAt": "2024-02-07T13:17:55Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "@TJ-91 wrote:\r\n> we can simply mandate that AES-256 **MUST** be part of the preferred SEIPDv1 / AEAD subpackets if the certificate has a PQ(/T) encryption key.\r\n\r\nI like this idea, but a couple notes of caution:\r\n\r\n- remember that the `AEAD ciphersuite preferences` packet has an implicit `AES-128,OCB` tacked on at the end if it doesn't explicitly contain it, due to the MTI algorithms in the crypto-refresh.\r\n- saying \"`MUST` be part of\" implies that an OpenPGP certificate without it is inherently a malformed protocol data unit; what should a receiving OpenPGP implementation do with such an object?  reject it?  report it? refuse to use it?\r\n\r\nRather than introducing new failure mode, wouldn't it be more straightforward to say that there is an implicit `AES-256,OCB` in the `AEAD Ciphersuite Preferences` for any such public key, aligned with the implicit `AES-128,OCB` entry?",
          "createdAt": "2024-02-07T13:23:48Z",
          "updatedAt": "2024-02-07T13:23:48Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "@dkg good points. \r\n\r\nYou are right about `MUST` and I guess `SHOULD` is enough here. That means, we recommend explicitly adding `AES-256,OCB` to the preferences for certificates that contain a PQ(/T) key; otherwise it's implicitly added at the end.\r\n\r\nA few further points:\r\n* Preferences for SEIPDv1 symmetric encryption should follow the exact same logic, correct?\r\n* If we add `AES-256` / `AES-256,OCB` at the end of the preferences, we might end up with cases where we use `AES-128` /  `AES-128,OCB` instead.\r\n* Do we want to go a step further and assume that `AES-256` /  `AES-256,OCB` is at the front of the list (i.e., the most-preferred algorithm) for a certificate that contains a PQ(/T) key?\r\n* We can even go another step further and generally recommend that a PQC-capable implementation should always favor `AES-256` /  `AES-256,OCB` when creating a SEIPDv1 / SEIPDv2 message (when it's in the intersection of preferred algorithms). This is a bit more effective but still honors the choice of a non-PQC certificate that does not explicitly list `AES-256` /  `AES-256,OCB`.",
          "createdAt": "2024-02-07T16:36:53Z",
          "updatedAt": "2024-02-07T16:36:53Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it might be simplest to say that, for keys like this:\n\n- the implicit list at the end of SEIPDv1 preferences is `AES-256`, `AES-128`.\n\n- the implicit list at the end of SEIPDv2 preferences is `AES-256+OCB`, `AES-128+OCB`.\n\n",
          "createdAt": "2024-02-07T16:59:49Z",
          "updatedAt": "2024-02-07T16:59:49Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that's a good suggestion that effectivly promotes the use of `AES-256` by extending existing mechanisms.\r\n\r\nWhat do the others think?",
          "createdAt": "2024-02-08T07:35:14Z",
          "updatedAt": "2024-02-08T07:35:14Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree this to be a good solution, and our first chance of reporting a substantiating change to the list",
          "createdAt": "2024-02-08T10:48:50Z",
          "updatedAt": "2024-02-08T10:48:50Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "On Wed 2024-02-07 09:00:01 -0800, dkg wrote:\n> - the implicit list at the end of SEIPDv1 preferences is `AES-256`, `AES-128`.\n\nAfter sleeping on it, i think the above change might be the only thing\nneeded, since it relates to the PKESKv3 silliness.\n\n> - the implicit list at the end of SEIPDv2 preferences is `AES-256+OCB`, `AES-128+OCB`.\n\nThis one doesn't seem strictly necessary (PKESKv6's KDF folds in the\nalgorithm ID, so there's no risk of cross-algorithm key mis/re-use).\n\nIf we want to include it, we should include it by making an explicit\n\"needed for post-quantum\" argument.\n",
          "createdAt": "2024-02-08T18:14:11Z",
          "updatedAt": "2024-02-08T18:14:11Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "@dkg I think now you're confusing things but that's because this thread is about two different topics.\r\n\r\n1. The initial issue regarding PKESKv3 and AES vs TripleDES as MTI algorithm is settled and we simply follow the Crypto Refresh in this regard. We bind the symmetric algorithm identifier to AES, and assume that any implementation supports at least `AES-128` (already `MUST` in the Crypto Refresh). The AES restriction makes sure that no cross-algorithm attacks are possible.\r\n2. The second topic in this thread is that we also want to promote the use of `AES-256` since it matches the security of the PQC stuff better than `AES-128` and using `AES-256` is simply good practice and recommended (as Stavros points out). Your proposal to add `AES-256` / `AES-256+OCB` to the preferences of PQC keys does exactly that, but plays no role in the cross-algorithm-attack concerns.\r\n\r\nI hope I got it right since things got a bit confusing.\r\n\r\n> If we want to include it, we should include it by making an explicit\r\n> \"needed for post-quantum\" argument.\r\n\r\nWe can't really say it's \"needed\". It isn't, and the proposal doesn't guarantee that we use `AES-256` in all cases. But I think we have good reasons and no real drawbacks.",
          "createdAt": "2024-02-09T10:50:09Z",
          "updatedAt": "2024-02-09T10:50:09Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "@TJ-91 thanks for the clarification, i think you're right that i got a bit confused by the overlapping topics.\r\n\r\nAnd whether it's \"needed\" or not, it does make sense that if the asymmetric operation embeds the use of AES256 keywrap, it ought to have implied support for AES256 as a symmetric cipher.",
          "createdAt": "2024-02-09T14:40:18Z",
          "updatedAt": "2024-02-09T14:40:18Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "In #90 I propose text for this change",
          "createdAt": "2024-02-12T17:27:33Z",
          "updatedAt": "2024-02-12T17:27:33Z"
        }
      ]
    },
    {
      "number": 75,
      "id": "I_kwDOIrmZ-8580jFN",
      "title": "remove whitespaces in algorithm names",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/75",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "falko-strenzke"
      ],
      "labels": [
        "Version 03"
      ],
      "body": "I would prefer to replace \"ML-KEM-768 + X25519\" by \"ML-KEM-768+X25519\". In UIs it will most likely be presented without spaces in order to make it clearly appear as a single identifier.",
      "createdAt": "2024-01-22T15:17:41Z",
      "updatedAt": "2024-05-27T13:10:15Z",
      "closedAt": "2024-05-27T13:10:15Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Do it after the split",
          "createdAt": "2024-04-29T10:41:46Z",
          "updatedAt": "2024-04-29T10:41:46Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "I_kwDOIrmZ-859mYzg",
      "title": "Please add sntrup761 and mceliece6688128",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/76",
      "state": "OPEN",
      "author": "jas4711",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I suggest to add sntrup761 and mceliece6688128 to the document.\r\n\r\nIncluding some rationale also posted to the mailing list:\r\n\r\nThe argument would be that sntrup761 is a reasonable alternative for lattice-based kyber, and mceliece is a conservative fallback if lattices fails.\r\n\r\nI believe that for some deployments, the currently chosen algorithms won't be relevant, in the same way that NIST would consider some algorithms not relevant for their deployment.  Fortunately NIST reconsider, so we now have Curve25519 in NIST too, and having others lead the way may have helped that happen.\r\n\r\nPlenty of arguments can be made comparing any two crypto algorithms. While it is easy today to see what went wrong in the design of MD4, RC4, DES; I don't believe we yet can easily tell what the bad parts of current PQ algorithms are (except for the recently broken ones, but that doesn't give us enough of patterns to look for) including the mentioned algorithms.  Classic McEliece is the only one with longer track record, but even that has not been widely deployed on the Internet.\r\n\r\nHard coding deployments of protocols to one mandatory crypto algorithm makes the ecosystem vulnerable if a weakness if found in that algorithm. Compare how long it took to migrate from RC4 in TLS.  I believe the modern design approach is to not have crypto negotiation built into protocols but rather roll protocol version to upgrade all protocol semantics, and have one hard coded crypto algorithm and no in-protocol negotiation.  That's not feasible for legacy PGP as far as I can tell.\r\n\r\nThis all leads me to believe that it is better to mandate at least two different PQ-safe algorithms so that we get two variants deployed and get better testing of algorithm negotiation.  The algorithms to select is a subjective choice, and I suggest we pick variants that cater to different communities.\r\n",
      "createdAt": "2024-01-30T08:19:57Z",
      "updatedAt": "2024-05-22T12:30:18Z",
      "closedAt": null,
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi @jas4711, as discussed at IETF 119, we are trying to reduce the number of algorithms, and split off variants to separate drafts to ensure a less controversial draft and an easier document for the WG. We just removed most of the codepoints included in the document.",
          "createdAt": "2024-05-22T12:30:17Z",
          "updatedAt": "2024-05-22T12:30:17Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "I_kwDOIrmZ-8591Aod",
      "title": "clarify x25519 wire format",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/77",
      "state": "CLOSED",
      "author": "dkg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "draft-ietf-openpgp-pqc-00 currently says:\r\n\r\n> For Curve25519 this specification adapts the encoding of objects as defined in [[RFC7748](https://www.ietf.org/archive/id/draft-ietf-openpgp-pqc-00.html#RFC7748)] in contrast to [[I-D.ietf-openpgp-crypto-refresh](https://www.ietf.org/archive/id/draft-ietf-openpgp-pqc-00.html#I-D.ietf-openpgp-crypto-refresh)].\r\n\r\nWhat does this sentence mean?  is \"adapt\" supposed to mean \"adopt\"?  In this context, adapt typically means \"modifies to fit\", while \"adopt\" typically means \"embraces as specified\".  the crypto-refresh draft itself uses RFC 7748 for X25519: https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-13.html#section-5.1.6  There is of course Curve25519Legacy (https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-13.html#section-5.5.5.6.1.1) but that is deprecated and not the recommended approach.",
      "createdAt": "2024-01-31T22:02:37Z",
      "updatedAt": "2024-04-29T07:42:16Z",
      "closedAt": "2024-04-29T07:42:16Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I think you are entirely right. I am quite sure the text you are referring to was written before the crypto-refresh received the new X25519. I integrated my proposed fix in my recent PR https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/80. Please check if that fixes the issue.",
          "createdAt": "2024-02-05T16:26:25Z",
          "updatedAt": "2024-02-05T16:26:25Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing it as fixed in #80",
          "createdAt": "2024-04-29T07:42:16Z",
          "updatedAt": "2024-04-29T07:42:16Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "I_kwDOIrmZ-8591KJf",
      "title": "github repo metadata says \"draft-wussler-openpgp-pqc\", should say \"draft-ietf-openpgp-pqc\"",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/79",
      "state": "CLOSED",
      "author": "dkg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-31T22:25:00Z",
      "updatedAt": "2024-04-29T10:25:30Z",
      "closedAt": "2024-04-29T10:25:30Z",
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this should be fixed in all places",
          "createdAt": "2024-03-04T21:00:57Z",
          "updatedAt": "2024-03-04T21:00:57Z"
        }
      ]
    },
    {
      "number": 82,
      "id": "I_kwDOIrmZ-85-kukC",
      "title": "IANA protocol tables references need updating",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/82",
      "state": "CLOSED",
      "author": "dkg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "draft-ietf-openpgp-crypto-refresh provided a significant update to the IANA registries relevant to OpenPGP.\r\n\r\nPlease go through the draft and ensure that any IANA requests are aligned with the tables [as currently described](https://www.iana.org/assignments/openpgp/openpgp.xhtml).\r\n\r\n",
      "createdAt": "2024-02-07T17:45:42Z",
      "updatedAt": "2024-03-04T20:58:27Z",
      "closedAt": "2024-03-04T20:58:27Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "addressed in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/85",
          "createdAt": "2024-02-08T16:07:58Z",
          "updatedAt": "2024-02-08T16:07:58Z"
        }
      ]
    },
    {
      "number": 83,
      "id": "I_kwDOIrmZ-85-kvDT",
      "title": "Please avoid squatting on codepoints",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/83",
      "state": "CLOSED",
      "author": "dkg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The draft currently stakes out claims for codepoints in the active range of asymmetric keys, though the values are still in flux.  That seems dangerous.\r\n\r\nIf we want concrete values for interoperability testing, feel free to use experimental codepoints (100-110) while the draft is still in flux.\r\n\r\nWe'll stabilize on formal codepoints later in the process once we know what we're getting into.",
      "createdAt": "2024-02-07T17:47:00Z",
      "updatedAt": "2024-02-12T14:03:27Z",
      "closedAt": "2024-02-12T14:03:27Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not entirely sure how to understand this proposal, as the draft currently defines 6 KEM algos and 8 signature algos, so a total of 14 altogether which is more than fits into the range 100-110. To be closest to the current proposal would thus be to use 100 - 113.\r\n\r\nThe \u2013 possibly more consistent \u2013 alternative would be to start from 111 in order to spare the anyway insufficient range of experimental code points entirely.",
          "createdAt": "2024-02-08T07:48:29Z",
          "updatedAt": "2024-02-08T07:48:29Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "Please see #86 for one possible way to use experimental codepoints while the draft is still in flux",
          "createdAt": "2024-02-08T19:40:01Z",
          "updatedAt": "2024-02-08T19:40:01Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I like the clever approach to divide between NIST / Brainpool curves. I'd still prefer not to have an overlap since it makes interop testing more tedious and error-prone. Also, it introduces the overhead to keep separate branches up to date.",
          "createdAt": "2024-02-09T11:13:54Z",
          "updatedAt": "2024-02-09T11:13:54Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "@TJ-91 i like your suggestion to just leave the MAY algorithms explicitly `TBD` and only use experimental codepoints for the SHOULD and MUST algorithms.  Would you prepare a pull request with that?",
          "createdAt": "2024-02-09T14:37:15Z",
          "updatedAt": "2024-02-09T14:37:15Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "See #87 ",
          "createdAt": "2024-02-12T09:03:03Z",
          "updatedAt": "2024-02-12T09:03:03Z"
        }
      ]
    },
    {
      "number": 84,
      "id": "I_kwDOIrmZ-85-k1Og",
      "title": "mail weekly github summary to mailing list",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/84",
      "state": "CLOSED",
      "author": "dkg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dkg"
      ],
      "labels": [
        "administrative"
      ],
      "body": "We want a weekly summary of github activity to go to the [openpgp@ietf.org mailing list](https://www.ietf.org/mailman/listinfo/openpgp).  I'll work on setting this up.",
      "createdAt": "2024-02-07T18:00:02Z",
      "updatedAt": "2024-02-20T05:48:25Z",
      "closedAt": "2024-02-19T17:45:44Z",
      "comments": [
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "This is now done.  First message went out yesterday: https://mailarchive.ietf.org/arch/msg/openpgp/ahQNeRkwEPqpgANokKX8Jh8F4x0",
          "createdAt": "2024-02-19T17:45:44Z",
          "updatedAt": "2024-02-19T17:45:44Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Great, thank you!",
          "createdAt": "2024-02-20T05:48:25Z",
          "updatedAt": "2024-02-20T05:48:25Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "I_kwDOIrmZ-85_GIpY",
      "title": "binding signature hash for PQC encryption v4 keys",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/91",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "TJ-91"
      ],
      "labels": [
        "Version 03"
      ],
      "body": "Kai Engert kindly pointed out that Werner Koch had mentioned (on the LibrePGP list?) that with v4 PQC keys SHA-1 binding signatures would still be allowed. I currently don't see a problem with this, as I don't see how collission attacks against key binding signatures could be possible. The attacker would have to be able to supply one public key for which he has a collision and have that be signed by the victim.\r\n\r\nStill, we might want to mandate that at least SHA-256 must be used in the binding signatures. Any opinions @wussler @fluppe2 @TJ-91 ?",
      "createdAt": "2024-02-13T13:22:08Z",
      "updatedAt": "2024-05-27T21:26:59Z",
      "closedAt": "2024-05-27T10:23:03Z",
      "comments": [
        {
          "author": "kaie",
          "authorAssociation": "NONE",
          "body": "Werner had mentioned it in this message:\r\nhttps://lists.gnupg.org/pipermail/librepgp-discuss/2024/000045.html\r\n",
          "createdAt": "2024-02-13T13:27:21Z",
          "updatedAt": "2024-02-13T13:27:21Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "For v4 fingerprints (that seems to be what Werner is talking about?) we will not be able to do anything. For other purposes, I think the Crypto Refresh already forbids SHA-1 for most things, see https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-crypto-refresh-13#section-9.5",
          "createdAt": "2024-02-13T13:41:42Z",
          "updatedAt": "2024-02-13T13:42:01Z"
        },
        {
          "author": "kaie",
          "authorAssociation": "NONE",
          "body": "Couldn't your draft include a statement like this?\r\n\"Applications that support PQC encryption keys defined in this document MUST ensure that the binding signature for the PQC subkey uses a SHA-256 signature or a stronger has. PQC encryption subkeys that use SHA-1 for the binding signature MUST be ignored.\"",
          "createdAt": "2024-02-13T13:50:23Z",
          "updatedAt": "2024-02-13T13:50:45Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "On Tue 2024-02-13 05:22:20 -0800, Falko Strenzke wrote:\n> I don't see how collission attacks against key binding signatures\n> could be possible. The attacker would have to be able to supply one\n> public key for which he has a collision and have that be signed by the\n> victim.\n\nWhat about a scenario where an attacker offers the user a\ndecryption-capable subkey (e.g. by providing them with a smartcard)?\n\nEven if we don't think this could ever be a plausible scenario, there is\na higher-level, simpler story that is useful to be able to tell, and it\ngoes like this:\n\n- SHA-1 is never used in modern OpenPGP\n\nCarving out random corner exceptions for one nuanced case or another\njust weakens that story and makes it more challenging to offer clarity\nfor implementers and analysts.\n",
          "createdAt": "2024-02-13T21:00:06Z",
          "updatedAt": "2024-02-13T21:00:06Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "> SHA-1 is never used in modern OpenPGP\r\n\r\nI think that is too ambiguous. Is v4 + PQC \"modern\"? For v6 it's clear and a trivial statement. For v4 we have the ambiguity: You can implement the old standard or the crypto refresh. The Crypto Refresh forbids SHA-1 with the exception where it's really needed (fingerprint, v1 SEIPD). The Crypto Refresh explicitly mentions signatures:\r\n\r\n> Implementations MUST NOT generate signatures with MD5, SHA-1, or RIPEMD-160.\r\n\r\nSo, we can add all sorts of statements that the Crypto Refresh already makes but I think this will bloat the PQC spec. We can either clarify that implementations should/must follow the Crypto Refresh's v4 specification, or we can add some broad statements about deprecated hash and symmetric encryption algorithms. Personally, I would like to go with the first option. Some further clarification can be provided in the security considerations, if needed.\r\n\r\nWould that be a satisfactory solution to this issue?",
          "createdAt": "2024-02-15T10:32:04Z",
          "updatedAt": "2024-02-15T10:33:00Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "On Thu 2024-02-15 02:32:16 -0800, Johannes Roth wrote:\n>> SHA-1 is never used in modern OpenPGP\n>\n> I think that is too ambiguous.\n\nThat's exactly my point.  It's already too ambiguous.  please don't make\nit more ambiguous.\n\n> Is v4 + PQC \"modern\"?\n\nIf by \"v4 + PQC\" you mean \"following only the guidance in RFC 4880, but\nwith a post-quantum algorithm\", this combination on its face is not\nmodern.  v4 was defined in RFC 4880 in 2007, over 16 years ago.  Even at\nthat time, it was known (via Wang et al.)  that SHA-1 was not everything\nit was hoped it would be.\n\n> For v4 we have the ambiguity: You can implement the old standard or\n> the crypto refresh.\n\nWhere the crypto-refresh offers clarification for packets initially\ndefined in RFC 4880, the PQC draft should absolutely follow it.  It's\n2024, and there is absolutely no reason to accommodate an implementation\nthat is capable of understanding ML-KEM, ML-DSA, or SLH-DSA, but still\ndecides to publish and rely on SHA-1 for its signatures.\n\n> So, we can add all sorts of statements that the Crypto Refresh already\n> makes but I think this will bloat the PQC spec.\n\nI don't think it's much of a bloat to say something simple like:\n\n    Subkey binding signatures over algorithms described in this document\n    and primary key binding signatures made by algorithms described in\n    this document MUST NOT be made with `MD5`, `SHA-1`, or `RIPEMD-160`.\n    A receiving implementation MUST be treated such a signature as\n    invalid.\n",
          "createdAt": "2024-02-15T13:58:48Z",
          "updatedAt": "2024-02-15T13:58:48Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> I don't think it's much of a bloat to say something simple like: Subkey binding signatures over algorithms described in this document and primary key binding signatures made by algorithms described in this document MUST NOT be made with `MD5`, `SHA-1`, or `RIPEMD-160`. A receiving implementation MUST be treated such a signature as invalid.\r\n\r\nIn principle I agree, that this text makes sense. But if we should find more and more requirements from the crypto-refresh that we need to duplicate, I would prefer to find another way of expressing the same thing. We could then for instance say that for v4/PQC, the v4 imlementation MUST be subject to the specifications made in the crypto-refresh vor v4.",
          "createdAt": "2024-02-15T14:13:21Z",
          "updatedAt": "2024-02-15T14:13:51Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Another requirement would be to forbid encryption via TripleDES, CAST5, IDEA.\r\n\r\nIf it's only those two cases (hashes and symmetric encryption), I'm fine with it, otherwise I would also prefer to simply mandate the Crypto Refresh's v4 spec. Or is there a reason to adopt only a few selected requirements from the crypto refresh?",
          "createdAt": "2024-02-15T14:38:41Z",
          "updatedAt": "2024-02-15T14:38:41Z"
        },
        {
          "author": "kaie",
          "authorAssociation": "NONE",
          "body": "Just thinking out loud, if the RFC for PQC was self-contained, and didn't depend on the crypto-refresh document, then maybe some implementations would be willing to adopt and implement the PQC document, even if they aren't ready for the crypto-refresh specification. By adding a reference to the crypto-refresh document, it could be considered a hint that the RFC for PQC cannot be implemented independently.",
          "createdAt": "2024-02-15T14:49:06Z",
          "updatedAt": "2024-02-15T14:49:06Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "We do have to reference somehow the OpenPGP spec, and I don't think it's a good idea to reference RFC4880, since the upcoming RFC obsoletes it",
          "createdAt": "2024-02-15T15:03:42Z",
          "updatedAt": "2024-02-15T15:03:42Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "@kaie That sounds reasonable. I think the most constructive way forward would be to look at the differences between the Crypto Refresh and RFC 4880 (+Camellia/ECC) and solely concentrate on v4. Then we can see if we need all of it, or only some of it.\r\n\r\nJust a note: this all only affects v4 certificates with a PQ/T encryption subkey. PQ(/T) signatures are only allowed for v6 currently.\r\n\r\nWhen skimming through https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-crypto-refresh-13#name-upgrade-guidance-adapting-i I think nothing really hurts too much for an implementation willing to implement PQC.\r\n\r\n* avoiding RSA weak keys / DSA / ElGamal is a good step that you want to take when you upgrade to PQC.\r\n* implementing X25519/Ed25519 as MTI seems easy enough if you implement the PQC MTI algorithms (that also require X25519/Ed25519 and AES KeyWrap). Edit: Is this really MTI for v4? Seems strange.\r\n* avoiding the deprecated digest and symmetric encryption algorithms is also reasonable.\r\n* avoiding SED packets seems reasonable.\r\n* avoiding v3 also seems reasonable.\r\n* other stuff about S2K etc. can probably be ignored if an implementation wishes to. I do not see how it relates to PQC at all. Obviously, it'd be best to follow the new spec, though. \r\n\r\nPlease tell me if I've missed something big. \r\nI see three options:\r\n\r\n1. Mandating to follow the Crypto Refresh's v4 spec.\r\n2. Decide on a \"minimal set of additions to RFC 4880(+Camellia/ECC)\" that we deem necessary for PQC.\r\n3. Make no restrictions at all and just let implementations add a new public-key algorithm.\r\n\r\nI think 1) is the easiest solution but would be willing to go with 2) if we see a clear reason that this could speed up the adoption of PQC encryption. I don't really see it, though. As for option 3) I guess we have ruled that out already.",
          "createdAt": "2024-02-15T15:59:49Z",
          "updatedAt": "2024-02-15T16:17:19Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "On Thu 2024-02-15 06:13:32 -0800, Falko Strenzke wrote:\n> for v4/PQC, the v4 imlementation MUST be subject to the specifications made in the crypto-refresh vor v4.\n\nRemember that \"v4\" only refers to keys and signatures, and not to\nencryption.  But i think we need to talk about encryption as well.\n\nThe draft will likely avoid referring to RFC 4880 entirely and only\nrefer to the RFC that the crypto-refresh becomes.\n\nWe have then, i think, two options:\n\n- merely say nothing, and let the crypto-refresh speak by implication,\n  or\n\n- explicitly call out the same constraints, while referring to the\n  appropriate sections in the crypto-refresh.\n\nI lean toward the latter, because we are already coupling classical\nsymmetric algorithms with the PQC algorithms in this draft\n(e.g. SLH-DSA), and i don't think it's \"bloat\" to add a sentence or two\nas explicit clarification.\n",
          "createdAt": "2024-02-15T16:35:00Z",
          "updatedAt": "2024-02-15T16:35:00Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "> explicitly call out the same constraints, while referring to the\r\n>   appropriate sections in the crypto-refresh.\r\n\r\nI think nobody is against adding a sentence or two for clarification, even if it's duplicated from the Crypto Refresh.\r\nWhat do we do with \"avoiding SED\" or \"avoiding v3\" or changes to \"S2K\"? Do we add that to the PQC document? Why or why not?\r\nCan we agree on a set of statements that we need to duplicate while not introducing ambiguitiy by leaving out only some?",
          "createdAt": "2024-02-16T10:54:45Z",
          "updatedAt": "2024-02-16T10:54:45Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I would add something as easy as\r\n\r\n    Subkey binding signatures over algorithms described in this document\r\n    and primary key binding signatures made by algorithms described in\r\n    this document MUST NOT be made with `MD5`, `SHA-1`, or `RIPEMD-160`.\r\n    A receiving implementation MUST be treated such a signature as\r\n    invalid.\r\n\r\nWe already invalidate IDEA/3DES/... because we mandate the use of AES in the v1 SEIPD and v2 SEIPD requires a cipher that can be used in AEAD mode.\r\nWe could add a paragraph for SED, that's already fulfilled from all implementations (no implementation burden)\r\n\r\n    Implementations MUST NOT use Symmetrically Encrypted Data packets (tag 9)\r\n    to encrypt data protected with the algorithms described in this document.\r\n\r\nAnd that's it for me, no other specification.",
          "createdAt": "2024-05-22T09:20:41Z",
          "updatedAt": "2024-05-22T09:20:41Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I created a PR in #113 that includes those two statements at hopefully the right places",
          "createdAt": "2024-05-22T11:02:36Z",
          "updatedAt": "2024-05-22T11:02:36Z"
        },
        {
          "author": "kaie",
          "authorAssociation": "NONE",
          "body": "Thank you for updating the spec with this recommendation.\r\n\r\nI'd like to give feedback that the following sentence wasn't immediately clear to me.\r\n\r\n> ```\r\n> Implementations MUST NOT use Symmetrically Encrypted Data packets (tag 9)\r\n> to encrypt data protected with the algorithms described in this document.\r\n> ```\r\n\r\nIt confused me to read that algorithms from this document shouldn't be used for encryption.\r\n\r\nThanks to @vanitasvitae for explaining it to me: Your sentence forbids the use with the old non-integrity protected package, thereby requiring something better (such as the packet with tag 18).\r\n\r\nYou could consider to slightly tweak the sentence to make it clearer that you want to require the use of newer, encryption packet formats.\r\nSorry for not pointing this out earlier.\r\n",
          "createdAt": "2024-05-27T15:47:03Z",
          "updatedAt": "2024-05-27T15:47:03Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I could propose \r\n> Implementations MUST NOT use the obsolete Symmetrically Encrypted Data packets (tag 9) to encrypt data protected with the algorithms described in this document.",
          "createdAt": "2024-05-27T17:34:32Z",
          "updatedAt": "2024-05-27T17:34:32Z"
        },
        {
          "author": "kaie",
          "authorAssociation": "NONE",
          "body": "I think adding the word \"obsolete\" as you propose would be very helpful!\r\n",
          "createdAt": "2024-05-27T21:26:58Z",
          "updatedAt": "2024-05-27T21:26:58Z"
        }
      ]
    },
    {
      "number": 101,
      "id": "I_kwDOIrmZ-86DWVb5",
      "title": "SLH-DSA-SHAKE-128 is NIST \"Category 1\", but ML-DSA-768 is NIST \"Category 3\"",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/101",
      "state": "CLOSED",
      "author": "dkg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Assuming #99 goes through, we'll be standardizing two levels of SLH-DSA: SLH-DSA-SHAKE-128s and SLH-DSA-SHAKE-128f, which FIPS 205 indicates is NIST \"category 1\", and SLH-DSA-SHAKE-256s, which FIPS 205 indicates is NIST \"Category 5\".\r\n\r\nBut the ML-DSA choices are ML-DSA-768 (NIST \"category 3\") and ML-DSA-1024 (NIST \"category 5\").\r\n\r\nSo it looks to me like the weaker/smaller/faster SLH-DSA signatures are weaker than the weaker/smaller-faster ML-DSA .  Is that intentional?  Am i misreading the FIPS specs?  are the NIST categories things we should be concerned about?",
      "createdAt": "2024-03-23T03:32:11Z",
      "updatedAt": "2024-05-28T04:02:19Z",
      "closedAt": "2024-05-28T04:01:26Z",
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Indeed, this is a mismatch based on the NIST security levels that we intentionally introduced from the beginning: While for SLH-DSA we introduce the 128 bit and 256 bit parameters (previously also the 192 bit), for ML-DSA and ML-KEM we introduce the 192 bit and 256 bit parameters.\r\n(Note that here you seem to confuse the ML-KEM parameters \"-512\", \"-768\", and \"-1024\" with the ML-DSA parameters \"-44\", \"-65\", an \"-87\".) \r\n\r\nThe idea here is (at least in my interpretation of this mismatch) to maintain a security margin for the module-lattice schemes. This is also reflected by pairing the 192 bit module lattice parameters with EC parameters with 128 bit security and the 256 bit module lattice parameters with EC parameters with a security of 192 (or 224) bit.",
          "createdAt": "2024-03-25T08:41:20Z",
          "updatedAt": "2024-03-25T08:41:20Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "@dkg Does my explanation make sense to you? Can we close this issue based on my response?",
          "createdAt": "2024-04-29T07:30:42Z",
          "updatedAt": "2024-04-29T07:30:42Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "@wussler presented a table at the 2024 May interim which i thought was compelling for the current choices of algorithm strengths.  As far as i'm concerned, we can close this issue.",
          "createdAt": "2024-05-27T14:54:22Z",
          "updatedAt": "2024-05-27T14:54:22Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "This is the current security bits PQ/curve matching. Note that the security bits are approximate.\r\n\r\nAlgorithm | Security bits PQ | Security bits curve\r\n-- | -- | --\r\nML-KEM-768 + X25519 | 192 | 128\r\nML-KEM-1024 + X448 | 256 | 224\r\nML-DSA-65 + Ed25519 | 192 | 128\r\nML-DSA-87 + Ed448 | 256 | 224\r\nSLH-DSA-SHAKE-128f | 128 | N/A\r\nSLH-DSA-SHAKE-128s | 128 | N/A\r\nSLH-DSA-SHAKE-256s | 256 | N/A\r\n\r\nIn the current proposal, a safety margin is included for the ML-* algorithms, that are matched with curves with less security bits. The speed tradeoff is minimal, and the size tradeoff is around 1KB per operation.",
          "createdAt": "2024-05-28T04:01:26Z",
          "updatedAt": "2024-05-28T04:02:19Z"
        }
      ]
    },
    {
      "number": 105,
      "id": "I_kwDOIrmZ-86DmJqq",
      "title": "Split off NIST/Brainpool composite draft",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/105",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "wussler"
      ],
      "labels": [
        "Version 03"
      ],
      "body": "When the split is made, the following updates are necessary as well:\r\n\r\n- remove the sentence \"Algorithms indicated as MAY are not assigned a codepoint in the current state of the draft since there are not enough private/experimental code points available to cover all newly introduced public-key algorithm identifiers.\"",
      "createdAt": "2024-03-26T10:12:32Z",
      "updatedAt": "2024-05-22T09:16:08Z",
      "closedAt": "2024-05-22T09:16:08Z",
      "comments": []
    },
    {
      "number": 106,
      "id": "I_kwDOIrmZ-86HNxl2",
      "title": "State that implicit preferred algorithm lists exist even when the corresponding subpacket is missing",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/106",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "TJ-91"
      ],
      "labels": [],
      "body": "Regarding the \"Preferred AEAD Ciphersuites\" subpacket and \"Preferred Symmetric Ciphers for v1 SEIPD\" subpacket, we need a clarification in Sec. \"8.1. Symmetric Algorithms for SEIPD Packets\". The crypto-refresh does not clearly state that the implicit lists of preferred algorithms are in force even when the respective subpacket is missing. We should clarify this at least in the PQC specification.",
      "createdAt": "2024-04-29T09:24:11Z",
      "updatedAt": "2024-07-15T14:42:31Z",
      "closedAt": "2024-07-15T14:38:41Z",
      "comments": [
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure how much this draft needs to fix this.  But at a maximum, what we need to say is \"a certificate with no AEAD Ciphersuite Preferences subpacket should be treated the same as an otherwise-identical certificate with an present-but-empty AEAD Ciphersuite Preferences subpacket\".  However, framed this way it does seem like this is something that belongs in the primary specification, and not as a clarification in the PQC draft.\r\n\r\nWhat other interpretation is possible, which a wayward implementer might actually consider?",
          "createdAt": "2024-05-16T20:41:02Z",
          "updatedAt": "2024-05-16T20:41:02Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "> \"a certificate with no AEAD Ciphersuite Preferences subpacket should be treated the same as an otherwise-identical certificate with an present-but-empty AEAD Ciphersuite Preferences subpacket\".\r\n\r\nThat's what I tried to do in #110 with the restriction to the PQ/T case and also including v1 SEIPD preferences.\r\nThat makes it 60% longer than the quote if we skip the last optional sentence about not assuming v2 SEIPD features based on the subpacket.\r\n\r\n> What other interpretation is possible, which a wayward implementer might actually consider?\r\n\r\nThe only sane alternative would be to assume `AES-128` or `AES-256` for v1 SEIPD and `AES-128/OCB` for v2 SEIPD, I guess (currently we don't say `AES-256/OCB` is MTI).\r\nAll in all, it is only nitpicking and I am also not sure how much this draft needs to fix this. However, I'm always happy when a specification gives way to only exactly one interpretation (as it should be).\r\n\r\nPersonally, I'm also fine if we do not make the change.",
          "createdAt": "2024-05-17T11:16:08Z",
          "updatedAt": "2024-05-17T11:16:08Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "According to the discussion in #110 there is no consensus for a change based on my observation that is the subject of this issue. Thus I am closing it.",
          "createdAt": "2024-07-15T14:38:41Z",
          "updatedAt": "2024-07-15T14:38:41Z"
        }
      ]
    },
    {
      "number": 108,
      "id": "I_kwDOIrmZ-86HV-eb",
      "title": "Specify private key format for ML-* depending on final standard",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/108",
      "state": "OPEN",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "NIST final std."
      ],
      "body": "Based on what was announced, NIST' s final standard for the ML-KEM and ML-DSA will enable private keys in seed format. Currently, the draft only refers to the NIST standard for the private key format. Thus this needs more specification, and it might be relevant to specify in the draft:\r\n\r\n- what is the single (?) secret key format in the NIST standard, that the draft is referring to\r\n  - alternative option: that seed format is also possible for private keys (?)\r\n- that a private key in expanded format needs to be checked for consistency before usage\r\n",
      "createdAt": "2024-04-30T07:14:15Z",
      "updatedAt": "2024-04-30T07:14:16Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 115,
      "id": "I_kwDOIrmZ-86Jto99",
      "title": "Binding PQC encryption to V6",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/115",
      "state": "OPEN",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This issue tracks the following discussion on the mailing list: https://mailarchive.ietf.org/arch/msg/openpgp/a1D8Sivi1lk_22yBETE0QSqN8aU/",
      "createdAt": "2024-05-22T12:44:39Z",
      "updatedAt": "2024-05-28T04:03:26Z",
      "closedAt": null,
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue has been presented at the IETF interim meeting, and while some more points about interoperability and ease of v4-v6 migration were raised, no consensus was reached yet.",
          "createdAt": "2024-05-28T04:03:25Z",
          "updatedAt": "2024-05-28T04:03:25Z"
        }
      ]
    },
    {
      "number": 126,
      "id": "I_kwDOIrmZ-86OhKh6",
      "title": "Mention that no further hashing happens in EdDSA",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/126",
      "state": "OPEN",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We will need to refer to this section in the crypto-refresh: https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-13.html#name-eddsa\r\n\r\nIt specifies exactly how EdDSA is invoked.\r\n\r\n@wussler @TJ-91 ",
      "createdAt": "2024-07-04T15:00:18Z",
      "updatedAt": "2024-07-04T15:00:18Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 127,
      "id": "I_kwDOIrmZ-86OklL7",
      "title": "correction of KEM combiner KDF input order to achieve NIST compliance",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/127",
      "state": "OPEN",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The ordering of the KEM combiner inputs must be adjusted in the fashion of \r\n```\r\nSHA3-256(counter || ss1 || ss2 || <further-inputs>)\r\n```\r\n(see https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr2.pdf#page=22),\r\ni.e., after the counter first the shared-secrets must be fed and then any other inputs.\r\n\r\nThis issue was raised both in https://github.com/openpgp-pqc/draft-ehlen-openpgp-nist-bp-comp/issues/6 and https://github.com/lamps-wg/draft-composite-kem/issues/26.\r\n",
      "createdAt": "2024-07-05T06:47:39Z",
      "updatedAt": "2024-07-08T10:24:34Z",
      "closedAt": null,
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "My concrete proposal is to make the new combiner in this form:\r\n\r\n```\r\ndomSep = \"OpenPGPCompositeKDFv1\"\r\n\r\nKEK = SHA3-256(counter || ecdhKeyShare || mlkemKeyShare || ecdhCipherText ||\r\n ecdhPublicKey  || mlkemCipherText || mlkemPublicKey || domSep || len(domSep) \r\n || algID )\r\n```\r\nwith `len(domSep)` being a single octet.\r\n\r\nIn any case, the string must be uniquely parsable from the rear end for any conceivable future value of `domSep`, which is not the case in our current proposal.\r\n\r\n@wussler \r\n@TJ-91 ",
          "createdAt": "2024-07-05T06:53:58Z",
          "updatedAt": "2024-07-08T10:24:34Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it's good like this, at least I don't see any problem with it, or any benefit in a different ordering.\r\n\r\n> In any case, the string must be uniquely parsable from the rear end for any conceivable future value of domSep, which is not the case in our current proposal.\r\n\r\nWe should also note these facts in the security considerations. (1) this KDF has no possible collisions of inputs since it's uniquely parseble from the rear end (2) future versions of the KDF must also make sure of this.",
          "createdAt": "2024-07-05T07:21:30Z",
          "updatedAt": "2024-07-05T07:21:30Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I think our idea with the current construction in which the tail of the KDF input is\r\n```\r\nfixedInfo = algID || \"OpenPGPCompositeKDFv1\",\r\n```\r\nis that one can infer the length of the whole string from the end of the string \"...v1\". But that mechanism seems a bit brittle ~~(one would have to properly parse the encoded string from the rear)~~ [quite nonsensical comment, as we will never parse the string ...]. I would prefer to have an explicit length encoding. ~~But my above claim that it is not uniquely parsable from the rear is not fully justified in this view.~~ [No, I justified it now, see my comment after TJ-91's comment]",
          "createdAt": "2024-07-05T10:24:07Z",
          "updatedAt": "2024-07-08T10:17:25Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "> But my above claim that it is not uniquely parsable from the rear is not fully justified in this view.\r\n\r\nI did not check before, but you are right of course and `fixedInfo = algID || \"OpenPGPCompositeKDFv1\"` is fine. As long as any other version of the KDF that introduces a new `domSep` value ensures that the encoding of different values is suffix-free (i.e., the new version does not end with `\"OpenPGPCompositeKDFv1\"`)\r\n\r\n> But that mechanism seems a bit brittle (one would have to properly parse the encoded string from the rear). I would prefer to have an explicit length encoding. \r\n\r\nI agree with the length encoding for `domSep`. Using `domSep || len(domSep) || algID` is safe in my estimation, as long as a new KDF version does not change this structure at the end of the SHA3 input string and only changes the value of `domSep`. This means the new proposal is a bit more robust against unfortunate choices of future `domSep` values (however, the designer of the new KDF version would not likely choose a string that ends with `\"OpenPGPCompositeKDFv1\"`)\r\n\r\n---\r\n\r\nOne point that I just now thought of is the remote possibility of adding multi-byte algorithm identifiers (which was discussed as a possibility on several occasions). In that case the inputs can collide if the algorithm identifier comes last. Thus, it might be better to put `domSep || len(domSep)` last and then the new algorithms can unambiguously be used with a new KDF version. Or add a length byte for the algorithm identifier.",
          "createdAt": "2024-07-05T11:22:34Z",
          "updatedAt": "2024-07-05T11:22:34Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "The actual problem why I think the right encoded length should be appended is that the string is not necessarily prefix-free: currently we are using \"OpenPGPCompositeKDFv1\", but if someone came up with \"[X]OpenPGPCompositeKDFv1\", and \"[X]\" happens to represent a valid algorithm ID, there would be a problem.",
          "createdAt": "2024-07-08T10:18:50Z",
          "updatedAt": "2024-07-08T10:18:50Z"
        }
      ]
    },
    {
      "number": 132,
      "id": "I_kwDOIrmZ-86PEu2u",
      "title": "NIST compliance of KEM-combiner w.r.t. X25519/X448 KEM ",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/132",
      "state": "OPEN",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In https://github.com/openpgp-pqc/draft-ehlen-openpgp-nist-bp-comp/issues/10#issuecomment-2220090284 Quynh states that the current construction with a key derivation step in ECDH-KEM is not NIST compliant, which would equally affect the X25519/X448 KEM construction in this draft:\r\n\r\n> So, if we delete the step 3 in ECDH-KEM ( Set the output eccKeyShare to Hash(X || eccCipherText || eccPublicKey),  then Falko's suggested KDF is NIST-compliant.\r\n\r\n> If we keep the step 3, eccKeyShare is a pseudorandom key and if eccKeyShare takes the place of X in Falko's suggested KDF, the KDF is not NIST-compliant at this point, but the KMAC-KDF mentioned above is NIST-compliant.\r\n\r\n@QuynhDangNIST: can you provide the exact clause in the NIST standards that causes the incompliance? So far it seems to me that the using the output of ` Hash(X || eccCipherText || eccPublicKey)`  is equally fine to use as the ECC shared secret as input to the KEM combiner given by SHA3-256.\r\n\r\nIf the construction would really turn out to not being NIST compliant, we would have to change it in this draft as well.",
      "createdAt": "2024-07-10T10:36:55Z",
      "updatedAt": "2024-07-11T15:15:00Z",
      "closedAt": null,
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I just want to add that from my point of view, just as I proposed here in said [issue 10 of the NIST/Brainpool draft](https://github.com/openpgp-pqc/draft-ehlen-openpgp-nist-bp-comp/issues/10#issuecomment-2213190813) for the Weiherstrass-Curves, from my point of view the Hashing step in the X25519/X448 KEM can be dropped since we feed the public key and the ciphertext already to the key combiner KDF.",
          "createdAt": "2024-07-10T10:46:03Z",
          "updatedAt": "2024-07-10T10:47:06Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": "See Section 2 on page 2 of 56Cr2 here: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr2.pdf\n\nZ' = Z || T.  Z is a raw shared secret as specified in 56A,B&C, not a pseudorandom key.  A KDF specified in 56C is used to generate pseudorandom key(s) from Z or Z'.\n\nRight now, the KDFs in 56C are NIST-compliant only when H(counter || Z || FixedInfo) on page 14 has Z being a raw shared secret or Z' above. The situation where \"counter\" can be skipped was explained in my previous email.\n\nRegards,\nQuynh.\n\nFrom: Falko Strenzke ***@***.***>\nSent: Wednesday, July 10, 2024 6:37 AM\nTo: openpgp-pqc/draft-openpgp-pqc ***@***.***>\nCc: Dang, Quynh H. (Fed) ***@***.***>; Mention ***@***.***>\nSubject: [openpgp-pqc/draft-openpgp-pqc] NIST compliance of KEM-combiner w.r.t. X25519/X448 KEM (Issue #132)\n\n\nIn openpgp-pqc/draft-ehlen-openpgp-nist-bp-comp#10 (comment)<https://github.com/openpgp-pqc/draft-ehlen-openpgp-nist-bp-comp/issues/10#issuecomment-2220090284> Quynh states that the current construction with a key derivation step in ECDH-KEM is not NIST compliant, which would equally affect the X25519/X448 KEM construction in this draft:\n\nSo, if we delete the step 3 in ECDH-KEM ( Set the output eccKeyShare to Hash(X || eccCipherText || eccPublicKey), then Falko's suggested KDF is NIST-compliant.\n\nIf we keep the step 3, eccKeyShare is a pseudorandom key and if eccKeyShare takes the place of X in Falko's suggested KDF, the KDF is not NIST-compliant at this point, but the KMAC-KDF mentioned above is NIST-compliant.\n\n@QuynhDangNIST<https://github.com/QuynhDangNIST>: can you provide the exact clause in the NIST standards that causes the incompliance? So far it seems to me that the using the output of Hash(X || eccCipherText || eccPublicKey) is equally fine to use as the ECC shared secret as input to the KEM combiner given by SHA3-256.\n\nIf the construction would really turn out to not being NIST compliant, we would have to change it in this draft as well.\n\n-\nReply to this email directly, view it on GitHub<https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/132>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AFTFKRBYUTIQB4WBCW7DACLZLUFFXAVCNFSM6AAAAABKUTZYRKVHI2DSMVQWIX3LMV43ASLTON2WKOZSGQYDAMZYGIZTQMQ>.\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\n",
          "createdAt": "2024-07-10T10:49:56Z",
          "updatedAt": "2024-07-10T10:49:56Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> See Section 2 on page 2 of 56Cr2 here: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr2.pdf\r\n\r\n@QuynhDangNIST Ist the point that if we have the hashing step in the ECDH-KEM and in the key combiner, that then we effectively do something like `key = hash(hash(X || ...) || ... )`, i.e., that contrary to NIST.SP.800-56Cr2 we hash twice?",
          "createdAt": "2024-07-10T11:03:30Z",
          "updatedAt": "2024-07-10T11:03:30Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": "\n\nFrom: Falko Strenzke ***@***.***>\nSent: Wednesday, July 10, 2024 7:04 AM\nTo: openpgp-pqc/draft-openpgp-pqc ***@***.***>\nCc: Dang, Quynh H. (Fed) ***@***.***>; Mention ***@***.***>\nSubject: Re: [openpgp-pqc/draft-openpgp-pqc] NIST compliance of KEM-combiner w.r.t. X25519/X448 KEM (Issue #132)\n\n\nSee Section 2 on page 2 of 56Cr2 here: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr2.pdf\n\n@QuynhDangNIST<https://github.com/QuynhDangNIST> Ist the point that if we have the hashing step in the ECDH-KEM and in the key combiner, that then we effectively do something like key = hash(hash(X || ...) || ... ), i.e., that contrary to NIST.SP.800-56Cr2 we hash twice?\n\n[Dang, Quynh H. (Fed)] That is not compliant with 56C.  Check section 4. One-Step Key Derivation.  Look at step 6 on page 14. The SHA3-256 in your suggested KDF is H.\n\nQuynh.\n\n-\nReply to this email directly, view it on GitHub<https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/132#issuecomment-2220214824>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AFTFKRCBQZF2FZ7533CESXLZLUIJPAVCNFSM6AAAAABKUTZYRKVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDEMRQGIYTIOBSGQ>.\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\n",
          "createdAt": "2024-07-10T11:10:32Z",
          "updatedAt": "2024-07-10T11:10:32Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, to be more precise, what we currently do is \r\n\r\n```\r\nkey = hash( counter || hash(X || ...) || ... )\r\n```\r\nBut still my question is what exactly is causing the non-conformance in your view. The only deviation from 56C that I can identify is that instead of feeding `X` directly to the outer hash function we feed `hash(X || ...)`. Is that reason for the incompliance that you were speaking of?",
          "createdAt": "2024-07-10T11:25:58Z",
          "updatedAt": "2024-07-10T11:25:58Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "@QuynhDangNIST And a further question: will this incompliance also be given when the ECDH scheme is X25519 or X448?",
          "createdAt": "2024-07-10T11:28:34Z",
          "updatedAt": "2024-07-10T11:28:34Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": "I don't understand what part of the things I have written today is not clear to you.\n\nI am not talking about security.  I have been talking about what KDFs are NIST-compliant and what are not.\n\nQuynh.\n\nFrom: Falko Strenzke ***@***.***>\nSent: Wednesday, July 10, 2024 7:26 AM\nTo: openpgp-pqc/draft-openpgp-pqc ***@***.***>\nCc: Dang, Quynh H. (Fed) ***@***.***>; Mention ***@***.***>\nSubject: Re: [openpgp-pqc/draft-openpgp-pqc] NIST compliance of KEM-combiner w.r.t. X25519/X448 KEM (Issue #132)\n\n\nOK, to be more precise, what we currently do is\n\nkey = hash( counter || hash(X || ...) || ... )\n\nBut still my question is what exactly is causing the non-conformance in your view. The only deviation from 56C that I can identify is that instead of feeding X directly to the outer hash function we feed hash(X || ...). Is that reason for the incompliance that you were speaking of?\n\n-\nReply to this email directly, view it on GitHub<https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/132#issuecomment-2220265756>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AFTFKRBQZTA67KPOKRVDQR3ZLUK5VAVCNFSM6AAAAABKUTZYRKVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDEMRQGI3DKNZVGY>.\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\n",
          "createdAt": "2024-07-10T11:30:00Z",
          "updatedAt": "2024-07-10T11:30:00Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": "Hi Falko,\n\nI don't know for sure what specific KDF this question ***@***.*** And a further question: will this incompliance also be given when the ECDH scheme is X25519 or X448? \" was for.\n\nIn the past, NIST said that NIST planned to allow X25519 and/or X448 for ECDH. But at this moment, they are not the options in 56A.\n\nI can talk to my group to see whether that is still in the plan. Especially, when we want people to use PQ crypto.\n\nRegards,\nQuynh.\n\n\n\nFrom: Falko Strenzke ***@***.***>\nSent: Wednesday, July 10, 2024 7:29 AM\nTo: openpgp-pqc/draft-openpgp-pqc ***@***.***>\nCc: Dang, Quynh H. (Fed) ***@***.***>; Mention ***@***.***>\nSubject: Re: [openpgp-pqc/draft-openpgp-pqc] NIST compliance of KEM-combiner w.r.t. X25519/X448 KEM (Issue #132)\n\n\n@QuynhDangNIST<https://github.com/QuynhDangNIST> And a further question: will this incompliance also be given when the ECDH scheme is X25519 or X448?\n\n-\nReply to this email directly, view it on GitHub<https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/132#issuecomment-2220271482>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AFTFKRBKE7IOEXFFXC3443DZLULHPAVCNFSM6AAAAABKUTZYRKVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDEMRQGI3TCNBYGI>.\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\n",
          "createdAt": "2024-07-10T11:37:21Z",
          "updatedAt": "2024-07-10T11:37:21Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> I can talk to my group to see whether that is still in the plan. Especially, when we want people to use PQ crypto.\r\n\r\nMaybe that can wait until we decided which way we prefer. If we remove the incompliance anyway, this would be better in my view.",
          "createdAt": "2024-07-10T12:22:38Z",
          "updatedAt": "2024-07-10T12:22:38Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Here is my summary to the problem as I understand it:\r\n\r\nIn [NIST.SP.800-56Cr2](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr2.pdf#page=10), page 2 it says\r\n\r\n> derive keying material from a shared secret Z generated during the execution of a key-establishment scheme specified in ...\r\n\r\nSo the shared secret that is input to the key derivation of the key combiner will have to be\r\n\r\n    Z\u2032 = Z || T,\r\n\r\nwhere `Z` is the raw shared secret from the ECDH scheme and `T` in our case is the ML-KEM key share. Then the SHA3-based construction that we are specifying for the key combiner becomes:\r\n\r\n    SHA3-256(counter || Z || T || <other input>),\r\n\r\nwhere `<other input>` is the public keys, ciphertexts, domain separation string, and algorithm ID. This is how it should be done according to SP.800-56C.\r\n\r\nNow the problem that causes the non-compliance apparently is that in our current specification, we don't input `Z` as shown above, but instead `hash(Z ||  ecdhCipherText || ecdhPublicKey)`. This additional hashing step is a formal deviation from the NIST spec.\r\n\r\nThe NIST-compliance is definitely relevant to the draft for the NIST/Brainpool curves. But since X25519/X448 is considered by NIST to receive NIST compliance as well, it has a certain relevance to the main draft as well.\r\n\r\nThe solution would be omitting the hashing step from the ECDH specification. Then we input the raw shared secret from the ECDH scheme into the key combiner as required by NIST. I don't think there can be any drawback, as the ECDH public key and ciphertext are still input as part of `<other input>` above.\r\n\r\nThe alternative that Quynh pointed out is to keep using KMAC. The formal difference seems to stem from the fact that in [NIST.SP.800-108r1](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-108r1-upd1.pdf#page=10) it says that the input keys may stem from  \"[...] or a previous instance of key derivation as specified in this Recommendation\" (p. 2) and thus allows to use KMAC with `hash(Z || ...) || T` as the input. That this does not equally apply to SHA3 is simply due to SP.800-108r1 not specifying SHA3 as a KDF at all.\r\n",
          "createdAt": "2024-07-10T12:27:50Z",
          "updatedAt": "2024-07-10T12:27:50Z"
        },
        {
          "author": "QuynhDangNIST",
          "authorAssociation": "NONE",
          "body": "Hi Falko,\n\nFrom: Falko Strenzke ***@***.***>\nSent: Wednesday, July 10, 2024 8:28 AM\nTo: openpgp-pqc/draft-openpgp-pqc ***@***.***>\nCc: Dang, Quynh H. (Fed) ***@***.***>; Mention ***@***.***>\nSubject: Re: [openpgp-pqc/draft-openpgp-pqc] NIST compliance of KEM-combiner w.r.t. X25519/X448 KEM (Issue #132)\n\n\nHere is my summary to the problem as I understand it:\n\nIn NIST.SP.800-56Cr2<https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr2.pdf#page=10>, page 2 it says\n\nderive keying material from a shared secret Z generated during the execution of a key-establishment scheme specified in ...\n\nSo the shared secret that is input to the key derivation of the key combiner will have to be\n\nZ\u2032 = Z || T,\n\nwhere Z is the raw shared secret from the ECDH scheme and T in our case is the ML-KEM key share. Then the SHA3-based construction that we are specifying for the key combiner becomes:\n\nSHA3-256(counter || Z || T || <other input>),\n\nwhere <other input> is the public keys, ciphertexts, domain separation string, and algorithm ID. This is how it should be done according to SP.800-56C.\n\nNow the problem that causes the non-compliance apparently is that in our current specification, we don't input Z as shown above, but instead hash(Z || ecdhCipherText || ecdhPublicKey). This additional hashing step is a formal deviation from the NIST spec.\n\n[Dang, Quynh H. (Fed)] Correct. Z here is the result of the step 3 on page 49 of 56Ar3 at https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar3.pdf\n\nThe NIST-compliance is definitely relevant to the draft for the NIST/Brainpool curves. But since X25519/X448 is considered by NIST to receive NIST compliance as well, it has a certain relevance to the main draft as well.\n\nThe solution would be omitting the hashing step from the ECDH specification. Then we input the raw shared secret from the ECDH scheme into the key combiner as required by NIST. I don't think there can be any drawback, as the ECDH public key and ciphertext are still input as part of <other input> above.\n\nThe alternative that Quynh pointed out is to keep using KMAC. The formal difference seems to stem from the fact that in NIST.SP.800-108r1<https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-108r1-upd1.pdf#page=10> it says that the input keys may stem from \"[...] or a previous instance of key derivation as specified in this Recommendation\" (p. 2) and thus allows to use KMAC with hash(Z || ...) || T as the input. That this does not equally apply to SHA3 is simply due to SP.800-108r1 not specifying SHA3 as a KDF at all.\n\n[Dang, Quynh H. (Fed)] perfect recap! KMAC with hash(Z || ...) || T being the Key Derivation Key in 108.\n\nRegards,\n\nQuynh.\n\n-\nReply to this email directly, view it on GitHub<https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/132#issuecomment-2220386567>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AFTFKRASDNVDHIVN7Y4LWTDZLUSFZAVCNFSM6AAAAABKUTZYRKVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDEMRQGM4DMNJWG4>.\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\n",
          "createdAt": "2024-07-10T13:15:28Z",
          "updatedAt": "2024-07-10T13:15:28Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "There is one risk that I see for the solution using\r\n```\r\nSHA3-256(counter || <raw EC coord.> || <ML-KEM ss> || <other input>).\r\n```\r\nWe agree that this will result in a NIST compliant ECDH scheme with an additional key mixed in.\r\n    But I currently don't see the guarantee that this will also necessarily fulfill the future requirements by NIST for an ECDH+ML-KEM hybrid scheme. This is something that we will most likely only know once NIST's recommendations for PQ/T hybrid is specified. The other solution, namely switching back to KMAC does not have this problem, since with KMAC we receive a generic KDF according to NIST.SP.800-108r1. Thus in this case there is no limitation on where the input secrets to the KMAC-based KDF stem from.\r\n",
          "createdAt": "2024-07-11T14:03:07Z",
          "updatedAt": "2024-07-11T14:03:07Z"
        },
        {
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dear all, Falko asked me to provide a comment on this.\r\n\r\nI would like to highlight two aspects here. First, our goal is to build a \"KEM-combiner\", i.e., something that constructs a secure KEM from two KEMs. The initial hash of the ECDH data achieves exactly this: It turns DH into a KEM. This way, we are able to apply modular reasoning which also protects against issues stemming from replacing ECDH by some other construction. \r\n\r\nSecond, our set goal is really to construct an IND-CCA secure KEM. This is a mismatch with https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar3.pdf  which describes how to derive a secret key from some source of computational entropy (like a pre-master secret) where one such source is obtained via DH. Note that while the SP this does not explicitly state any security goals (at least I did not find any), the way it is written suggests that active security is not a concern here. \r\n\r\nRegarding what we know in terms of results: We have a security proof for a KEM that is obtained by combining the data of two KEMs as is currently done in the draft (KDF(k1,c1,pk1,k2,c2,pk2) where the order does not matter if we use SHA3/SHAKE/KMAC-SHA3). This proof is in the standard model and thereby holds against quantum adversaries as well. I do not know what we can prove for the \"simply hashing everything in the end\" approach (KDF(DH.k, k2, DH.pk_sender, DH.pk_receiver, c2, pk2)). This will require a direct, non-modular proof for the full construction. Does NIST have any results for this? I did not see references in the SP.\r\n\r\nBest wishes,\r\n\r\nAndreas\r\n  ",
          "createdAt": "2024-07-11T15:14:58Z",
          "updatedAt": "2024-07-11T15:14:58Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOIrmZ-85GP0Mh",
      "title": "Change KDF domain separation to be > 32 chars",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/1",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "wussler"
      ],
      "labels": [],
      "body": "NIST.SP.800-185-2 specifies:\r\n> Applications of this Recommendation shall not select an input key, K, whose length is less than their required security strength. Guidance for cryptographic algorithm and key-size selection is available in [4].\r\n\r\nI would raise the length of our domain separation string to > 32 chars for conformance with the specification. Also many implementations implement this strictly, so this ensures easy reuse of existing implementations.\r\n\r\nFurthermore I'd drop the `V5` from the string. I don't think we want to customize the string based on the PKESK version (we also don't for ECDH, that can be used across v4 and v5)",
      "createdAt": "2022-12-27T13:29:47Z",
      "updatedAt": "2023-01-03T14:40:26Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "86a898b9289ecbd8951db4b4ee6a168d00f8e495",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "kdf-dom-separation",
      "headRefOid": "82e2550b723cd2bb0132362f1ad799a5095560da",
      "closedAt": "2023-01-03T11:28:26Z",
      "mergedAt": "2023-01-03T11:28:25Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "95dedf7ee6bbb455e874381ef7d7fc79019041cf"
      },
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure I understand. It is the KMAC *key* that needs to have a sufficient length. The domain seperation just needs to be unique.",
          "createdAt": "2023-01-02T15:46:18Z",
          "updatedAt": "2023-01-02T15:46:18Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "As far as I understand we're effectively using `domSeparation` as a KMAC key",
          "createdAt": "2023-01-02T15:48:15Z",
          "updatedAt": "2023-01-02T15:48:15Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I see, it really seems to be an sublte inconsistency between the NIST specification of the one step key deriviation based on KMAC and this restriction of KMAC regarding the key length. So I think your suggestion is the correct solution.",
          "createdAt": "2023-01-03T11:25:58Z",
          "updatedAt": "2023-01-03T11:25:58Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "We can extend the length of the domain seperation string, but I wouldn't put \"Kyber\" in there for two reasons:\r\n\r\na) The name \"Kyber\" will eventually turn into \"MLWE\". I suggest to keep the amount of necessary code changes when we align to the forthcoming NIST standards as small as possible. This is somehow an analoguous argument as to not include version information.\r\n\r\nb) The composite KDF does not care if it is feeded with ECC, Kyber or something else. Therefore I suggest to keep the domain seperation generic. e.g. if the CFRG decides to standardize NTRU in the future, the KDF will receive maybe an ECC || NTRU value.\r\n\r\nI would suggest, instead of putting \"OpenPGPKyberCompositeKeyDerivation\" we should do something like \"OpenPGPCompositeKeyDerivationFunction\".",
          "createdAt": "2023-01-03T13:03:25Z",
          "updatedAt": "2023-01-03T14:38:51Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "So @fluppe2 you would keep the same hash for Kyber or other algorithms?\r\n\r\nI am happy with the proposal `OpenPGPCompositeKeyDerivationFunction`",
          "createdAt": "2023-01-03T13:06:50Z",
          "updatedAt": "2023-01-03T13:06:50Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "@wussler : Yes, I would prefer the domain separation to specify a generic composer, so that potential future PQC-extensions for OpenPGP could adopt this. The fixedInfo field contains the specific algorithm information anyway.",
          "createdAt": "2023-01-03T14:38:26Z",
          "updatedAt": "2023-01-03T14:38:26Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> @wussler : Yes, I would prefer the domain separation to specify a generic composer, so that potential future PQC-extensions for OpenPGP could adopt this. The fixedInfo field contains the specific algorithm information anyway.\r\n\r\nMakes sense, is fine for me, too",
          "createdAt": "2023-01-03T14:40:26Z",
          "updatedAt": "2023-01-03T14:40:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85Jk6_R",
          "commit": {
            "abbreviatedOid": "82e2550"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-03T11:26:51Z",
          "updatedAt": "2023-01-03T11:26:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOIrmZ-85GQ9Sh",
      "title": "Fix typo with ECDSA/EdDSA",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/4",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "wussler"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-27T20:33:28Z",
      "updatedAt": "2023-02-24T07:21:02Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "86a898b9289ecbd8951db4b4ee6a168d00f8e495",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "ecdsa-typo",
      "headRefOid": "91768d4b0327a9c7c8932fd03bf42e6bf1a3227e",
      "closedAt": "2023-01-04T10:47:31Z",
      "mergedAt": "2023-01-04T10:47:30Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "96772432da2cf6690acc8c05bcd9da9cc8086864"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85JpPYJ",
          "commit": {
            "abbreviatedOid": "91768d4"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-04T09:06:16Z",
          "updatedAt": "2023-01-04T09:06:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85JpwAB",
          "commit": {
            "abbreviatedOid": "91768d4"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-04T10:44:11Z",
          "updatedAt": "2023-01-04T10:44:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOIrmZ-85Ge7-R",
      "title": "Add parameter IDs condition for SPHINCS+",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/5",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "wussler"
      ],
      "labels": [],
      "body": "When issuing or verifying SPHINCS+ signature, it is not specified how to handle parameter IDs",
      "createdAt": "2023-01-02T11:18:09Z",
      "updatedAt": "2023-02-24T07:21:00Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "86a898b9289ecbd8951db4b4ee6a168d00f8e495",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "spx-verification",
      "headRefOid": "94cd221c90b2de8124a59bbe3d6ec621fb65bf0f",
      "closedAt": "2023-01-04T10:47:19Z",
      "mergedAt": "2023-01-04T10:47:19Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "72ef73d3c91a74648812fe8a8e25ce1019389fbb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85JpPQG",
          "commit": {
            "abbreviatedOid": "94cd221"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-04T09:05:51Z",
          "updatedAt": "2023-01-04T09:05:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85Jpwb1",
          "commit": {
            "abbreviatedOid": "94cd221"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-04T10:45:36Z",
          "updatedAt": "2023-01-04T10:45:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOIrmZ-85GjDQw",
      "title": "Changed value of 'domSeparation' to the UTF-8 encoding of 'OpenPGPCom\u2026",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/7",
      "state": "MERGED",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026positeKeyDerivationFunction'",
      "createdAt": "2023-01-03T15:07:59Z",
      "updatedAt": "2023-02-24T07:20:08Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "95dedf7ee6bbb455e874381ef7d7fc79019041cf",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "kdf-dom-separation",
      "headRefOid": "05760b9ffe1c0be8bd355c0a0f6505c1cb7a7078",
      "closedAt": "2023-01-03T15:20:03Z",
      "mergedAt": "2023-01-03T15:20:03Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "67352990f097e4af146bfc922b83f1d1827162db"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85Jl_5V",
          "commit": {
            "abbreviatedOid": "05760b9"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-03T15:14:31Z",
          "updatedAt": "2023-01-03T15:14:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85JmBzv",
          "commit": {
            "abbreviatedOid": "05760b9"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-03T15:19:57Z",
          "updatedAt": "2023-01-03T15:19:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOIrmZ-85GjIQX",
      "title": "Change sentence for SHA3 support requirement",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/8",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Address part of issue #6 ",
      "createdAt": "2023-01-03T15:23:13Z",
      "updatedAt": "2023-02-24T07:20:55Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "67352990f097e4af146bfc922b83f1d1827162db",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "sha3-must",
      "headRefOid": "d06f460fcd6ad207068126e1f908c381941d5896",
      "closedAt": "2023-01-04T10:36:33Z",
      "mergedAt": "2023-01-04T10:36:33Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "f6571482ae72fff59558bd1ea10ec7585378d95a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85Joq88",
          "commit": {
            "abbreviatedOid": "d06f460"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-04T06:31:41Z",
          "updatedAt": "2023-01-04T06:31:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85JpO8o",
          "commit": {
            "abbreviatedOid": "d06f460"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-04T09:04:52Z",
          "updatedAt": "2023-01-04T09:04:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 9,
      "id": "PR_kwDOIrmZ-85GmP56",
      "title": "New year review falko",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/9",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Most changes were previously discussed in https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/6. The respective comments are indicated by crossed out text in the issue.",
      "createdAt": "2023-01-04T07:16:33Z",
      "updatedAt": "2023-02-24T07:20:54Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "67352990f097e4af146bfc922b83f1d1827162db",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "new-year-review-falko",
      "headRefOid": "457b24636aad788bcae751eb4585a56bedcc111f",
      "closedAt": "2023-01-09T13:06:25Z",
      "mergedAt": "2023-01-09T13:06:25Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "a203efa37326fcb3e9d4968d2645750ce8321adc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85JpQCw",
          "commit": {
            "abbreviatedOid": "2c9b175"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-04T09:08:17Z",
          "updatedAt": "2023-01-04T09:08:17Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I think the 'a' is not necessary here, because the capacity is a definite value. But I might be mistaken.",
              "createdAt": "2023-01-04T09:08:17Z",
              "updatedAt": "2023-01-04T09:09:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85Jpcyt",
          "commit": {
            "abbreviatedOid": "1a3090c"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-04T09:44:15Z",
          "updatedAt": "2023-01-04T09:52:16Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I think the part about previous specs is not necessary here, as it is already said in \u00a71.3.1. The formulations here should be brief. I liked the old sentence better.",
              "createdAt": "2023-01-04T09:44:16Z",
              "updatedAt": "2023-01-04T09:52:16Z"
            },
            {
              "originalPosition": 19,
              "body": "Now the list seems to go from 1 then 3,4,5. Is the 2 missing?",
              "createdAt": "2023-01-04T09:44:50Z",
              "updatedAt": "2023-01-04T09:52:16Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n 1. Generate an ephemeral key pair {`v`, `V=vG`} according to\r\n    the procedure defined in [RFC7748], that is, without any\r\n    measures such as masking or clamping\r\n```",
              "createdAt": "2023-01-04T09:49:23Z",
              "updatedAt": "2023-01-04T09:52:16Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n 4. Encode the EdDSA and Dilithium signatures according to the packet\r\n    structure given in {{ecc-dilithium-sig-packet}}.\r\n```",
              "createdAt": "2023-01-04T09:50:11Z",
              "updatedAt": "2023-01-04T09:52:16Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\n 4. Encode the ECDSA and Dilithium signatures according to the packet\r\n    structure given in {{ecc-dilithium-sig-packet}}.\r\n```",
              "createdAt": "2023-01-04T09:50:37Z",
              "updatedAt": "2023-01-04T09:52:16Z"
            },
            {
              "originalPosition": 78,
              "body": "```suggestion\r\nIn order not to extend the attack surface, we bind the hash algorithm used for\r\nmessage digestion to the hash algorithm used internally by the signature\r\nalgorithm. Dilithium internally uses a SHAKE256 digest, therefore we require\r\nSHA3 in the Dilithium + ECC signature packet. In the case of SPHINCS+ the\r\ninternal hash algorithm varies based on the algorithm and parameter ID.\r\n```",
              "createdAt": "2023-01-04T09:51:32Z",
              "updatedAt": "2023-01-04T09:52:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85JpwEc",
          "commit": {
            "abbreviatedOid": "1b67336"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-04T10:44:26Z",
          "updatedAt": "2023-01-04T10:45:18Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Probably it's better to remove the reference to older OpenPGP specs, but i like the sentence either way",
              "createdAt": "2023-01-04T10:44:26Z",
              "updatedAt": "2023-01-04T10:45:18Z"
            },
            {
              "originalPosition": 28,
              "body": "Also to me it \"sounds better\" with the `a` but I see Stavros' point",
              "createdAt": "2023-01-04T10:45:06Z",
              "updatedAt": "2023-01-04T10:45:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85Jpwm0",
          "commit": {
            "abbreviatedOid": "2c9b175"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-04T10:46:11Z",
          "updatedAt": "2023-01-04T10:46:11Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "FYI this does not matter with markdown, but I agree it's nice to keep tidy",
              "createdAt": "2023-01-04T10:46:11Z",
              "updatedAt": "2023-01-04T10:46:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85JpxdC",
          "commit": {
            "abbreviatedOid": "2c9b175"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-04T10:49:01Z",
          "updatedAt": "2023-01-04T10:49:01Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nMore precisely, for given capacity `c` the indifferentiability proof shows that\r\n```\r\nI don't know english grammar well enough to be sure but also I don't mind too much. Maybe we get a review from an english native speaker at some point.",
              "createdAt": "2023-01-04T10:49:01Z",
              "updatedAt": "2023-01-04T10:49:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85J4v2C",
          "commit": {
            "abbreviatedOid": "2c9b175"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-07T06:34:41Z",
          "updatedAt": "2023-01-07T06:34:41Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "For me introducing an 'a' is fine.",
              "createdAt": "2023-01-07T06:34:41Z",
              "updatedAt": "2023-01-07T06:34:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85J4v4K",
          "commit": {
            "abbreviatedOid": "457b246"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-07T06:36:46Z",
          "updatedAt": "2023-01-07T06:36:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85J6YF_",
          "commit": {
            "abbreviatedOid": "457b246"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-09T07:42:42Z",
          "updatedAt": "2023-01-09T07:42:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOIrmZ-85G7EDW",
      "title": "Update Key Share size for Kyber",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/11",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As defined in section 1.4 of the spec, Kyber.CCAKEM outputs a `sha-256`, therefore it's always 32 octets long",
      "createdAt": "2023-01-08T16:42:37Z",
      "updatedAt": "2023-02-02T00:32:52Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "96772432da2cf6690acc8c05bcd9da9cc8086864",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "kyber-key-share",
      "headRefOid": "b5cd6743756fbeaf9a0f71b0c2f4af0aabd3fb7f",
      "closedAt": "2023-02-02T00:32:37Z",
      "mergedAt": "2023-02-02T00:32:37Z",
      "mergedBy": "fluppe2",
      "mergeCommit": {
        "oid": "bc6485c195102028c7c08ef59f3ccd60a14b69c3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85J6QOL",
          "commit": {
            "abbreviatedOid": "b5cd674"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-09T07:03:43Z",
          "updatedAt": "2023-01-09T07:03:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85KUdPO",
          "commit": {
            "abbreviatedOid": "b5cd674"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-13T04:03:28Z",
          "updatedAt": "2023-01-13T04:03:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85MFZZ8",
          "commit": {
            "abbreviatedOid": "b5cd674"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-31T05:02:47Z",
          "updatedAt": "2023-01-31T05:02:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDOIrmZ-85IjYjd",
      "title": "Add key generation procedures",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/19",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR addresses #3 ",
      "createdAt": "2023-01-25T23:24:02Z",
      "updatedAt": "2023-02-24T07:20:04Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "a11926eeb5102517ee9623d7d7e7895347294877",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "generation-procedure",
      "headRefOid": "a9a8f811721eab5c2596a0ce45f3c217403534f8",
      "closedAt": "2023-02-24T06:41:39Z",
      "mergedAt": "2023-02-24T06:41:39Z",
      "mergedBy": "fluppe2",
      "mergeCommit": {
        "oid": "6e0242aafccdb031430b348273ab72412d25a193"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85L_55j",
          "commit": {
            "abbreviatedOid": "9afd2d9"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-30T12:12:41Z",
          "updatedAt": "2023-01-30T12:12:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85MFYcl",
          "commit": {
            "abbreviatedOid": "9afd2d9"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T04:56:19Z",
          "updatedAt": "2023-01-31T04:56:19Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nThe SPHINCS+ key generation is performed according to the function `spx_keygen()` specified in\r\n```",
              "createdAt": "2023-01-31T04:56:19Z",
              "updatedAt": "2023-01-31T04:56:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MFYkJ",
          "commit": {
            "abbreviatedOid": "9afd2d9"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T04:57:09Z",
          "updatedAt": "2023-01-31T04:57:09Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "There was something missing like \"the function is used\" in the previous sentence.",
              "createdAt": "2023-01-31T04:57:09Z",
              "updatedAt": "2023-01-31T04:57:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MFZDj",
          "commit": {
            "abbreviatedOid": "9afd2d9"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T05:00:31Z",
          "updatedAt": "2023-01-31T05:00:31Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\ncomponent keys. Dilithium key generation follows the specification in\r\n```",
              "createdAt": "2023-01-31T05:00:31Z",
              "updatedAt": "2023-01-31T05:00:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MFZIk",
          "commit": {
            "abbreviatedOid": "9afd2d9"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T05:01:00Z",
          "updatedAt": "2023-01-31T05:01:01Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Aligned to the text for Kyber, fixed typo.",
              "createdAt": "2023-01-31T05:01:01Z",
              "updatedAt": "2023-01-31T05:01:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MFZQ6",
          "commit": {
            "abbreviatedOid": "9afd2d9"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Apart from the suggestions great for me.",
          "createdAt": "2023-01-31T05:01:55Z",
          "updatedAt": "2023-01-31T05:01:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85OPIYt",
          "commit": {
            "abbreviatedOid": "a9a8f81"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-24T06:41:32Z",
          "updatedAt": "2023-02-24T06:41:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOIrmZ-85IjZ8B",
      "title": "Add some guidance to prevent parallel encryption",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/20",
      "state": "CLOSED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "wussler"
      ],
      "labels": [
        "postponed"
      ],
      "body": "Addresses #2 ",
      "createdAt": "2023-01-25T23:33:19Z",
      "updatedAt": "2024-07-04T13:58:48Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "34e4cede25785c1db8ec5787ad1c8b901671d936",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "avoid-double-encryption",
      "headRefOid": "af41b93306dfadca4e3ca5666d3f29782c8a9da8",
      "closedAt": "2024-07-04T13:58:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems like [!222](https://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/222) is not getting into the C-R. I would therefore propose to add it to this document and in this PR \r\n\r\nWDYT @falko-strenzke, @fluppe2, and @TJ-91?",
          "createdAt": "2023-02-23T12:39:38Z",
          "updatedAt": "2023-02-23T12:39:38Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps it's worth waiting for rechartering and see if it fits better somewhere else (but I'm not completely opposed). My thoughts:\r\n\r\na) while it's relevant for PQC, it's also relevant for OpenPGP in general.\r\nb) concentrating on strictly necessary features for PQC might improve the chances of success / reach consensus more easily.\r\n",
          "createdAt": "2023-02-23T14:04:24Z",
          "updatedAt": "2023-02-23T14:04:24Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "The [!222](https://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/222) feels more like a general feature request and I'm kind of opposed to blur the line between general stuff and the pqc extension that we are defining.",
          "createdAt": "2023-02-24T06:39:39Z",
          "updatedAt": "2023-02-24T06:39:39Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Sure, but then would it have to be a standalone RFC?",
          "createdAt": "2023-02-24T10:11:22Z",
          "updatedAt": "2023-02-24T10:11:22Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "I dunno, in my personal opinion that would depend on the general future structure of OpenPGP if it stays a monolithic block or some potential features can be and are discussed as extensions.",
          "createdAt": "2023-02-24T12:11:37Z",
          "updatedAt": "2023-02-24T12:11:37Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "I would also favour to restrict our draft to the PQC-specific features and thus not to address the extension from [!222](https://gitlab.com/openpgp-wg/rfc4880bis/-/merge_requests/222).",
          "createdAt": "2023-03-14T15:32:54Z",
          "updatedAt": "2023-03-14T15:32:54Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Good for me, I'll propose this in the rechartering as a standalone topic looking for a friend.",
          "createdAt": "2023-03-14T17:59:47Z",
          "updatedAt": "2023-03-14T17:59:47Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR is supposed to be discussed after adoption, to understand what kind of guidance (if any) is due here",
          "createdAt": "2023-09-11T13:17:48Z",
          "updatedAt": "2023-09-11T13:17:48Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Superseded by #120 ",
          "createdAt": "2024-07-04T13:58:48Z",
          "updatedAt": "2024-07-04T13:58:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85L_X2Q",
          "commit": {
            "abbreviatedOid": "af41b93"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-30T10:43:56Z",
          "updatedAt": "2023-01-30T10:45:47Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "This seems to refer to this proposal: https://gitlab.com/openpgp-wg/rfc4880bis/-/issues/64\r\n\r\nBut this is not yet part of the crypto-refresh. So I would prefer not to include it here until it becomes adapted into the cr-re",
              "createdAt": "2023-01-30T10:43:56Z",
              "updatedAt": "2023-01-30T10:45:47Z"
            },
            {
              "originalPosition": 7,
              "body": "How is this check to performed exactly? By comparing the user IDs of the keys?",
              "createdAt": "2023-01-30T10:44:52Z",
              "updatedAt": "2023-01-30T10:45:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85Wcy0H",
          "commit": {
            "abbreviatedOid": "af41b93"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Shall we close this PR then?",
          "createdAt": "2023-05-30T08:26:19Z",
          "updatedAt": "2023-05-30T08:26:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOIrmZ-85Iz5FE",
      "title": "new section 2 'preliminaries'",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/21",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR addresses issue #14",
      "createdAt": "2023-01-30T12:32:14Z",
      "updatedAt": "2023-02-24T07:20:53Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "a203efa37326fcb3e9d4968d2645750ce8321adc",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "issue_14_new_sec_prel",
      "headRefOid": "67be3e0a4cab46c32e03c1d77a8cb44c07096a73",
      "closedAt": "2023-02-24T06:37:29Z",
      "mergedAt": "2023-02-24T06:37:29Z",
      "mergedBy": "fluppe2",
      "mergeCommit": {
        "oid": "289abe858de2c4bd11833afa535d0562e4b3520c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85MFXUu",
          "commit": {
            "abbreviatedOid": "67be3e0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good for me.",
          "createdAt": "2023-01-31T04:48:40Z",
          "updatedAt": "2023-01-31T04:48:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85OJ08r",
          "commit": {
            "abbreviatedOid": "67be3e0"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-23T12:37:53Z",
          "updatedAt": "2023-02-23T12:37:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85OKUo0",
          "commit": {
            "abbreviatedOid": "67be3e0"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-23T13:38:53Z",
          "updatedAt": "2023-02-23T13:38:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 22,
      "id": "PR_kwDOIrmZ-85Iz8kY",
      "title": "rephrased definition of 'composite'",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/22",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR addresses issue #12.",
      "createdAt": "2023-01-30T12:41:12Z",
      "updatedAt": "2023-02-24T07:20:02Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "1b38dcf303adde301180d33aa9872b0d38eaf2fa",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "issue12_definition_composite",
      "headRefOid": "7e57fb705551e0e54341b0eede7284c036467d8a",
      "closedAt": "2023-02-23T12:37:37Z",
      "mergedAt": "2023-02-23T12:37:37Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "a11926eeb5102517ee9623d7d7e7895347294877"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85MFW1P",
          "commit": {
            "abbreviatedOid": "e872ac3"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T04:45:27Z",
          "updatedAt": "2023-01-31T04:45:27Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Is there a 'the' missing?, i.e. should it read 'from the protocol perspective'?",
              "createdAt": "2023-01-31T04:45:27Z",
              "updatedAt": "2023-01-31T04:45:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MGBlL",
          "commit": {
            "abbreviatedOid": "e872ac3"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T07:56:37Z",
          "updatedAt": "2023-01-31T07:56:37Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Indeed, added the missing 'the'.",
              "createdAt": "2023-01-31T07:56:37Z",
              "updatedAt": "2023-01-31T07:56:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MTJi4",
          "commit": {
            "abbreviatedOid": "2488f61"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-02T00:31:14Z",
          "updatedAt": "2023-02-02T00:31:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85MVuoV",
          "commit": {
            "abbreviatedOid": "2488f61"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-02T10:27:14Z",
          "updatedAt": "2023-02-02T10:27:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85OJzDK",
          "commit": {
            "abbreviatedOid": "2488f61"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-23T12:33:35Z",
          "updatedAt": "2023-02-23T12:33:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 25,
      "id": "PR_kwDOIrmZ-85I0f5a",
      "title": "minor additions in kem-combiner section",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/25",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Since we give an explicit description of the one-step key derivation in terms of KMAC, a reference to the defintion of KMAC is also necessary in my view.",
      "createdAt": "2023-01-30T14:20:07Z",
      "updatedAt": "2023-02-24T07:19:55Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "1b38dcf303adde301180d33aa9872b0d38eaf2fa",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "kem-combiner-review",
      "headRefOid": "0f00a5e2a24a06cdd0556c58479492545b6064f3",
      "closedAt": "2023-02-24T06:37:04Z",
      "mergedAt": "2023-02-24T06:37:04Z",
      "mergedBy": "fluppe2",
      "mergeCommit": {
        "oid": "e31d2de00141de45cec5bc54af6b28063f147367"
      },
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Rebased and resolved conflicts",
          "createdAt": "2023-02-23T12:31:33Z",
          "updatedAt": "2023-02-23T12:31:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85MFUlq",
          "commit": {
            "abbreviatedOid": "b75fca8"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T04:29:08Z",
          "updatedAt": "2023-01-31T04:29:08Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n    target: https://doi.org/10.6028/NIST.SP.800-185\r\n```",
              "createdAt": "2023-01-31T04:29:08Z",
              "updatedAt": "2023-01-31T04:29:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MFUty",
          "commit": {
            "abbreviatedOid": "b75fca8"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T04:30:05Z",
          "updatedAt": "2023-01-31T04:30:06Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n    title: SHA-3 Derived Functions: cSHAKE, KMAC, TupleHash, and ParallelHash\r\n```",
              "createdAt": "2023-01-31T04:30:05Z",
              "updatedAt": "2023-01-31T04:30:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MFVEr",
          "commit": {
            "abbreviatedOid": "b75fca8"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T04:32:53Z",
          "updatedAt": "2023-01-31T04:32:54Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n{{NIST-SP800-56C}} Section 4, based on KMAC256\r\n```",
              "createdAt": "2023-01-31T04:32:53Z",
              "updatedAt": "2023-01-31T04:32:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MFVQP",
          "commit": {
            "abbreviatedOid": "b75fca8"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T04:34:14Z",
          "updatedAt": "2023-01-31T04:34:14Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "The DOI is a much more future-proof target.",
              "createdAt": "2023-01-31T04:34:14Z",
              "updatedAt": "2023-01-31T04:34:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MFVZv",
          "commit": {
            "abbreviatedOid": "b75fca8"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T04:35:18Z",
          "updatedAt": "2023-01-31T04:35:18Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Aligned to the other NIST citations (without repeating \"NIST Special...\") we have, and aligned to the original title.",
              "createdAt": "2023-01-31T04:35:18Z",
              "updatedAt": "2023-01-31T04:35:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MFVjA",
          "commit": {
            "abbreviatedOid": "b75fca8"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T04:36:21Z",
          "updatedAt": "2023-01-31T04:36:21Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Smoothed text a little and inserted a comma for easier reading.",
              "createdAt": "2023-01-31T04:36:21Z",
              "updatedAt": "2023-01-31T04:36:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MFV4F",
          "commit": {
            "abbreviatedOid": "b75fca8"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Agreed that a reference to KMAC256 is helpful. Added some suggestions.",
          "createdAt": "2023-01-31T04:38:40Z",
          "updatedAt": "2023-01-31T04:39:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85MGDvd",
          "commit": {
            "abbreviatedOid": "b75fca8"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T08:03:38Z",
          "updatedAt": "2023-01-31T08:03:38Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "\"NIST Special Publication 800-185\" is the essential part of the title, without it the reference is formally not complete (and be just guessed via our label, which is not sufficient and overly lengthy due to holding the whole string, I would say) omitting it is in my opinion out of the question. I make a different proposal though, following how the crypto-refresh handles this.",
              "createdAt": "2023-01-31T08:03:38Z",
              "updatedAt": "2023-01-31T08:03:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MGLPf",
          "commit": {
            "abbreviatedOid": "b75fca8"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T08:26:21Z",
          "updatedAt": "2023-01-31T08:26:21Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Ok, I'm fine with this. Then we should also align the other reference to NIST SP 800 56C, so that it is homogeneous.",
              "createdAt": "2023-01-31T08:26:21Z",
              "updatedAt": "2023-01-31T08:26:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MTLuN",
          "commit": {
            "abbreviatedOid": "b75fca8"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-02T00:36:20Z",
          "updatedAt": "2023-02-02T00:36:20Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "I think this still has to be addressed.",
              "createdAt": "2023-02-02T00:36:20Z",
              "updatedAt": "2023-02-02T00:36:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MUjlL",
          "commit": {
            "abbreviatedOid": "b75fca8"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-02T07:20:07Z",
          "updatedAt": "2023-02-02T07:20:07Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Sorry, I had missed out on that comment somehow. The suggestion is now adopted.",
              "createdAt": "2023-02-02T07:20:07Z",
              "updatedAt": "2023-02-02T07:20:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85OJyby",
          "commit": {
            "abbreviatedOid": "0f00a5e"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-23T12:31:48Z",
          "updatedAt": "2023-02-23T12:31:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85OPHTV",
          "commit": {
            "abbreviatedOid": "0f00a5e"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-24T06:36:54Z",
          "updatedAt": "2023-02-24T06:36:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 26,
      "id": "PR_kwDOIrmZ-85I4_dw",
      "title": "aligned NIST references to the crypto-refresh",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/26",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-01-31T08:23:36Z",
      "updatedAt": "2023-02-24T07:19:58Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "a203efa37326fcb3e9d4968d2645750ce8321adc",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "correct-nist-refs",
      "headRefOid": "94f3b7646dcdf46b8af1319bb66cdb3f4c4e8e39",
      "closedAt": "2023-02-23T12:23:46Z",
      "mergedAt": "2023-02-23T12:23:45Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "1b38dcf303adde301180d33aa9872b0d38eaf2fa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85MM0Oy",
          "commit": {
            "abbreviatedOid": "b9fb33d"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T04:51:40Z",
          "updatedAt": "2023-02-01T04:51:40Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "```suggestion\r\n      NIST Special Publication 800-186\r\n```",
              "createdAt": "2023-02-01T04:51:40Z",
              "updatedAt": "2023-02-01T04:51:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MM0cy",
          "commit": {
            "abbreviatedOid": "b9fb33d"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T04:53:12Z",
          "updatedAt": "2023-02-01T04:53:12Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "\"SP\" not needed if spelled out.\r\n\r\nAligned to the above proposal for the other reference SP800-56A.",
              "createdAt": "2023-02-01T04:53:12Z",
              "updatedAt": "2023-02-01T04:53:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85MTIn7",
          "commit": {
            "abbreviatedOid": "94f3b76"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-02T00:25:39Z",
          "updatedAt": "2023-02-02T00:25:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85OIOim",
          "commit": {
            "abbreviatedOid": "94f3b76"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-23T08:13:56Z",
          "updatedAt": "2023-02-23T08:13:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOIrmZ-85KmqiZ",
      "title": "Fix NIST-SP800-56C reference",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/30",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Adapt SP800-56C reference to be inline with the format",
      "createdAt": "2023-02-23T12:55:20Z",
      "updatedAt": "2023-02-24T07:19:23Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "6e0242aafccdb031430b348273ab72412d25a193",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "fix-nist-ref",
      "headRefOid": "88fb82afc18843ab05dd3c2528b9fa59c3ea783e",
      "closedAt": "2023-02-24T07:19:16Z",
      "mergedAt": "2023-02-24T07:19:16Z",
      "mergedBy": "fluppe2",
      "mergeCommit": {
        "oid": "fb6e0a36688a1cb2cf135a38b447bcd01bd82780"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85OPGYN",
          "commit": {
            "abbreviatedOid": "a42735d"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-24T06:31:57Z",
          "updatedAt": "2023-02-24T06:31:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85OPQvJ",
          "commit": {
            "abbreviatedOid": "92bc628"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-24T07:02:53Z",
          "updatedAt": "2023-02-24T07:02:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 31,
      "id": "PR_kwDOIrmZ-85Kq2d0",
      "title": "Still some details in NIST references missing, mostly correct date in\u2026",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/31",
      "state": "MERGED",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026formation",
      "createdAt": "2023-02-24T07:29:59Z",
      "updatedAt": "2023-02-24T12:09:41Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "fb6e0a36688a1cb2cf135a38b447bcd01bd82780",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "fix-nist-ref-another-try",
      "headRefOid": "d70d768e21e96e83d66ee7695513b2dd916352dc",
      "closedAt": "2023-02-24T10:10:55Z",
      "mergedAt": "2023-02-24T10:10:55Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "bc5b070b9d0770f9f759120222b68e5014f9b36f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85OPgWN",
          "commit": {
            "abbreviatedOid": "d70d768"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-24T07:50:28Z",
          "updatedAt": "2023-02-24T07:50:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85OQvJX",
          "commit": {
            "abbreviatedOid": "d70d768"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-24T10:10:46Z",
          "updatedAt": "2023-02-24T10:10:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 32,
      "id": "PR_kwDOIrmZ-85Kshrw",
      "title": "Fixed missing SPHINCS+ reference",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/32",
      "state": "MERGED",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Adresses Issue #18 ",
      "createdAt": "2023-02-24T12:23:05Z",
      "updatedAt": "2023-02-27T12:12:29Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "bc5b070b9d0770f9f759120222b68e5014f9b36f",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "18-missing-sphincs+-reference",
      "headRefOid": "60deb6b76214f6325eed53b6f39b1af8b0efa7fb",
      "closedAt": "2023-02-27T12:12:28Z",
      "mergedAt": "2023-02-27T12:12:28Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "01c77e478849d9af083e3401519c379bdc075ecb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85OSSd5",
          "commit": {
            "abbreviatedOid": "93adf60"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-02-24T13:21:54Z",
          "updatedAt": "2023-02-24T13:22:16Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nSPHINCS+ [SPHINCS-Subm] is a stateless hash-based signature scheme. Its\r\n```",
              "createdAt": "2023-02-24T13:21:54Z",
              "updatedAt": "2023-02-24T13:22:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85OSWO0",
          "commit": {
            "abbreviatedOid": "93adf60"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-24T13:32:26Z",
          "updatedAt": "2023-02-24T13:32:27Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nsecurity relies on the hardness of finding preimages for cryptographic hash\r\n```",
              "createdAt": "2023-02-24T13:32:26Z",
              "updatedAt": "2023-02-24T13:32:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85OYYS5",
          "commit": {
            "abbreviatedOid": "60deb6b"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-27T07:19:06Z",
          "updatedAt": "2023-02-27T07:19:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85OaFBC",
          "commit": {
            "abbreviatedOid": "60deb6b"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-27T12:12:17Z",
          "updatedAt": "2023-02-27T12:12:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 33,
      "id": "PR_kwDOIrmZ-85Ldboe",
      "title": "Add repo link to draft for issue tracking",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/33",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-07T10:35:44Z",
      "updatedAt": "2023-03-24T11:48:15Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "01c77e478849d9af083e3401519c379bdc075ecb",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "add-repo",
      "headRefOid": "cf0980bdec981f9587df5e005fd42f4ce40e54a4",
      "closedAt": "2023-03-24T11:48:14Z",
      "mergedAt": "2023-03-24T11:48:14Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "ff841f3904b14ee7c0da5121541854faae9f9a6b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85Q2XPH",
          "commit": {
            "abbreviatedOid": "cf0980b"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-24T10:43:39Z",
          "updatedAt": "2023-03-24T10:43:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85Q2yXP",
          "commit": {
            "abbreviatedOid": "cf0980b"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-24T11:44:02Z",
          "updatedAt": "2023-03-24T11:44:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOIrmZ-85MLEAY",
      "title": "IND-CCA2 for ECC-KEM and KEM Combiner",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/36",
      "state": "MERGED",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "What has been added or changed:\r\n\r\na) Pointed to the Bertoni/Daemen/Peters/Assche paper \"On the Indifferentiability of the Sponge Construction\" for Keccak since this has a stable DOI\r\nb) Defined IND-CCA2 secure KEM combiner according to the Giacon/Heuer/Poettering paper \"KEM Combiners\" and added security considerations for this\r\nc) Aligned x25519kem and x448kem to RFC7748, splitted the description to be more readable\r\nd) Defined IND-CCA2 secure ECC-KEMs according to the Cramer/Shoup paper \"Design and Analysis of Practical Public-Key Encryption Schemes Secure against Adaptive Chosen Ciphertext Attack\" and added security considerations for this\r\ne) Removed the words \"native\", \"masking\", \"clamping\" concerning x25519, x448 as they are nowhere defined and might not be comprehensible, instead defined to simply follow the encodings of RFC7748\r\nf) Added \"oBits=256\" into the call of \"multiKeyCombine\" of the composite KEM encryption and decryption procedure as the KEK needs to be specified\r\n\r\n@wussler: Are you okay with c) and e)?\r\n\r\n@ahuelsing: Are you okay with a)? Can you check b)? Can you check also d)?\r\n\r\n@falko-strenzke, @TJ-91: Are you okay with f)? What did you guys implement? Did you implicitely assume this?",
      "createdAt": "2023-03-16T06:05:26Z",
      "updatedAt": "2023-03-24T11:52:43Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "01c77e478849d9af083e3401519c379bdc075ecb",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "ind-cca2",
      "headRefOid": "2d362a126c13ad73ba5d0b6a6b474978544cab7a",
      "closedAt": "2023-03-24T11:52:43Z",
      "mergedAt": "2023-03-24T11:52:43Z",
      "mergedBy": "fluppe2",
      "mergeCommit": {
        "oid": "b6be979cf903cfe962d9592947b9cda9d5079025"
      },
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "> @falko-strenzke, @TJ-91: Are you okay with f)? What did you guys implement? Did you implicitely assume this?\r\n\r\nI think the clarification is useful \ud83d\udc4d Since we use AES-256 key wrap, this is the only possible size for the KEK. Making it explicit is better.",
          "createdAt": "2023-03-16T08:14:49Z",
          "updatedAt": "2023-03-16T08:14:49Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "Let me try to explain my approach with an IND-CCA2 version of the ECC-KEMs in conjunction with the KEM combiner.\r\n- I tried to build this in a modular way, i.e. have CCA2-secure ingredient KEMs and then feed the ciphertexts into the KEM combiner so that the KEM combiner preserves their CCA2-security. The security considerations as they are proposed in this PR are tailored to such a modular approach.\r\n- The hashing in the ECC-KEMs ensures CCA2-security, the hashing is necessary if you want to achieve CCA2-security for the ECC-KEM itself. Only concatenation is not enough for this purpose as an attacker would control changes to the concatenation bitwise, the hashing ensures that changes propagate. Just to be clear, here I am looking only on the ECC-KEM itself.\r\n- Having the hashing step in the ECC-KEMs, I think it is enough to simply input the K1 || C1 || K2 || C2 into the combiner as the lengths of all key shares and ciphertexts are constant depending only on the specific parameters of the ingredient KEMs. We do not have to introduce an additional H(K1||C1) || H(K2||C2) in the combiner.\r\n- If we decide to remove the hashing step in the ECC-KEMs we would have to adopt our security considerations, trying to argue that the combined construction as a whole is (maybe) CCA2-secure, then I would rather suggest to have the KEM combiner processing H(K1||C1) || H(K2||C2), since assuming that K1, C1 come from an ECC-KEM, the hashing step for ECC-KEM would then be performed inside the combiner. Maybe that would allow a security argument that while the ECC-KEM building blocks are only IND-CPA, the construction as a whole would (maybe) ensure IND-CCA2. I don't know. Assuming for the moment that K2, C2 come from Kyber then the additional hashing might be superfluous but relieves an implementer from length checks so might be beneficial.\r\n\r\nJust trying to do state-of-the-art crypto. The modular approach allows for nice and clean security arguments backed up by the present scientific literature. The more tailored approach with IND-CPA versions of ECC-KEMs and (potential) CCA2-security established by the KEM combiner could be a bit more involved.",
          "createdAt": "2023-03-21T09:46:05Z",
          "updatedAt": "2023-03-21T09:52:30Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "@fluppe2 I addressed the comments we had today in the call, please review the latest changes and when you're OK we can merge :rocket: \r\n\r\nEdit: there also is still an open thread from Andreas, but IMO no change is needed there",
          "createdAt": "2023-03-23T22:53:29Z",
          "updatedAt": "2023-03-23T22:54:11Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "I would say the mentioning of rho is fine for now, I think it is still a moving target how we reference the PQ specs, since we are waiting for the final standards.",
          "createdAt": "2023-03-24T11:52:30Z",
          "updatedAt": "2023-03-24T11:52:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85QDqf3",
          "commit": {
            "abbreviatedOid": "5fec82a"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-16T08:25:06Z",
          "updatedAt": "2023-03-16T08:25:06Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "I don't think \"security advisory\" is entirely covering what is intended to be conveyed by the previous formulation. It would rather say:\r\n```suggestion\r\nspecification and security advisory mandated from the relative elliptic curve specification.\r\n```",
              "createdAt": "2023-03-16T08:25:06Z",
              "updatedAt": "2023-03-16T08:25:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85QD2My",
          "commit": {
            "abbreviatedOid": "5fec82a"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "As far as I can evaluate the PR, it is fine. But Andreas should still approve the formal claims Stavros suggested.",
          "createdAt": "2023-03-16T08:54:11Z",
          "updatedAt": "2023-03-16T08:55:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85QNRoM",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Hi @fluppe2, thanks for this very good PR!\r\n\r\nI like the change in (c) and (e), but am not happy with the pre-hashing of the secrets with the ciphertext. I would rather include the ciphertexts directly in the KDF as mentioned in the security considerations.\r\n\r\nAlso, FYI SHA3-384 was explicitly excluded from the crypto-refresh, so I'd abstain from using it here",
          "createdAt": "2023-03-17T10:18:14Z",
          "updatedAt": "2023-03-17T10:32:13Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "```suggestion\r\n| Key share              | 32 octets                                              | 64 octets                                              |\r\n| Hash                   | SHA3-256                                               | SHA3-512                                               |\r\n```",
              "createdAt": "2023-03-17T10:20:42Z",
              "updatedAt": "2023-03-17T10:32:13Z"
            },
            {
              "originalPosition": 145,
              "body": "```suggestion\r\n| Key share              | 32 octets                                              | 64 octets                                              |\r\n| Hash                   | SHA3-256                                               | SHA3-512                                               |\r\n```\r\nWe don't have SHA3-384 in OpenPGP",
              "createdAt": "2023-03-17T10:21:08Z",
              "updatedAt": "2023-03-17T10:32:13Z"
            },
            {
              "originalPosition": 220,
              "body": "I'm personally not the biggest fan of this change. Given that the length of the ciphertexts is guaranteed by protocol construction I would not add a hashing here, that's expensive!\r\n\r\nAlso, I find silly truncating the hash, when anyway it'll end up in a KDF.",
              "createdAt": "2023-03-17T10:23:48Z",
              "updatedAt": "2023-03-17T10:32:13Z"
            },
            {
              "originalPosition": 589,
              "body": "Isn't this inconsistent with the hashing done above?\r\nI would really prefer this version, as we can simply argue it's secure and more performant",
              "createdAt": "2023-03-17T10:28:23Z",
              "updatedAt": "2023-03-17T10:32:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85QWhYG",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good. I only suggested a few editorial changes and answered comments",
          "createdAt": "2023-03-20T09:12:49Z",
          "updatedAt": "2023-03-20T09:30:38Z",
          "comments": [
            {
              "originalPosition": 220,
              "body": "I agree that there is potentially an optimization possible. However, we have seen that the original draft was actually insecure (the ECC part was not CCA2 secure). I would adopt the change. This definitely gives you security in a modular way.  In my opinion we can optimize it if we manage to directly prove that the optimization is also secure.",
              "createdAt": "2023-03-20T09:12:49Z",
              "updatedAt": "2023-03-20T09:30:39Z"
            },
            {
              "originalPosition": 220,
              "body": "Also, maybe add that 9 & 5 are the generators of the respective additive group?",
              "createdAt": "2023-03-20T09:15:43Z",
              "updatedAt": "2023-03-20T09:30:39Z"
            },
            {
              "originalPosition": 380,
              "body": "```suggestion\r\n - A fixed-length octet string containing the Kyber public key, whose length\r\n```",
              "createdAt": "2023-03-20T09:19:35Z",
              "updatedAt": "2023-03-20T09:30:38Z"
            },
            {
              "originalPosition": 421,
              "body": "rho is not defined here -- should be explained.\r\n",
              "createdAt": "2023-03-20T09:23:08Z",
              "updatedAt": "2023-03-20T09:30:39Z"
            },
            {
              "originalPosition": 589,
              "body": "This is not inconsistent, it is just modular -- we first ensure independently secure KEMs, then we securely combine them.",
              "createdAt": "2023-03-20T09:27:48Z",
              "updatedAt": "2023-03-20T09:30:39Z"
            },
            {
              "originalPosition": 604,
              "body": "```suggestion\r\ndoes not influence the arguments in {{GHP18}}.\r\n```",
              "createdAt": "2023-03-20T09:29:18Z",
              "updatedAt": "2023-03-20T09:30:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85QWrho",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-20T09:34:57Z",
          "updatedAt": "2023-03-20T09:34:58Z",
          "comments": [
            {
              "originalPosition": 589,
              "body": "Sure, but then it should be expressed as \r\n```\r\nK = KMAC(domainSeparation, counter || H( K1 || C1 ) || H( K2 || C2 ) || fixedInfo,\r\n```\r\nIn this consideration we don't account for the additional hashing step",
              "createdAt": "2023-03-20T09:34:57Z",
              "updatedAt": "2023-03-20T09:34:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85QWsRv",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-20T09:36:49Z",
          "updatedAt": "2023-03-20T09:36:49Z",
          "comments": [
            {
              "originalPosition": 220,
              "body": "@ahuelsing don't get me wrong, I am happy with `X ||  eccCipherText`, but I would remove the `SHA-3-512` here (and in the other algorithms too)",
              "createdAt": "2023-03-20T09:36:49Z",
              "updatedAt": "2023-03-20T09:36:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85QXfu3",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-20T11:36:47Z",
          "updatedAt": "2023-03-20T11:36:47Z",
          "comments": [
            {
              "originalPosition": 589,
              "body": "This is possible, but not necessary (from a security point of view).",
              "createdAt": "2023-03-20T11:36:47Z",
              "updatedAt": "2023-03-20T11:36:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85QXf3i",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-20T11:37:11Z",
          "updatedAt": "2023-03-20T11:37:11Z",
          "comments": [
            {
              "originalPosition": 220,
              "body": "And then you do not have a secure KEM.",
              "createdAt": "2023-03-20T11:37:11Z",
              "updatedAt": "2023-03-20T11:37:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85QXqsp",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-20T12:05:09Z",
          "updatedAt": "2023-03-20T12:05:10Z",
          "comments": [
            {
              "originalPosition": 589,
              "body": "I think what Aron means is that then we can leave the EC KEM as it is, since \r\n\r\n`K = KMAC(domainSeparation, counter || H( K1 || C1 ) || H( K2 || C2 ) || fixedInfo,`\r\n\r\ntakes care of it all. For Kyber the additional hashing would be unnecessary, though.",
              "createdAt": "2023-03-20T12:05:10Z",
              "updatedAt": "2023-03-20T12:05:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85QXunJ",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-20T12:15:23Z",
          "updatedAt": "2023-03-20T12:15:23Z",
          "comments": [
            {
              "originalPosition": 589,
              "body": "If you use that version of the combiner, but indeed, then you have an unnecessary hashing for Kyber. Moreover, do you have a KEM description which defines an insecure KEM (which should at least be highlighted in that section in this case). The danger that I see is that extensions to new algorithms may render the whole thing insecure if we are not explicit where we do require what... (and in the previous version of the draft this was not clear at all)\r\n\r\n ",
              "createdAt": "2023-03-20T12:15:23Z",
              "updatedAt": "2023-03-20T12:15:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85QX98v",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-20T12:52:16Z",
          "updatedAt": "2023-03-20T12:52:16Z",
          "comments": [
            {
              "originalPosition": 220,
              "body": "You don't have a secure component KEM, but you're never using the component KEM by itself. And once you add the ciphertext in the KDF you get this security guarantee.\r\n\r\nAnyway, I also understand that speaking of efficiency when talking about OpenPGP is a lost battle a priori, so we could also do this.",
              "createdAt": "2023-03-20T12:52:16Z",
              "updatedAt": "2023-03-20T12:52:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85QX_XG",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-20T12:55:14Z",
          "updatedAt": "2023-03-20T12:55:14Z",
          "comments": [
            {
              "originalPosition": 589,
              "body": "So basically what this construction wants is the following?\r\n```K = KMAC(domainSeparation, counter || H( SS1 || C1 ) || C1 || H( SS2 || C2 ) || C2 || fixedInfo,```\r\nSince K1 is already defined here as H( SS1 || C1 )?\r\n\r\nEven if it's not necessary from the security standpoint, I'd like to keep this sentence as close as possible to what we're doing in order to cause less confusion",
              "createdAt": "2023-03-20T12:55:14Z",
              "updatedAt": "2023-03-20T12:55:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85Qd5dN",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-21T09:33:40Z",
          "updatedAt": "2023-03-21T09:33:41Z",
          "comments": [
            {
              "originalPosition": 220,
              "body": "I denoted the basepoints of Curve25519 and Curve448 in their abstract form following the notation of RFC7748 as U(P). See #[f2af0c5](https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/36/commits/f2af0c5023d5b0cfd30207491c859ca205757e93)",
              "createdAt": "2023-03-21T09:33:40Z",
              "updatedAt": "2023-03-21T09:33:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85Qz2TC",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-23T22:45:41Z",
          "updatedAt": "2023-03-23T22:45:41Z",
          "comments": [
            {
              "originalPosition": 589,
              "body": "As discussed today in the call, I agree with the construction and added a small note in the KDF section to make it evident for confused developers like me :)",
              "createdAt": "2023-03-23T22:45:41Z",
              "updatedAt": "2023-03-23T22:45:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85Qz3KQ",
          "commit": {
            "abbreviatedOid": "f5f659d"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-23T22:49:59Z",
          "updatedAt": "2023-03-23T22:50:00Z",
          "comments": [
            {
              "originalPosition": 421,
              "body": "It's defined in figure 4, referenced few lines above. I would be OK with not adding a second reference.",
              "createdAt": "2023-03-23T22:49:59Z",
              "updatedAt": "2023-03-23T22:50:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85Qz3g8",
          "commit": {
            "abbreviatedOid": "2d362a1"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-23T22:51:48Z",
          "updatedAt": "2023-03-23T22:51:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 37,
      "id": "PR_kwDOIrmZ-85MSHXJ",
      "title": "offset alg ids by 4 to align with C-R",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/37",
      "state": "MERGED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The Crypto Refresh now assigns the algorithm IDs 25-28, this PR adjusts for this",
      "createdAt": "2023-03-17T07:55:19Z",
      "updatedAt": "2023-03-24T11:47:38Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "01c77e478849d9af083e3401519c379bdc075ecb",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "bump-pk-alg-ids",
      "headRefOid": "e3f115d54c2d39842ee0370c254ffb1396586e17",
      "closedAt": "2023-03-24T11:47:38Z",
      "mergedAt": "2023-03-24T11:47:38Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "0268600ea39574fdcd5905d079ea2a8d0a33f725"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85Qz6VC",
          "commit": {
            "abbreviatedOid": "e3f115d"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-23T23:02:10Z",
          "updatedAt": "2023-03-23T23:02:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85Q2x6u",
          "commit": {
            "abbreviatedOid": "e3f115d"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-24T11:42:37Z",
          "updatedAt": "2023-03-24T11:42:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOIrmZ-85MSKiE",
      "title": "v5 -> v6",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/38",
      "state": "MERGED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-17T08:06:21Z",
      "updatedAt": "2023-03-24T11:48:35Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "01c77e478849d9af083e3401519c379bdc075ecb",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "bump-v5-to-v6",
      "headRefOid": "6462675847a6cf61c2d990effd5ff4889b1ddb91",
      "closedAt": "2023-03-24T11:48:34Z",
      "mergedAt": "2023-03-24T11:48:34Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "aca0aaced464dab3eb3d8a9d754925139bf95c32"
      },
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Also changed a reference to v6 public keys (was pointing to the wrong section 5.2.2 in the crypto refresh)",
          "createdAt": "2023-03-17T08:20:08Z",
          "updatedAt": "2023-03-17T08:20:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85Qz5Ln",
          "commit": {
            "abbreviatedOid": "13d871d"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-23T22:58:42Z",
          "updatedAt": "2023-03-23T22:58:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85Q2w-j",
          "commit": {
            "abbreviatedOid": "13d871d"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-24T11:39:37Z",
          "updatedAt": "2023-03-24T11:39:38Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "```suggestion\r\ndefined in [I-D.ietf-openpgp-crypto-refresh].\r\n```\r\nI think also 3.7.2.1 and 5.5.3 in crypto-refresh-08 applies here to the key material, maybe implicitely through the fingerprint also 5.1.2 and 5.2.3.35, and maybe some more. Shall we only cite the crypto-refresh and leave out the specific section. This seems to be more stable, since section numbering in the crypto-rtefresh can still change, and the key material packet information is somehow scattered throughout the crypto-refresh.",
              "createdAt": "2023-03-24T11:39:37Z",
              "updatedAt": "2023-03-24T11:39:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85Q2xio",
          "commit": {
            "abbreviatedOid": "13d871d"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-24T11:41:26Z",
          "updatedAt": "2023-03-24T11:41:26Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "```suggestion\r\n[I-D.ietf-openpgp-crypto-refresh].\r\n```\r\n\r\nSee comment above.",
              "createdAt": "2023-03-24T11:41:26Z",
              "updatedAt": "2023-03-24T11:41:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85Q2zpH",
          "commit": {
            "abbreviatedOid": "6462675"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-24T11:47:53Z",
          "updatedAt": "2023-03-24T11:47:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 39,
      "id": "PR_kwDOIrmZ-85M0dh8",
      "title": "Fix IANA considerations",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/39",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-24T10:31:05Z",
      "updatedAt": "2023-03-24T11:47:27Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "01c77e478849d9af083e3401519c379bdc075ecb",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "iana-considerations",
      "headRefOid": "2c4b8d2edaa4a8d0ea05b12245971663d692345a",
      "closedAt": "2023-03-24T11:47:27Z",
      "mergedAt": "2023-03-24T11:47:27Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "d851d9e66a9704748a6b40477e3c7000db78e5d1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85Q2Xkf",
          "commit": {
            "abbreviatedOid": "b951a05"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-24T10:44:32Z",
          "updatedAt": "2023-03-24T10:44:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85Q2ywh",
          "commit": {
            "abbreviatedOid": "b951a05"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-24T11:45:16Z",
          "updatedAt": "2023-03-24T11:45:16Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nFurthermore IANA will add the algorithm IDs defined in {{kem-alg-specs}} and\r\n```",
              "createdAt": "2023-03-24T11:45:16Z",
              "updatedAt": "2023-03-24T11:45:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85Q2zaR",
          "commit": {
            "abbreviatedOid": "2c4b8d2"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-24T11:47:10Z",
          "updatedAt": "2023-03-24T11:47:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 42,
      "id": "PR_kwDOIrmZ-85M-_ax",
      "title": "Align v3 PKESK to Crypto Refresh",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/42",
      "state": "MERGED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is a suggestion to align the new PQC encryption algorithms with X25519/X448 in the Crypto Refresh in regards to the PKESK packets\r\n\r\nI also fixed  occurances of \"symmetric key\" and replaced it by \"wrapped session key\"\r\n\r\nCloses #35 ",
      "createdAt": "2023-03-27T15:37:31Z",
      "updatedAt": "2023-06-20T13:42:49Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "3562ef6f3d0db2a8523be0770e9447114ed14a96",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "allow-v3-pkesk",
      "headRefOid": "7bae7ab9ff968e3fccd378ec60a9c7cc988fa14f",
      "closedAt": "2023-06-20T13:42:37Z",
      "mergedAt": "2023-06-20T13:42:37Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "881391ccebf4ebd7215683e2d3369041c3cefe09"
      },
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I incorporated your suggestions and tried to align it as close to the crypto refresh 09 as possible",
          "createdAt": "2023-06-15T09:47:41Z",
          "updatedAt": "2023-06-15T09:47:41Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85RBsVK",
          "commit": {
            "abbreviatedOid": "cfab47e"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-27T16:03:41Z",
          "updatedAt": "2023-03-27T16:10:45Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I would not allow v3 PKESK with PQC. This adds IMO a security problem too: the alg ID in the v3 PKESK is inside the wrapped session key. In v6 PKESK, it is in plaintext in the encrypted data packet, but it is used again in an HKDF to derive the actual encryption key.\r\nIn this mix we open up to cross-algorithm attacks",
              "createdAt": "2023-03-27T16:03:41Z",
              "updatedAt": "2023-03-27T16:10:45Z"
            },
            {
              "originalPosition": 38,
              "body": "I would not mention the differences here, this is an algorithm specific part. Let's just state how it's done here. Also AFAIK this is not done already in the new X25519 and X448 algos",
              "createdAt": "2023-03-27T16:10:19Z",
              "updatedAt": "2023-03-27T16:10:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85RHNXi",
          "commit": {
            "abbreviatedOid": "cfab47e"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-28T11:35:36Z",
          "updatedAt": "2023-03-28T11:35:36Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I think whether we want to allow v3 PKESK with PQC is a fundamental question. In the outset we had decided not to. But I think we need to revisit this. Johannes and I had discussed this a bit already. The crucial point is that if we don't allow it, then a sender cannot use PQC encryption for any recipient if there is a single recipient that does not support v6 PKESK. The reason is that v3 PKESK is tied to v1 SEIPD and v6 PKESK is tied to v2 SEIPD. Thus v3 and v6 PKESK cannot be mixed in a single message. This is a point that we previously didn't think through I think. I think we should analyze the potential for cross-protocol attacks. Disallowing v3 PKESK for PQC might lead to a bad user experience, in the worst case that a message cannot be sent encrypted to a given set of recipients. At present I don't think that it is the duty of our draft to restrict the interoperability any more then technically necessary.",
              "createdAt": "2023-03-28T11:35:36Z",
              "updatedAt": "2023-03-28T11:36:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85RHWX8",
          "commit": {
            "abbreviatedOid": "cfab47e"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-28T11:54:47Z",
          "updatedAt": "2023-03-28T11:54:48Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I discussed this with Daniel and the proposed changes to the X25519/X448 algos for the refresh.\r\nI am fine with putting the algorithm unencrypted as long as we limit the usable symmetric algorithms to AES (7, 8, 9) only. Since 7 is a must anyway, we don't limit interoperability.\r\n\r\nThis guarantees that the key size is enough to determine which algorithm ID we're using. We can still put it there explicit, but it effectively prevents cross-algorithm attacks by limiting the algorithms.\r\n",
              "createdAt": "2023-03-28T11:54:48Z",
              "updatedAt": "2023-03-28T11:54:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85RHf6z",
          "commit": {
            "abbreviatedOid": "cfab47e"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-28T12:14:40Z",
          "updatedAt": "2023-03-28T12:14:40Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Actually this is copied from the current algorithm-specific description for X25519/X448 (merged in MR 266).\r\n\r\nSince the crypto refresh now describes checksums a bit more clearly I do not insist on including this statement. If it were still as unclearly worded as it used to be prior to MR 266, I would definitely feel the need to clarify this.\r\n\r\nEdit: we could remove \"unlike ECDH\" from the sentence",
              "createdAt": "2023-03-28T12:14:40Z",
              "updatedAt": "2023-03-28T12:47:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85RHmsf",
          "commit": {
            "abbreviatedOid": "cfab47e"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-28T12:24:44Z",
          "updatedAt": "2023-03-28T12:24:44Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "The crypto refresh made the PKESK v3 algorithm identifier a part of the algorithm-specific parts. We do not necessarily need to do what is done in X25519/X448. We can propose a new (third) way of handling the algorithm identifier in v3 PKESK.\r\n\r\nThe only requirement is that we wrap something with `length % 8 == 0`. If we want to encrypt the algorithm ID we can add 7 padding bytes (like it's done in crypto-refresh-08 but reverted in MR 266). Some people didn't like it but I still think it's a reasonable thing to do.\r\n\r\nAlternatively, we could also include the symmetric algorithm id in the key combiner if you think this fixes the security related problems.",
              "createdAt": "2023-03-28T12:24:44Z",
              "updatedAt": "2023-03-28T12:24:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85RH99T",
          "commit": {
            "abbreviatedOid": "cfab47e"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-28T13:10:32Z",
          "updatedAt": "2023-03-28T13:10:32Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "> The crypto refresh made the PKESK v3 algorithm identifier a part of the algorithm-specific parts.\r\n\r\nYes, this is what I was trying to address in the proposed change that are coming tomorrow.\r\n\r\nI don't really like having two different KDFs for v3 and v6, since in v6 we don't have an ID, adding the requirement would effectively solve this.\r\nAlso note that to use a symmetric algo everyone needs to have support for it, so at that point I would state that if a new algo is implemented they can use SEIPDv2.",
              "createdAt": "2023-03-28T13:10:32Z",
              "updatedAt": "2023-03-28T13:10:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85RH_Af",
          "commit": {
            "abbreviatedOid": "cfab47e"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-28T13:12:33Z",
          "updatedAt": "2023-03-28T13:12:33Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Yeah, but here it's not X25519 vs ECDH, here is a brand new algo. I don't know if it makes sense to add this non-normative sentence when the behavior is specified 3 lines above and the test vectors will make it clear that there is no key.",
              "createdAt": "2023-03-28T13:12:33Z",
              "updatedAt": "2023-03-28T13:12:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85RRBGX",
          "commit": {
            "abbreviatedOid": "cfab47e"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-29T15:34:21Z",
          "updatedAt": "2023-03-29T15:34:22Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I think we should postpone this issue and see what the CR ends up with for X25519/X448. If it is restricting the symmetric algorithms to AES and keeping the algorithm identifier unencrypted, we should just do the same.",
              "createdAt": "2023-03-29T15:34:21Z",
              "updatedAt": "2023-03-29T15:34:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85YSSqU",
          "commit": {
            "abbreviatedOid": "cfab47e"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T10:01:33Z",
          "updatedAt": "2023-06-15T10:01:34Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "For the record: in the meantime we agreed that we will allow v3 PKESK for the use with PQC encryption: https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/35#issuecomment-1576596480-permalink",
              "createdAt": "2023-06-15T10:01:33Z",
              "updatedAt": "2023-06-15T10:01:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85YgZ49",
          "commit": {
            "abbreviatedOid": "7bae7ab"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-17T20:08:54Z",
          "updatedAt": "2023-06-17T20:08:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85Ys-lB",
          "commit": {
            "abbreviatedOid": "7bae7ab"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T13:41:23Z",
          "updatedAt": "2023-06-20T13:41:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85Ys_Lb",
          "commit": {
            "abbreviatedOid": "cfab47e"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T13:42:27Z",
          "updatedAt": "2023-06-20T13:42:27Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I think we can mark this older conversation now as resolved (required for merging).",
              "createdAt": "2023-06-20T13:42:27Z",
              "updatedAt": "2023-06-20T13:42:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 44,
      "id": "PR_kwDOIrmZ-85PSEJv",
      "title": "Some editorial stuff",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/44",
      "state": "MERGED",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I received some editorial comments for a colleague that I wanted to share and discuss with you.",
      "createdAt": "2023-04-27T10:33:44Z",
      "updatedAt": "2023-06-05T11:45:20Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "b6be979cf903cfe962d9592947b9cda9d5079025",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "minor-editorial",
      "headRefOid": "ae2f2d43061c4db4ed24dee87d0e69e7a17fda7e",
      "closedAt": "2023-06-05T11:45:20Z",
      "mergedAt": "2023-06-05T11:45:20Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "7cec91cfa96871bb93ab077969388d26ccf7de8d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85UOhkf",
          "commit": {
            "abbreviatedOid": "869b9cd"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-04T13:27:14Z",
          "updatedAt": "2023-05-04T13:29:53Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nIn the following measures are described that ensure secure implementations\r\n```\r\n",
              "createdAt": "2023-05-04T13:27:14Z",
              "updatedAt": "2023-05-04T13:30:52Z"
            },
            {
              "originalPosition": 14,
              "body": "Besides my minor proposed correction, I think  we should merge this.",
              "createdAt": "2023-05-04T13:29:10Z",
              "updatedAt": "2023-05-04T13:29:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85UtRBT",
          "commit": {
            "abbreviatedOid": "869b9cd"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-10T18:06:08Z",
          "updatedAt": "2023-05-10T18:06:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85XKbQp",
          "commit": {
            "abbreviatedOid": "ae2f2d4"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-05T11:44:48Z",
          "updatedAt": "2023-06-05T11:44:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 48,
      "id": "PR_kwDOIrmZ-85QsUPo",
      "title": "change KDF from KMAC to SHA3",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/48",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some concerns regarding the availability and ease of implementation of KMAC have arisen: https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/46\r\n\r\nAccordingly, the use of readily available SHA-3 functions seems to be the superior choice.",
      "createdAt": "2023-05-17T09:21:09Z",
      "updatedAt": "2023-05-23T15:11:46Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "b6be979cf903cfe962d9592947b9cda9d5079025",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "sha3-kdf",
      "headRefOid": "139917d4c86822327b3c011b13f4398e24d32c7e",
      "closedAt": "2023-05-23T15:11:45Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I do not think this is a good idea. I agree with @wussler that KMAC is the better solution. The problem that motivated the change, i.e., that the Keccak core function is not available will also manifest when implementing SHAKE which is required for Dilithium and Kyber. Hence, I do not consider it a solution to switch to SHA3 or SHA2-HMAC here. ",
          "createdAt": "2023-05-22T11:00:25Z",
          "updatedAt": "2023-05-22T11:00:25Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> I do not think this is a good idea. I agree with @wussler that KMAC is the better solution. The problem that motivated the change, i.e., that the Keccak core function is not available will also manifest when implementing SHAKE which is required for Dilithium and Kyber. Hence, I do not consider it a solution to switch to SHA3 or SHA2-HMAC here.\r\n\r\nThis is not entirely true since KMAC requires cSHAKE and not SHAKE. If a library, like Botan, implements SHA-3 and SHAKE this is still not enough to implement KMAC. In such cases the Keccak[c] function has to be made available, which forces the developer to deal with its internals to some degree since the final bit padding for cSHAKE differs from that of SHAKE:\r\n\r\n`SHAKE128(M, d) = KECCAK[256] (M || 1111, d)`\r\n\r\n`cSHAKE128(...) = KECCAK[256](... || X || 00, L)`\r\n\r\nThis is what I experienced with Botan.",
          "createdAt": "2023-05-22T12:12:29Z",
          "updatedAt": "2023-05-22T12:12:29Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "KMAC is defined as follows:\r\n\r\n```\r\nKMAC256(K, X, L, S):\r\nValidity Conditions: len(K) < 2\u00b2\u2070\u2074\u2070 and 0 \u2264 L < 2\u00b2\u2070\u2074\u2070 and len(S) < 2\u00b2\u2070\u2074\u2070\r\n\r\n1. newX = bytepad(encode_string(K), 136) || X || right_encode(L).\r\n2. T = bytepad(encode_string(\u201cKMAC\u201d) || encode_string(S), 136).\r\n3. return KECCAK[512](T || newX || 00, L)  // \"00\" is the 2-bit padding\r\n```\r\n\r\nBesides some encodings it doesn't to anything different than SHA-3 hash. The necessary length encodings can easily be modelled into the KDF construction. \r\n\r\nNote also the virtually unlimitted key length. This is another implementation problem we experience in Botan since allowing an extremely large key length may be unexpected by the caller who might simply try to allocate `max_key_length`. Limiting it arbirtrarily might on the other hand limit the usability of KMAC.\r\n\r\nI think it makes sense to hold back this PR for now and wait how the acceptance of KMAC by the community will turn out. This will probably depend on the availability of cSHAKE or KMAC in crypto libraries at that point.",
          "createdAt": "2023-05-22T12:24:51Z",
          "updatedAt": "2023-05-22T12:25:39Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I would close the PR and keep the issue open. The reason is that this PR IMO does not cover the requirements to simply perform the swap, for instance adding the output length to the fixed info, even though now we just output a single length to keywrap AES-256. A PR in this field would require some additional discussion.\r\n\r\nThe reasons why I would keep the issue open is because implementation complexity is still very important to me. We should not forget that if we find hard to implement this in the first two implementations, it might be very hard for others too. As much as I prefer KMAC, I'm willing to switch to SHA-3 to make it easier to implement, as long as we keep the security guarantees at the cost of a more complex hash construction (to avoid collisions with the ECDH KDF)",
          "createdAt": "2023-05-23T07:23:11Z",
          "updatedAt": "2023-05-23T07:23:11Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, let's close it as we have no immediate plans to accept it. Issue #46 anyway still points to it and we can reopen and refine it whenever needed. ",
          "createdAt": "2023-05-23T15:11:45Z",
          "updatedAt": "2023-05-23T15:11:45Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 50,
      "id": "PR_kwDOIrmZ-85SLuun",
      "title": "Added eccPublicKey to the final hashing step of the ECC-KEMs",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/50",
      "state": "MERGED",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I didn't alter the security considerations, only put eccPublicKey into the hash. Shall we also elaborate on this in the security considerations?",
      "createdAt": "2023-06-05T11:19:38Z",
      "updatedAt": "2023-06-15T07:02:47Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "b6be979cf903cfe962d9592947b9cda9d5079025",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "43-optimizingaligning-the-ind-cca2-construction",
      "headRefOid": "fd624908b5344ad2bfe957e8fad0a73b78d6d9ca",
      "closedAt": "2023-06-13T13:09:30Z",
      "mergedAt": "2023-06-13T13:09:30Z",
      "mergedBy": "ahuelsing",
      "mergeCommit": {
        "oid": "3562ef6f3d0db2a8523be0770e9447114ed14a96"
      },
      "comments": [
        {
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Setup: We have two KEMs which we assume to be multi-user secure. We combine their outputs using a KEM-combiner k = H(k1, c1, k2, c2), c = (c1, c2).\r\n\r\nQuestion 1: Do we have to add pk1 and pk2 to H to preserve multi-user security?\r\n\r\nAnswer: No. To break security the adversary has to distinguish a set of challenge keys k*_u from random (one per user / pk). For each of these k* it holds that if the adversary never makes a query H(k1*_u, c1*_u, k2*_u, c2*_u) they have a zero advantage over guessing [the result of the query is k*_u if it was not random and something different from k*_u if it was random -- without querying a random oracle H at a position x an adversary cannot make any statement about H(x)].\r\n\r\nThe only multi-user advantage that the adversary could gain therefore consists of queries to H that are meaningful for two different users u1 != u2 and their associated public keys. This is only the case if (c1*_u1, c2*_u1) = (c1*_u2, c2*_u2) as the ciphertext values decide for which challenge the query is meaningful. I.e., we need a ciphertext collision between challenges. We will argue that this is sufficiently unlikely. \r\n\r\nNote, that up to decryption errors, encapsulation is an injective function (otherwise you could not decapsulate). That means that the actual image of the (partial) encapsulation function in the ciphertext space C is at least as large as the space of shared secrets K which in turn has to have sufficient size such that the min-entropy of the challenge k* is linear in the security parameter (in practice it will be 256bit and therefore |K| >= 2^256). Now, even if (worst case ever) two users have the same public key, the probability that the challenge ciphertexts are identical is at most 2^-min_entropy (this makes the assumption that the randomness used in the generation of the two challenges is uncorrelated; if it is not independent this is not guaranteed). Hence, the probability that any two users have the same challenge ciphertext is |U^2| * 2^-min_entropy.\r\n\r\nIn consequence, the ciphertexts already work sufficiently well as domain-separator. \r\n\r\n\r\nQuestion 2: Can adding pk1 and pk2 to H add multi-user security if the KEMs themselve are not multi-user secure (beyond the trivial non-tight bound)?\r\n\r\nAnswer: Unlikely, we were unable to construct a counter-example in a short time period, but previous works were only able to show that using a key-ID to domain-separate all hashes preserves multi-user security (see, e.g. https://eprint.iacr.org/2021/1351.pdf).   \r\n\r\n\r\nIn consequence, it seems as if it does not make sense to add the pk.",
          "createdAt": "2023-06-13T13:07:23Z",
          "updatedAt": "2023-06-13T13:07:23Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "@ahuelsing so if I understood correctly, you mean that:\r\n- We should add the `eccPublicKey` to the hash (as done in this PR)\r\n- We can remove the PK from the KEM combiner (in another PR)\r\n",
          "createdAt": "2023-06-14T17:27:37Z",
          "updatedAt": "2023-06-14T17:27:37Z"
        },
        {
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Exactly (although I did not find a proof that guarantees that adding the eccPK to the hash does give you multi-user security, there are several papers that conjecture it does)",
          "createdAt": "2023-06-15T07:02:47Z",
          "updatedAt": "2023-06-15T07:02:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85XLUyy",
          "commit": {
            "abbreviatedOid": "fd62490"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I think this change is uncritical as it only adds the public key in the KDF in the ECC scheme. The critical question that Andreas is still analysing is whether we can remove it the public-key from the KEM combiner.",
          "createdAt": "2023-06-05T13:44:21Z",
          "updatedAt": "2023-06-05T13:44:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85YC0Vd",
          "commit": {
            "abbreviatedOid": "fd62490"
          },
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T13:08:03Z",
          "updatedAt": "2023-06-13T13:08:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOIrmZ-85TG_3a",
      "title": "resolve circular reference",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/52",
      "state": "MERGED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This resolves the circular reference in #13 by removing one reference. The statement was simply wrong and it's not specified in the referenced part.",
      "createdAt": "2023-06-15T15:21:05Z",
      "updatedAt": "2023-06-20T13:44:29Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "3562ef6f3d0db2a8523be0770e9447114ed14a96",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "issue_13_circular_ref",
      "headRefOid": "112f76c3d83e52ecdd834db3672e7fe29f1e9a4e",
      "closedAt": "2023-06-20T13:44:25Z",
      "mergedAt": "2023-06-20T13:44:24Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "c66ecb6f238c192a09442b824734ae16580ccb20"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85YgZ5j",
          "commit": {
            "abbreviatedOid": "112f76c"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-17T20:09:22Z",
          "updatedAt": "2023-06-17T20:09:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85YtAGo",
          "commit": {
            "abbreviatedOid": "112f76c"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T13:44:07Z",
          "updatedAt": "2023-06-20T13:44:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 54,
      "id": "PR_kwDOIrmZ-85Uy6tB",
      "title": "spelling correction",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/54",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-06T10:25:42Z",
      "updatedAt": "2023-07-06T10:36:44Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "c66ecb6f238c192a09442b824734ae16580ccb20",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "review-falko-23-07",
      "headRefOid": "eb68bd6df2b878aca2d716c670a9cea58c89f483",
      "closedAt": "2023-07-06T10:36:44Z",
      "mergedAt": "2023-07-06T10:36:44Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "1c69697aeae7d1ba221f4401812baf6499ba5d69"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85aYB2Y",
          "commit": {
            "abbreviatedOid": "eb68bd6"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-06T10:33:15Z",
          "updatedAt": "2023-07-06T10:33:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85aYC_x",
          "commit": {
            "abbreviatedOid": "eb68bd6"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-06T10:36:33Z",
          "updatedAt": "2023-07-06T10:36:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOIrmZ-85Uy8_m",
      "title": "Remove PK hash from key combiner",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/55",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Follow up from #50, closes #51 and #53 ",
      "createdAt": "2023-07-06T10:32:02Z",
      "updatedAt": "2023-07-10T09:12:15Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "1c69697aeae7d1ba221f4401812baf6499ba5d69",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "remove-pk-hash",
      "headRefOid": "3de2e649fabccefffc913c6ebef3bcb437b9714c",
      "closedAt": "2023-07-10T09:12:14Z",
      "mergedAt": "2023-07-10T09:12:14Z",
      "mergedBy": "ahuelsing",
      "mergeCommit": {
        "oid": "08622efb68b65b53f053c2ed1f475b78330a8b79"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85aYDMP",
          "commit": {
            "abbreviatedOid": "d2fc497"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-06T10:37:04Z",
          "updatedAt": "2023-07-06T10:37:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85aYEFH",
          "commit": {
            "abbreviatedOid": "d2fc497"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-06T10:39:26Z",
          "updatedAt": "2023-07-06T10:39:27Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "@ahuelsing I tried to convey the formal justification in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/50 in RFC-compliant language. Please let me know if I made some mistake please, or if you think it's excessive / insufficient.",
              "createdAt": "2023-07-06T10:39:27Z",
              "updatedAt": "2023-07-06T10:39:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85asXZY",
          "commit": {
            "abbreviatedOid": "d2fc497"
          },
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T08:46:48Z",
          "updatedAt": "2023-07-10T08:46:48Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Hey, I think lines 1562 ff are a bit unclear / too compact. Maybe use the following:\r\n\r\n\"Our aim is to preserve multi-user security. A common approach to this is to add the public key into the key derivation for K. However, it turns out that this is not necessary here. To break security of the combined scheme in the multi-user setting, the adversary has to distinguish a set of challenge keys \r\n\r\n      K*_u = H(K1*_u, C1*_u, K2*_u, C2*_u)\r\n\r\nfor users u in some set from random, also given ciphertexts   C*_u = (C1*_u, C2*_u).\" \r\n\r\nThen continue from line 1565 on. ",
              "createdAt": "2023-07-10T08:46:48Z",
              "updatedAt": "2023-07-10T08:46:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85asZdD",
          "commit": {
            "abbreviatedOid": "d2fc497"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T08:50:03Z",
          "updatedAt": "2023-07-10T08:50:04Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "```suggestion\r\nGiven two KEMs which we assume to be multi-user secure, we combine their outputs\r\nusing a KEM-combiner:\r\n\r\n    K = H(K1, C1, K2, C2), C = (C1, C2)\r\n\r\nOur aim is to preserve multi-user security. A common approach to this is to add \r\nthe public key into the key derivation for K. However, it turns out that this is \r\nnot necessary here. To break security of the combined scheme in the multi-user \r\nsetting, the adversary has to distinguish a set of challenge keys\r\n\r\n  K*_u = H(K1*_u, C1*_u, K2*_u, C2*_u)\r\n\r\nfor users u in some set from random, also given ciphertexts `C*_u = (C1*_u, C2*_u)`.\r\nFor each of these K* it holds that if the adversary never makes a query\r\n\r\n    H(K1*_u, C1*_u, K2*_u, C2*_u)\r\n\r\nthey have a zero advantage over guessing.\r\n\r\nThe only multi-user advantage that the adversary could gain therefore consists\r\nof queries to H that are meaningful for two different users u1 != u2 and their\r\nassociated public keys.\r\nThis is only the case if\r\n\r\n    (c1*_u1, c2*_u1) = (c1*_u2, c2*_u2)\r\n\r\nas the ciphertext values decide for which challenge the query is meaningful.\r\nThis means that a ciphertext collision is needed between challenges.\r\nAssuming that the randomness used in the generation of the two challenges is\r\nuncorrelated, this is negligible.\r\n\r\nIn consequence, the ciphertexts already work sufficiently well as\r\ndomain-separator.\r\n```",
              "createdAt": "2023-07-10T08:50:03Z",
              "updatedAt": "2023-07-10T08:51:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85asj4M",
          "commit": {
            "abbreviatedOid": "3de2e64"
          },
          "author": "ahuelsing",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-10T09:12:05Z",
          "updatedAt": "2023-07-10T09:12:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 56,
      "id": "PR_kwDOIrmZ-85VK5tL",
      "title": "remove remnant sentence",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/56",
      "state": "MERGED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "References the removed `publicKey` part of `fixedInfo`",
      "createdAt": "2023-07-11T07:50:17Z",
      "updatedAt": "2023-08-25T13:02:09Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "08622efb68b65b53f053c2ed1f475b78330a8b79",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "jroth_small_fix",
      "headRefOid": "1b3300ec4ab23cf19c662d6f40a5e7993bd2a121",
      "closedAt": "2023-08-25T13:02:09Z",
      "mergedAt": "2023-08-25T13:02:09Z",
      "mergedBy": "fluppe2",
      "mergeCommit": {
        "oid": "ec33e5de4313f97f35c0ca7b69099fe71ed84f41"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85a792a",
          "commit": {
            "abbreviatedOid": "1b3300e"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-12T07:12:34Z",
          "updatedAt": "2023-07-12T07:12:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85fHEVt",
          "commit": {
            "abbreviatedOid": "1b3300e"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-25T13:01:34Z",
          "updatedAt": "2023-08-25T13:01:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 60,
      "id": "PR_kwDOIrmZ-85Y5isp",
      "title": "Align to NIST PQC Draft Standards FIPS 203, 204, 205",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60",
      "state": "MERGED",
      "author": "fluppe2",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Take your time to review and compare with the draft standards. No need to hurry.\r\n\r\n### The point you to some specifics changes that might be difficult to spot due to the amount of change marks:\r\n\r\n- Felt the need to align eccKem.encap()/decap() to the ML-KEM terminology, i.e. switched to ECC-KEM.Encaps()/Decaps() (likewise x25519.Encaps() etc.)\r\n\r\n- In Table 9 I spotted some typos (I think). The last colum was \u201eECDH-KEM curve\u201c, I think it should be consistently \u201eECC-KEM curve\u201c. In this last column there was X25519, X448 which should be Curve25519 and Curve448.\r\n\r\n- In Section 5.1.1 and 5.2.4 it was:\r\n  - \"The placeholder `eccKem` has to be replaced with the specific ECC-KEM from the row \"ECC-KEM\" of [Table 5],  [Table 6], or [Table 7].\"\r\n  - \"The placeholder `kyberKem` has to be replaced with the specific Kyber-KEM from the column \"Kyber-KEM\" of [Table 8].\"\r\n\r\n  I now borrowed the sentence from the NIST draft standards:\r\n\r\n  - \"To instantiate ECC-KEM, one must select a parameter set from [Table 5],  [Table 6], or [Table 7].\"\r\n  - \"To instantiate ML-KEM, one must select a parameter set from the column \"ML-KEM\" of [Table 8]\"\r\n\r\n- In Section 5.2.4 and 5.2.5 it was:\r\n\r\n  - \"Instantiate the ECC-KEM eccKem.encap() and the ML-KEM ML-KEM.Encaps() depending on the algorithm ID according to [Table 9]\"\r\n  - \"Instantiate the ECC-KEM eccKem.decap() and the ML-KEM ML-KEM.Decaps() depending on the algorithm ID according to [Table 9]\"\r\n\r\n  Felt it somehow doubled to write \u201einstantiate ECC-KEM eccKem.encap()\u201c. I understand that it is meant to establish the mindset \u201ehere you need encaps/decaps\u201c. But I don\u2019t know what it means to instantiate an algorithm and felt it better to write\r\n\r\n  - \u201eInstantiate the ECC-KEM and the ML-KEM depending on the algorithm ID according to [Table 9](https://github.com/openpgp-pqc/draft-openpgp-pqc/Repositories/draft-openpgp-pqc/draft-wussler-openpgp-pqc.html#tab-mlkem-ecc-composite)\u201c\r\n\r\n  The next lines in the procedures then say whether to Encaps or Decaps anyway.\r\n\r\n- \"Binding hashes\" for ML-DSA and SLH-DSA: I switched the section title to \"Signature Data Digest\" to be clearer what we mean. Please take a look at the specific sections if this is ok for you as I wrote it.\r\n\r\n### Some specific issues that I spotted and not touched but would like to pose them for discussion:\r\n\r\n- Is it clear how to encode secret and public key material and ciphertexts/signatures from pointing the reader to the FIPS documents and saying fixed-length octet strings? Or should we list the contents of the specific octet strings or maybe point to the data in the FIPS documents?\r\n\r\n- Section 6.2.1 states SHA3-256 as MUST and SHA3-512 as SHOULD, but if one implements ML-DSA-87 then the requirement on SHA3-512 turns into MUST. IS that clear from our formulation?",
      "createdAt": "2023-08-28T06:43:02Z",
      "updatedAt": "2023-09-12T15:39:58Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "ec33e5de4313f97f35c0ca7b69099fe71ed84f41",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "59-align-to-nist-pqc-draft-standards",
      "headRefOid": "34e4cede25785c1db8ec5787ad1c8b901671d936",
      "closedAt": "2023-09-12T15:39:57Z",
      "mergedAt": "2023-09-12T15:39:57Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "f347f9c81c118ffe93dbfa63908b39cbc80fcf11"
      },
      "comments": [
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n\r\n\r\n> * One occurance of Dilithium is still here: \"far greater than those of traditional or Dilithium + ECC signature schemes\" (Section 10.1.)\r\n\r\nGood catch, aligned in commit [6095c0f](https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/6095c0f84f52a68f60f637c592545d909eccedf4).",
          "createdAt": "2023-08-28T13:43:20Z",
          "updatedAt": "2023-08-28T13:43:20Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "> For me it's clear but I see what you mean. Perhaps it makes sense to replace the text by a list that binds each algorithm ID to a hash algorithm, analogous to the SLH-DSA parameters (Table 14).\r\n> We can also address #57 there (i.e., SHA3-512 is always allowed when SHA3-256 is allowed).\r\n\r\nSee [16f5b8b](https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/16f5b8bdf922f468bef6829518cab4c31bdbad32)\r\n\r\nI guess now is a good opportunity to also discuss and close #57?\r\n\r\n",
          "createdAt": "2023-08-28T14:02:38Z",
          "updatedAt": "2023-08-28T14:06:44Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> Felt it somehow doubled to write \u201einstantiate ECC-KEM eccKem.encap()\u201c. I understand that it is meant to establish the mindset \u201ehere you need encaps/decaps\u201c. But I don\u2019t know what it means to instantiate an algorithm and felt it better to write\r\n> \r\n>     * \u201eInstantiate the ECC-KEM and the ML-KEM depending on the algorithm ID according to [Table 9](https://github.com/openpgp-pqc/draft-openpgp-pqc/Repositories/draft-openpgp-pqc/draft-wussler-openpgp-pqc.html#tab-mlkem-ecc-composite)\u201c\r\n\r\nThe \"instantiate\" terminology is in my understanding indeed a somewhat object oriented concept for the description of the algorithms (in an abstract sense, not with reference to the programming approach). It basically means: \"select the set of algorithms / parameters according to the respective KEM (or signature) variant. I still think it can be a valid and intuitively understandable verbal approach if we use it consistently. But I am aware that it is not necessarily the way that specs are typically written and I am also OK with removing the term \"instantiate\" completely.",
          "createdAt": "2023-09-05T09:28:58Z",
          "updatedAt": "2023-09-05T09:28:58Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "I guess we are good to go, once the approving reviews come together.",
          "createdAt": "2023-09-12T03:42:16Z",
          "updatedAt": "2023-09-12T03:42:16Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "To avoid rebasing I adressed #62 in this PR in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/ffbf99672294d5920a02db58b5e9adadbc8fa113. I guess we can close #62.",
          "createdAt": "2023-09-12T04:00:15Z",
          "updatedAt": "2023-09-12T04:00:39Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "We still have five occurances of \"private key\". Should we rename them to \"secret key\" as well?",
          "createdAt": "2023-09-12T06:11:56Z",
          "updatedAt": "2023-09-12T06:11:56Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "> We still have five occurances of \"private key\". Should we rename them to \"secret key\" as well?\r\n\r\nFixed in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/e69fe9de058cd9283ba2e9a4e8a0df1d154b8b1f",
          "createdAt": "2023-09-12T06:57:34Z",
          "updatedAt": "2023-09-12T06:57:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85fORrV",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T06:45:08Z",
          "updatedAt": "2023-08-28T06:45:08Z",
          "comments": [
            {
              "originalPosition": 768,
              "body": "```suggestion\r\nalgorithm used MUST be AES-128, AES-192 or AES-256.\r\n```\r\nIs it really necessary to list the algorithm IDs for AES from another spec?",
              "createdAt": "2023-08-28T06:45:08Z",
              "updatedAt": "2023-08-28T06:45:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fPgk6",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T09:26:28Z",
          "updatedAt": "2023-08-28T09:26:28Z",
          "comments": [
            {
              "originalPosition": 768,
              "body": "The wording is taken from the crypto refresh where they have the same restrictions for v3 PKESK + X25519/X448. I have no strong opinion on this and removing the bracket is fine by me. If no one objects I think you can just do it.",
              "createdAt": "2023-08-28T09:26:28Z",
              "updatedAt": "2023-08-28T09:26:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fPnjk",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Further points that I didn't address as comments in the changes directly:\r\n\r\n* One occurance of Dilithium is still here: \"far greater than those of traditional or Dilithium + ECC signature schemes\" (Section 10.1.)\r\n\r\n>     * In Section 5.1.1 and 5.2.4 it was:\r\n>       \r\n>       * \"The placeholder `eccKem` has to be replaced with the specific ECC-KEM from the row \"ECC-KEM\" of [Table 5],  [Table 6], or [Table 7].\"\r\n>       * \"The placeholder `kyberKem` has to be replaced with the specific Kyber-KEM from the column \"Kyber-KEM\" of [Table 8].\"\r\n>       \r\n>       I now borrowed the sentence from the NIST draft standards:\r\n>       \r\n>       * \"To instantiate ECC-KEM, one must select a parameter set from [Table 5],  [Table 6], or [Table 7].\"\r\n>       * \"To instantiate ML-KEM, one must select a parameter set from the column \"ML-KEM\" of [Table 8]\"\r\n> \r\n>     * In Section 5.2.4 and 5.2.5 it was:\r\n>       \r\n>       * \"Instantiate the ECC-KEM eccKem.encap() and the ML-KEM ML-KEM.Encaps() depending on the algorithm ID according to [Table 9]\"\r\n>       * \"Instantiate the ECC-KEM eccKem.decap() and the ML-KEM ML-KEM.Decaps() depending on the algorithm ID according to [Table 9]\"\r\n>       \r\n>       Felt it somehow doubled to write \u201einstantiate ECC-KEM eccKem.encap()\u201c. I understand that it is meant to establish the mindset \u201ehere you need encaps/decaps\u201c. But I don\u2019t know what it means to instantiate an algorithm and felt it better to write\r\n>       \r\n>       * \u201eInstantiate the ECC-KEM and the ML-KEM depending on the algorithm ID according to [Table 9](https://github.com/openpgp-pqc/draft-openpgp-pqc/Repositories/draft-openpgp-pqc/draft-wussler-openpgp-pqc.html#tab-mlkem-ecc-composite)\u201c\r\n\r\nI think the instantiation thing is a leftover from the initial way of describing it in terms of object oriented programming (where eccKem is the abstract base class and you have to choose a concrete instantiation that implements the methods).\r\nWe probably have to wait for external feedback to see whether or not it's currently easy to understand.\r\n\r\n\r\n>     * Is it clear how to encode secret and public key material and ciphertexts/signatures from pointing the reader to the FIPS documents and saying fixed-length octet strings? Or should we list the contents of the specific octet strings or maybe point to the data in the FIPS documents?\r\n\r\nI think it makes sense to point to the exact location in the spec. Listing / repeating the contents in an \"RFC-friendly\" way might be too much overhead with questionable benefit.\r\nWe have more or less two kinds of implementers to consider, I think: 1) someone who integrates an existing implementation and doesn't know or care about the details. They hopefully get the keys/ciphertexts/signatures in the NIST-specified format. 2) implementers who implement the algorithms themselves, they need to deep-dive into the spec anyway.\r\n\r\n\r\n>     * Section 6.2.1 states SHA3-256 as MUST and SHA3-512 as SHOULD, but if one implements ML-DSA-87 then the requirement on SHA3-512 turns into MUST. IS that clear from our formulation?\r\n\r\nFor me it's clear but I see what you mean. Perhaps it makes sense to replace the text by a list that binds each algorithm ID to a hash algorithm, analogous to the SLH-DSA parameters (Table 14).\r\nWe can also address #57 there (i.e., SHA3-512 is always allowed when SHA3-256 is allowed).\r\n\r\nWe should make separate issues/PRs for individual topics that don't directly relate to the changes to align to the NIST draft.",
          "createdAt": "2023-08-28T09:41:24Z",
          "updatedAt": "2023-08-28T12:10:08Z",
          "comments": [
            {
              "originalPosition": 140,
              "body": "hashed-based -> hash-based\r\n\r\nSince SLH means \"stateless hash based\" we might want to write \"stateless hash-based\" here as well, otherwise it's a bit weird",
              "createdAt": "2023-08-28T09:41:24Z",
              "updatedAt": "2023-08-28T12:10:08Z"
            },
            {
              "originalPosition": 212,
              "body": "Not your change but:\r\n\r\n> is based on the hardness of solving lattice problems in module lattices\r\n\r\nSounds weird and should probably be something like \"is based on the hardness of solving the learning-with-errors problem in module lattices (MLWE)\"\r\n\r\nor even shorter since it's already written out for Kyber: \"is based on the hardness of solving the MLWE problem\"",
              "createdAt": "2023-08-28T09:50:02Z",
              "updatedAt": "2023-08-28T12:10:08Z"
            },
            {
              "originalPosition": 503,
              "body": "At least for me it now breaks the line like\r\n\r\n```\r\nML-\r\nKEM-768\r\n```\r\n\r\nin the table but there seems to be enough space left to get it into one line. Writing it like `ML&#x2011;KEM&#x2011;768` makes it one line. I'm not sure whether it's good practice, though. It's the Unicode Non-Breaking Hyphen Character (treated like a letter, not a `-`).",
              "createdAt": "2023-08-28T10:08:25Z",
              "updatedAt": "2023-08-28T12:10:08Z"
            },
            {
              "originalPosition": 605,
              "body": "Perhaps we can find a better name than `mlkemKemData`.\r\n\r\nTwo suggestions:\r\n* Rename to `eccData` and `mlkemData`\r\n* remove both names and write `encData = counter || eccKeyShare || eccCipherText || mlkemKeyShare || mlkemCipherText || fixedInfo`",
              "createdAt": "2023-08-28T10:24:51Z",
              "updatedAt": "2023-08-28T12:10:08Z"
            },
            {
              "originalPosition": 697,
              "body": "I think `eccSecretKey` has to be changed to `eccPrivateKey`.\r\n\r\nAlso, now we say PublicKey/PrivateKey for ECC KEM and EncapsKey/DecapsKey for ML-KEM. As I understand, you do this because NIST uses the terminology for ML-KEM, correct? I think we should use the same terminology for both.",
              "createdAt": "2023-08-28T10:33:59Z",
              "updatedAt": "2023-08-28T12:10:08Z"
            },
            {
              "originalPosition": 872,
              "body": "Also breaks like\r\n```\r\nML-\r\nDSA-65\r\n```\r\n(there is plenty of space available)",
              "createdAt": "2023-08-28T10:37:53Z",
              "updatedAt": "2023-08-28T12:10:08Z"
            },
            {
              "originalPosition": 1314,
              "body": "larger signature generation time -> **longer** signature generation time?",
              "createdAt": "2023-08-28T11:00:58Z",
              "updatedAt": "2023-08-28T12:10:08Z"
            },
            {
              "originalPosition": 1114,
              "body": "\"associated hash\" -> \"associated hash algorithm\"",
              "createdAt": "2023-08-28T11:26:00Z",
              "updatedAt": "2023-08-28T12:10:08Z"
            },
            {
              "originalPosition": 1116,
              "body": "If I understand it correctly, your goal is to describe how the hash is computed (reference to OpenPGP spec) and what the additional requirements are from our draft.\r\n\r\nI would make it more explicit and clear:\r\n\r\n> SLH-DSA signatures MUST use the associated hash algorithm as specified in\r\n> {{tab-slhdsa-hash}}.\r\n> The digest of the signature data is computed according to {{I-D.ietf-openpgp-crypto-refresh}} Section 5.2.4.",
              "createdAt": "2023-08-28T11:29:02Z",
              "updatedAt": "2023-08-28T12:10:08Z"
            },
            {
              "originalPosition": 884,
              "body": "see comment in other signature data digest section",
              "createdAt": "2023-08-28T11:34:21Z",
              "updatedAt": "2023-08-28T12:10:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fQzIL",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T12:55:53Z",
          "updatedAt": "2023-08-28T12:55:54Z",
          "comments": [
            {
              "originalPosition": 212,
              "body": "I think the reason why we phrased it differently is because the security of ML-DSA bases on different problems (MLWE and MSIS). See \u00a73.2 of FIPS-204. I guess there is space for optimization.",
              "createdAt": "2023-08-28T12:55:53Z",
              "updatedAt": "2023-08-28T12:55:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fQ0XY",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T12:58:45Z",
          "updatedAt": "2023-08-28T12:58:45Z",
          "comments": [
            {
              "originalPosition": 605,
              "body": "Good point, I opted for the first suggestion. See [6095c0f](https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/6095c0f84f52a68f60f637c592545d909eccedf4).",
              "createdAt": "2023-08-28T12:58:45Z",
              "updatedAt": "2023-08-28T13:45:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fQ0el",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T12:59:00Z",
          "updatedAt": "2023-08-28T12:59:00Z",
          "comments": [
            {
              "originalPosition": 140,
              "body": "Good catch",
              "createdAt": "2023-08-28T12:59:00Z",
              "updatedAt": "2023-08-28T12:59:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fQ22L",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T13:04:29Z",
          "updatedAt": "2023-08-28T13:04:29Z",
          "comments": [
            {
              "originalPosition": 697,
              "body": "Good catch. Changed `eccSecretKey` to `eccPrivateKey`\r\n\r\nAnd yes, I adopted the terminology from ML-KEM specification. This is a remark I forgot to write in the PR description above. We should discuss that. I introduced this terminology in \u00a75.1.2, saying that the encapsulation key is public and the decapsulation key is private keying material. I think since we have composite public and private keys which are composed of the ECC private/public and the ML-KEM Decapsulation/Encapsulation keys it does no harm to adopt the terminology of NIST.",
              "createdAt": "2023-08-28T13:04:29Z",
              "updatedAt": "2023-08-28T13:04:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fQ3Kc",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T13:05:12Z",
          "updatedAt": "2023-08-28T13:05:13Z",
          "comments": [
            {
              "originalPosition": 1314,
              "body": "See [6095c0f](https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/6095c0f84f52a68f60f637c592545d909eccedf4).",
              "createdAt": "2023-08-28T13:05:12Z",
              "updatedAt": "2023-08-28T13:44:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fQ4sz",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T13:08:46Z",
          "updatedAt": "2023-08-28T13:08:46Z",
          "comments": [
            {
              "originalPosition": 1116,
              "body": "I just turned the sentence around. I want to say that the signature data digest before the signature algorithm must be done via a hash algorithm from the table. Aron called this \"binding hashes\". Is it better now? If yes, you can resolve the conversation.\r\n\r\n> Signature data is digested prior to signing operations, see\r\n{{I-D.ietf-openpgp-crypto-refresh}} Section 5.2.4. SLH-DSA signatures MUST use\r\nthe associated hash algorithm as specified in {{tab-slhdsa-hash}} for the\r\nsignature data digest. Signatures using other hash algorithms MUST be\r\nconsidered invalid.",
              "createdAt": "2023-08-28T13:08:46Z",
              "updatedAt": "2023-08-28T13:26:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fQ9k7",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T13:19:30Z",
          "updatedAt": "2023-08-28T13:19:30Z",
          "comments": [
            {
              "originalPosition": 884,
              "body": "Adopted the turnaround from above. Better? If yes, you can resolve the conversation.",
              "createdAt": "2023-08-28T13:19:30Z",
              "updatedAt": "2023-08-28T13:26:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fRJCj",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T13:43:53Z",
          "updatedAt": "2023-08-28T13:43:54Z",
          "comments": [
            {
              "originalPosition": 1114,
              "body": "See [6095c0f](https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/6095c0f84f52a68f60f637c592545d909eccedf4).",
              "createdAt": "2023-08-28T13:43:53Z",
              "updatedAt": "2023-08-28T13:43:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fRJaJ",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T13:44:40Z",
          "updatedAt": "2023-08-28T13:44:43Z",
          "comments": [
            {
              "originalPosition": 872,
              "body": "See [f5aeef2](https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/f5aeef293a70dd6cae838925b71e82e4f6e5e5b9).",
              "createdAt": "2023-08-28T13:44:43Z",
              "updatedAt": "2023-08-28T13:44:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fRJp5",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T13:45:10Z",
          "updatedAt": "2023-08-28T13:45:11Z",
          "comments": [
            {
              "originalPosition": 503,
              "body": "See [f5aeef2](https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/f5aeef293a70dd6cae838925b71e82e4f6e5e5b9).",
              "createdAt": "2023-08-28T13:45:11Z",
              "updatedAt": "2023-08-28T13:45:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fj8eA",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-30T18:14:56Z",
          "updatedAt": "2023-08-30T18:14:56Z",
          "comments": [
            {
              "originalPosition": 768,
              "body": "I don't think it's necessary, but makes the dev life slightly easier IMO",
              "createdAt": "2023-08-30T18:14:56Z",
              "updatedAt": "2023-08-30T18:14:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fj-FV",
          "commit": {
            "abbreviatedOid": "16f5b8b"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-30T18:19:35Z",
          "updatedAt": "2023-08-30T18:41:21Z",
          "comments": [
            {
              "originalPosition": 406,
              "body": "```suggestion\r\nTo instantiate `ECC-KEM`, one must select a parameter set from\r\n```",
              "createdAt": "2023-08-30T18:19:35Z",
              "updatedAt": "2023-08-30T18:41:21Z"
            },
            {
              "originalPosition": 505,
              "body": "```suggestion\r\nAlgorithm ID reference | ML-KEM      | Public key | Secret key | Ciphertext | Key share\r\n----------------------:| ----------- | ---------- | ---------- | ---------- | ---------\r\n29, 31, 33             | ML-KEM-768  | 1184       | 2400       | 1088       | 32\r\n30, 32, 34             | ML-KEM-1024 | 1568       | 3168       | 1568       | 32\r\n```",
              "createdAt": "2023-08-30T18:22:12Z",
              "updatedAt": "2023-08-30T18:41:21Z"
            },
            {
              "originalPosition": 558,
              "body": "Why changing `X*` to `Curve*`?",
              "createdAt": "2023-08-30T18:24:12Z",
              "updatedAt": "2023-08-30T18:41:21Z"
            },
            {
              "originalPosition": 877,
              "body": "```suggestion\r\nAlgorithm ID reference | ML-DSA    | Public key | Secret key | Signature value\r\n----------------------:| --------- | -----------| ---------- | ---------------\r\n35, 37, 39             | ML-DSA-65 | 1952       | 4000       | 3293\r\n36, 38, 40             | ML-DSA-87 | 2592       | 4864       | 4595\r\n```",
              "createdAt": "2023-08-30T18:31:56Z",
              "updatedAt": "2023-08-30T18:41:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fmsUx",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T05:38:06Z",
          "updatedAt": "2023-08-31T05:38:06Z",
          "comments": [
            {
              "originalPosition": 768,
              "body": "So keep it as it was (listing the IDs)?\r\nIt's ok for me.",
              "createdAt": "2023-08-31T05:38:06Z",
              "updatedAt": "2023-08-31T05:38:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fmtoD",
          "commit": {
            "abbreviatedOid": "16f5b8b"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T05:44:17Z",
          "updatedAt": "2023-08-31T05:44:18Z",
          "comments": [
            {
              "originalPosition": 558,
              "body": "Because the column lists the curves associated to the algorithm. X* denotes algorithms/functions and Curve* denotes the curves. I felt it should be consistent.",
              "createdAt": "2023-08-31T05:44:18Z",
              "updatedAt": "2023-08-31T05:44:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fmuCC",
          "commit": {
            "abbreviatedOid": "16f5b8b"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T05:46:05Z",
          "updatedAt": "2023-08-31T05:46:06Z",
          "comments": [
            {
              "originalPosition": 877,
              "body": "@TJ-91 suggested to insert those hyphen characters in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60#discussion_r1307226240 in order to avoid unwanted line breaks. Is it not breaking weirdly on your side? See also https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60#discussion_r1307254276.",
              "createdAt": "2023-08-31T05:46:05Z",
              "updatedAt": "2023-08-31T05:47:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fmuYE",
          "commit": {
            "abbreviatedOid": "16f5b8b"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T05:47:42Z",
          "updatedAt": "2023-08-31T05:47:43Z",
          "comments": [
            {
              "originalPosition": 505,
              "body": "See https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60#discussion_r1311121166",
              "createdAt": "2023-08-31T05:47:43Z",
              "updatedAt": "2023-08-31T05:47:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fm9UD",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T06:43:36Z",
          "updatedAt": "2023-08-31T06:43:36Z",
          "comments": [
            {
              "originalPosition": 768,
              "body": "Yes, as much as we list the IDs in the hash binding tables",
              "createdAt": "2023-08-31T06:43:36Z",
              "updatedAt": "2023-08-31T06:43:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fnE__",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T07:06:21Z",
          "updatedAt": "2023-08-31T07:06:21Z",
          "comments": [
            {
              "originalPosition": 503,
              "body": "Hmm, I see, but this breaks the plaintext version\r\n![image](https://github.com/openpgp-pqc/draft-openpgp-pqc/assets/9117367/c4dae787-eff3-4891-b86d-567370901033)\r\n",
              "createdAt": "2023-08-31T07:06:21Z",
              "updatedAt": "2023-08-31T07:06:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fnSIY",
          "commit": {
            "abbreviatedOid": "16f5b8b"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T07:40:02Z",
          "updatedAt": "2023-08-31T07:40:03Z",
          "comments": [
            {
              "originalPosition": 558,
              "body": "I agree with Stavros, at least as I understand it, the convention is to use `Curve*` to describe the underlying curve itself and `X*` for ECDH.\r\nHowever, I think this is commonly confused and especially `Ed*` and `Curve*` is often used synonymously from what I've seen.",
              "createdAt": "2023-08-31T07:40:02Z",
              "updatedAt": "2023-08-31T07:40:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fnxBt",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T08:47:18Z",
          "updatedAt": "2023-08-31T08:47:18Z",
          "comments": [
            {
              "originalPosition": 503,
              "body": "Breaking in the first column is still better than breaking the name in the second column, IMO, since it's an enumeration where it's more natural.\r\n\r\nAgain, there obviously is enough space in the column. We can force the layout there too, but I'm not sure how much we should fiddle around with this. Personally I'd be fine with how it's displayed in your screenshot.",
              "createdAt": "2023-08-31T08:47:18Z",
              "updatedAt": "2023-08-31T08:47:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fn1dU",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T08:57:13Z",
          "updatedAt": "2023-08-31T08:57:13Z",
          "comments": [
            {
              "originalPosition": 503,
              "body": "I just thought about one issue with this approach. What if a developer uses copy&paste from the draft? The two symbols `-` and `&#x2011;` are not distinguishable when merely looking at them. This can cause unexpected and hard to find bugs if the strings are copied into source code and a string comparison is done.\r\n\r\nPerhaps it's better to just let the tools define the layout and live with it, even though we disgagree at some places. Maybe there is another way to give the tools a hint for not breaking at specific places. ",
              "createdAt": "2023-08-31T08:57:13Z",
              "updatedAt": "2023-08-31T08:57:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fobmB",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-31T10:21:17Z",
          "updatedAt": "2023-08-31T10:21:17Z",
          "comments": [
            {
              "originalPosition": 212,
              "body": "Thanks for the clarification. We could for example write\r\n\r\n```suggestion\r\nhardness of solving the Learning With Errors problem and a variant of the Short Integer Solution problem in module lattices (MLWE and SelfTargetMSIS). Accordingly, this\r\n```",
              "createdAt": "2023-08-31T10:21:17Z",
              "updatedAt": "2023-09-11T12:32:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fvCGi",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-01T03:45:44Z",
          "updatedAt": "2023-09-01T03:45:44Z",
          "comments": [
            {
              "originalPosition": 768,
              "body": "Ok, then lets drop this suggestion.",
              "createdAt": "2023-09-01T03:45:44Z",
              "updatedAt": "2023-09-01T03:45:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fvCaq",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-01T03:48:37Z",
          "updatedAt": "2023-09-01T03:48:37Z",
          "comments": [
            {
              "originalPosition": 212,
              "body": "@sehlen Are you fine with this formulation? FIPS-204 states that security goes back to a non-standard version of MSIS.",
              "createdAt": "2023-09-01T03:48:37Z",
              "updatedAt": "2023-09-01T03:48:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fvDAA",
          "commit": {
            "abbreviatedOid": "16f5b8b"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-01T03:53:36Z",
          "updatedAt": "2023-09-01T03:53:37Z",
          "comments": [
            {
              "originalPosition": 406,
              "body": "Applied inline code marking also to ML-KEM in the anlagous sentence. See https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/fa1b1284d6bea9ceb1dafbbf470305744c0f0fe7",
              "createdAt": "2023-09-01T03:53:36Z",
              "updatedAt": "2023-09-01T03:53:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fvFTp",
          "commit": {
            "abbreviatedOid": "16f5b8b"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-01T04:11:28Z",
          "updatedAt": "2023-09-01T04:11:28Z",
          "comments": [
            {
              "originalPosition": 877,
              "body": "I opted for Aron's suggestion to avoid any kind of special character encodings. I think that ends up messy. Let it break as it breaks.",
              "createdAt": "2023-09-01T04:11:28Z",
              "updatedAt": "2023-09-01T04:11:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85fvFb6",
          "commit": {
            "abbreviatedOid": "16f5b8b"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-01T04:12:31Z",
          "updatedAt": "2023-09-01T04:12:32Z",
          "comments": [
            {
              "originalPosition": 505,
              "body": "Let it break as it break, no special character encodings.",
              "createdAt": "2023-09-01T04:12:31Z",
              "updatedAt": "2023-09-01T04:12:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gAGRR",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-05T09:31:50Z",
          "updatedAt": "2023-09-05T09:31:51Z",
          "comments": [
            {
              "originalPosition": 1116,
              "body": "Is \"signature data\" really the correct term for the data that is signed? To me it seems it could also be understood as the data that represents the signature. Maybe we should better call it \"to-be-signed data\"?",
              "createdAt": "2023-09-05T09:31:51Z",
              "updatedAt": "2023-09-05T09:31:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gAKKp",
          "commit": {
            "abbreviatedOid": "71948bf"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-05T09:40:33Z",
          "updatedAt": "2023-09-05T09:40:33Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "I wouldn't completely remove this editorial note yet, but only adapt it to the new situation that now we have NIST drafts for the algorithms. But it is still relevant to inform readers that these are only drafts and still subject to change.",
              "createdAt": "2023-09-05T09:40:33Z",
              "updatedAt": "2023-09-05T09:40:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gAOKU",
          "commit": {
            "abbreviatedOid": "71948bf"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-05T09:49:48Z",
          "updatedAt": "2023-09-05T09:50:09Z",
          "comments": [
            {
              "originalPosition": 784,
              "body": "I am not sure about the change to \"encapsulation/decapsulation key\" from \"public/private key\". Otherwise, in order to be consistent, we would have to eliminate all uses of \"public/private key\" and replace it with \"encryption/decryption key\" or \"verification/signature key\". Does anyone see a specific reason why KEM keys should be handled differently in this respect?",
              "createdAt": "2023-09-05T09:49:48Z",
              "updatedAt": "2023-09-05T09:50:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gjAw-",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T11:42:57Z",
          "updatedAt": "2023-09-11T11:42:58Z",
          "comments": [
            {
              "originalPosition": 1116,
              "body": "As @fluppe2 pointed out, the above use of the term \"signature data\" is consistent with the [crypto refresh](https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-10.html#section-5.2.4). ",
              "createdAt": "2023-09-11T11:42:57Z",
              "updatedAt": "2023-09-11T11:42:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gjBge",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T11:43:57Z",
          "updatedAt": "2023-09-11T11:43:58Z",
          "comments": [
            {
              "originalPosition": 1116,
              "body": "I suggest to add a clarifying subclause \"for the digest of the signature data (data to be signed)\"",
              "createdAt": "2023-09-11T11:43:57Z",
              "updatedAt": "2023-09-11T11:43:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gjepY",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T12:49:03Z",
          "updatedAt": "2023-09-11T12:49:04Z",
          "comments": [
            {
              "originalPosition": 697,
              "body": "Team agrees on:\r\n- eccPublicKey and eccSecretKey\r\n- mlkemPublicKey and mlkemSecretKey\r\n- mldsaPublicKey and mldsaSecretKey\r\n- slhdsaPublicKey and slhdsaSecretKey\r\n- ecdsaPublicKey and ecdsaSecretKey\r\n- eddsaPublicKey and eddsaSecretKey\r\n\r\nTodo @fluppe2 ",
              "createdAt": "2023-09-11T12:49:04Z",
              "updatedAt": "2023-09-11T13:25:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gjnVv",
          "commit": {
            "abbreviatedOid": "59cc6e6"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T13:06:04Z",
          "updatedAt": "2023-09-11T13:06:04Z",
          "comments": [
            {
              "originalPosition": 888,
              "body": "```suggestion\r\nSignature data (i.e. the data to be signed) is digested prior to signing operations, see\r\n```\r\nAs discussed in the team during meeting on 2023-09-11.",
              "createdAt": "2023-09-11T13:06:04Z",
              "updatedAt": "2023-09-11T13:07:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gjpC5",
          "commit": {
            "abbreviatedOid": "59cc6e6"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T13:09:01Z",
          "updatedAt": "2023-09-11T13:09:03Z",
          "comments": [
            {
              "originalPosition": 1124,
              "body": "```suggestion\r\nSignature data (i.e. the data to be signed) is digested prior to signing operations, see\r\n```\r\nAs discussed in team on 2023-09-11.",
              "createdAt": "2023-09-11T13:09:02Z",
              "updatedAt": "2023-09-11T13:09:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gjqoT",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T13:12:00Z",
          "updatedAt": "2023-09-11T13:12:00Z",
          "comments": [
            {
              "originalPosition": 1116,
              "body": "Done in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/40e4f3ca65445b9482aff64bd66a65a1445fb1b5 and https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/994f7d670e7ae99c7d1d0e8c71f73273fb8b4ada",
              "createdAt": "2023-09-11T13:12:00Z",
              "updatedAt": "2023-09-11T13:12:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gjsAh",
          "commit": {
            "abbreviatedOid": "71948bf"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T13:14:32Z",
          "updatedAt": "2023-09-11T13:14:33Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "Team decision: Keep the note but switch from \"NIST submission\" to \"NIST draft standards\".\r\n\r\nTodo @falko-strenzke ",
              "createdAt": "2023-09-11T13:14:33Z",
              "updatedAt": "2023-09-11T13:14:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gjzvz",
          "commit": {
            "abbreviatedOid": "6e710c0"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T13:27:42Z",
          "updatedAt": "2023-09-11T13:27:43Z",
          "comments": [
            {
              "originalPosition": 697,
              "body": "Done in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/0265792587939680a31b42e14a829183b9b80a1a",
              "createdAt": "2023-09-11T13:27:42Z",
              "updatedAt": "2023-09-11T13:27:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gkhDK",
          "commit": {
            "abbreviatedOid": "0265792"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T14:43:25Z",
          "updatedAt": "2023-09-11T14:43:25Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "This is my proposal for the updated note:\r\n``` \r\n\\[Note to the reader: This specification refers to the NIST PQC standards drafts\r\nDraft FIPS 203, Draft FIPS 204, and Draft FIPS 205 as if it were a final\r\nspecification. This is a temporary solution until the final versions of these\r\ndocuments are available. The goal is to provide a sufficiently precise\r\nspecification of the algorithms already at the draft stage of this\r\nspecification, so that it is possible for implementers to create interoperable\r\nimplementations. Furthermore, we want to point out that, depending on possible\r\nfuture changes to the draft standards by NIST, this specification may be updated\r\nas soon as corresponding information becomes available.\\]\r\n```\r\nMaybe we should indicate that we are referring to NIST **Drafts** also in the references by prefixing of postfixing the title either with \"FIPS 203 (Initial Public Draft)\" etc. as it is on the NIST web page of \"FIPS 203 (Draft)\" as it is in the PDF of the draft.\r\n\r\n@fluppe2 Do you want to include the new version of the note into the PR (possibly after revising it if necessary from your point of view)? This is maybe easier than creating a separate PR or me working in this PR.",
              "createdAt": "2023-09-11T14:43:25Z",
              "updatedAt": "2023-09-11T14:43:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85goTL7",
          "commit": {
            "abbreviatedOid": "71948bf"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-12T03:38:40Z",
          "updatedAt": "2023-09-12T03:38:40Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "Done in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/6193c31b7ac32c11b9183d77ce7721f15aeae478",
              "createdAt": "2023-09-12T03:38:40Z",
              "updatedAt": "2023-09-12T03:38:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gpaL5",
          "commit": {
            "abbreviatedOid": "e69fe9d"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-12T07:03:26Z",
          "updatedAt": "2023-09-12T07:03:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85gptw2",
          "commit": {
            "abbreviatedOid": "e69fe9d"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-12T07:49:20Z",
          "updatedAt": "2023-09-12T09:12:17Z",
          "comments": [
            {
              "originalPosition": 225,
              "body": "```suggestion\r\nhardness of solving the Learning With Errors problem and a variant of the Short\r\nInteger Solution problem in module lattices (MLWE and SelfTargetMSIS). \r\nAccordingly, this specification only defines ML-DSA in composite combination \r\nwith ECC-based signature schemes.\r\n```",
              "createdAt": "2023-09-12T07:49:21Z",
              "updatedAt": "2023-09-12T09:12:17Z"
            },
            {
              "originalPosition": 784,
              "body": "```suggestion\r\n - A fixed-length octet string containing the ML-KEM public key, whose\r\n```\r\n\r\nIf we reverted to public/secret here we need to change it as well IMO",
              "createdAt": "2023-09-12T08:54:33Z",
              "updatedAt": "2023-09-12T09:12:17Z"
            },
            {
              "originalPosition": 826,
              "body": "```suggestion\r\n - A fixed-length octet string containing the ML-KEM secret key, whose\r\n```",
              "createdAt": "2023-09-12T08:54:46Z",
              "updatedAt": "2023-09-12T09:12:17Z"
            },
            {
              "originalPosition": 889,
              "body": "```suggestion\r\n[FIPS-204] is used. That is, to verify with ML-DSA the following operation is\r\n```",
              "createdAt": "2023-09-12T08:55:33Z",
              "updatedAt": "2023-09-12T09:12:17Z"
            },
            {
              "originalPosition": 1166,
              "body": "```suggestion\r\nSignature data (i.e. the data to be signed) is digested prior to signing\r\noperations, see {{I-D.ietf-openpgp-crypto-refresh}} Section 5.2.4. SLH-DSA\r\nsignatures MUST use the associated hash algorithm as specified in\r\n{{tab-slhdsa-hash}} for the signature data digest. Signatures using other hash\r\nalgorithms MUST be considered invalid.\r\n```",
              "createdAt": "2023-09-12T09:03:09Z",
              "updatedAt": "2023-09-12T09:12:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gqsGH",
          "commit": {
            "abbreviatedOid": "e69fe9d"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-12T09:43:00Z",
          "updatedAt": "2023-09-12T09:43:00Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "```suggestion\r\nnew set: SLH-DSA standalone and the two ML-* as composite with ECC-based KEM and\r\n```\r\n\r\nUsing regular expression like syntax in normal text is not necessarily common or intuitive to readers. Adding the words \"the two\" makes it at least clearer that this is refering to two schemes and not denoting a specific one.",
              "createdAt": "2023-09-12T09:43:00Z",
              "updatedAt": "2023-09-12T09:43:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85grM37",
          "commit": {
            "abbreviatedOid": "e69fe9d"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-12T10:36:05Z",
          "updatedAt": "2023-09-12T10:36:05Z",
          "comments": [
            {
              "originalPosition": 1342,
              "body": "Hmm, I think regarding execution time of ML-DSA the statement could be held up, since according to our comparison it faster then conventional curves but considerably slower than EdDSA.\r\n\r\nBut with respect to space requirements, I don't think the statement can be held: For example for 128-bit security, Dilithium signatures are about 37x larger than EC signatures, while SLH-DSA small parameters only bring another factor of 3. \r\n\r\nIf we compare ML-DSA with RSA (3072 bit), then ML-DSA signatures are 6x larger.\r\n\r\n```suggestion\r\nexecution time requirements that is close to that of traditional ECC signature schemes.\r\nRegarding the size of signatures and public keys, though, ML-DSA has far greater requirements than traditional schemes like EC-based or even RSA\r\n```\r\n",
              "createdAt": "2023-09-12T10:36:05Z",
              "updatedAt": "2023-09-12T10:36:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85grNoS",
          "commit": {
            "abbreviatedOid": "e69fe9d"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-12T10:37:59Z",
          "updatedAt": "2023-09-12T10:38:00Z",
          "comments": [
            {
              "originalPosition": 1348,
              "body": "```suggestion\r\neven greater than those of\r\n```",
              "createdAt": "2023-09-12T10:38:00Z",
              "updatedAt": "2023-09-12T10:38:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85grN3M",
          "commit": {
            "abbreviatedOid": "e69fe9d"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-12T10:38:33Z",
          "updatedAt": "2023-09-12T10:38:33Z",
          "comments": [
            {
              "originalPosition": 1347,
              "body": "```suggestion\r\nsignature generation as well as space requirements for the signature that are\r\n```",
              "createdAt": "2023-09-12T10:38:33Z",
              "updatedAt": "2023-09-12T10:38:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gr7P1",
          "commit": {
            "abbreviatedOid": "e023d1c"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-12T12:28:36Z",
          "updatedAt": "2023-09-12T12:28:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 62,
      "id": "PR_kwDOIrmZ-85aA1lT",
      "title": "proposed altered text regarding description of composite data structures",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/62",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Note that the term \"signature data\" [in the crypto refresh](https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-10.html#section-5.2.4) is understood as the data to be signed. Thus I rephrased this term here. There are some further minor editorial changes as well.",
      "createdAt": "2023-09-11T11:40:04Z",
      "updatedAt": "2023-09-12T06:54:00Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "ec33e5de4313f97f35c0ca7b69099fe71ed84f41",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "signature-data",
      "headRefOid": "a2fdec7b75bc1087abfcd977cf1157b9ad9ac57f",
      "closedAt": "2023-09-12T06:53:59Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "To avoid rebasing, I adressed the re-wording in #60 (see https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/60/commits/ffbf99672294d5920a02db58b5e9adadbc8fa113). I think we can close this PR then.",
          "createdAt": "2023-09-12T03:58:23Z",
          "updatedAt": "2023-09-12T03:58:23Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, then I close this one. ",
          "createdAt": "2023-09-12T06:53:59Z",
          "updatedAt": "2023-09-12T06:53:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85gjT7D",
          "commit": {
            "abbreviatedOid": "fba6bd1"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T12:26:07Z",
          "updatedAt": "2023-09-11T12:26:07Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nsignatures  and an implementation MUST successfully validate both signatures to conclude\r\n```",
              "createdAt": "2023-09-11T12:26:07Z",
              "updatedAt": "2023-09-11T12:26:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 63,
      "id": "PR_kwDOIrmZ-85aJWgD",
      "title": "Add consideration about security level for hashes",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/63",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-09-12T16:00:56Z",
      "updatedAt": "2023-09-18T07:35:51Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "f347f9c81c118ffe93dbfa63908b39cbc80fcf11",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "hash-security-level",
      "headRefOid": "9042899210344c59b8bf474bba034b2dd46edd6c",
      "closedAt": "2023-09-18T07:35:50Z",
      "mergedAt": "2023-09-18T07:35:50Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "8ab9663c9a3d9081bdc5600be1ac2d65cbd31ffb"
      },
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> I would move that paragraph to the one where ML-DSA is mentioned explicitely as it does not apply to our choices for SLH-DSA. Also I do not think that we did that on purpose but because of lacking support of SHA3-384 and now we are trying to save our a**es.\r\n> \r\n> Proposal (as I do not know how to submit it as a suggestion over all those lines):\r\n> \r\n> \"ML-DSA internally uses a SHAKE256 digest, therefore we require SHA3 in the ML-DSA + ECC signature packet, see {{mldsa-sig-data-digest}}. Note that we bind a NIST security category 2 hash function to a signature algorithm that falls into NIST security category 3. This does not constitute a security bottleneck: because of the random salt that is prepended to the data digest, the hardness assumption is not collision resistance but second-preimage resistance.\"\r\n\r\nI aggree with this, also moving it up by one paragraph is necessary as @fluppe2 suggested.",
          "createdAt": "2023-09-14T06:35:32Z",
          "updatedAt": "2023-09-14T06:35:32Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "I would also add, that the security argument (i.e. shift from collision to 2nd preimage resistance) is only valid if the random salt is unpredictable for an adversary. Otherwise we are basically back to collision resistance.\r\n\r\nSo let me alter my proposal slightly:\r\n\r\n\"ML-DSA internally uses a SHAKE256 digest, therefore we require SHA3 in the ML-DSA + ECC signature packet, see {{mldsa-sig-data-digest}}. Note that we bind a NIST security category 2 hash function to a signature algorithm that falls into NIST security category 3. This does not constitute a security bottleneck: because of an unpredictable random salt that is prepended to the digested data, the hardness assumption is not collision resistance but second-preimage resistance.\"\r\n\r\nOr do you have a better idea how to (at least) mention the necessary assumption on the unpredictability of the random salt?",
          "createdAt": "2023-09-14T07:27:52Z",
          "updatedAt": "2023-09-14T07:27:52Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> \"[...] because of an unpredictable random salt that is prepended to the digested data, the hardness assumption is not collision resistance but second-preimage resistance.\"\r\n\r\nMaybe alter this subclause slightly like this: \"because of *the* unpredictable random salt that is prepended to the digested data *in v6 signatures*, the hardness assumption is not collision resistance but second-preimage resistance.\"",
          "createdAt": "2023-09-14T07:37:03Z",
          "updatedAt": "2023-09-14T07:37:03Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe we should stress the fact that unpredictability is a necessary condition for this argument to apply.\r\n\r\nProposal (with respect to @falko-strenzke):\r\n\r\n\"because of the random salt that is prepended to the digested data in v6 signatures, the hardness assumption is not collision resistance but second-preimage resistance. However, for this argument to apply the random salt must be unpredictable by an adversary.\"\r\n",
          "createdAt": "2023-09-14T10:35:07Z",
          "updatedAt": "2023-09-14T10:35:07Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> \"because of the random salt that is prepended to the digested data in v6 signatures, the hardness assumption is not collision resistance but second-preimage resistance. However, for this argument to apply the random salt must be unpredictable by an adversary.\"\r\n\r\nI am not sure why you want to stress it that much. The word \"unpredictable\" now occurs two times, do you really think this is necessary? I can also hardly see how someone could come up with an implementation that outputs predictable salts and claim that they are random in the first place. At least in my understanding, unpredictability is implied in randomness. But in any case we are mentioning \"unpredictability\" already, but I think one time is enough.",
          "createdAt": "2023-09-14T10:49:26Z",
          "updatedAt": "2023-09-14T10:49:26Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm fine with both approaches (not stressing and stressing it). Stressing it I think (or hope) reminds people that they should use good random numbers here and not say a salt is not so important.",
          "createdAt": "2023-09-14T11:59:48Z",
          "updatedAt": "2023-09-14T11:59:48Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'm fine with both approaches (not stressing and stressing it). Stressing it I think (or hope) reminds people that they should use good random numbers here and not say a salt is not so important.\r\n\r\nMaybe then it makes sense to add a section under \"Security Considerations\" that addresses random number generation specifically which also mentions the importance of a \"truely\" random salt.",
          "createdAt": "2023-09-14T12:29:40Z",
          "updatedAt": "2023-09-14T12:29:40Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "> Maybe then it makes sense to add a section under \"Security Considerations\" that addresses random number generation specifically which also mentions the importance of a \"truely\" random salt.\r\n\r\nThis is already in the OpenPGP spec:\r\n```\r\n\r\n13.10.  Random Number Generation and Seeding\r\n\r\n   OpenPGP requires a cryptographically secure pseudorandom number\r\n   generator (CSPRNG).  In most cases, the operating system provides an\r\n   appropriate facility such as a getrandom() syscall, which should be\r\n   used absent other (for example, performance) concerns...\r\n```",
          "createdAt": "2023-09-15T15:03:52Z",
          "updatedAt": "2023-09-15T15:03:52Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I've applied the changes @falko-strenzke and @fluppe2, but without the repeated `unpredictable`. There are many significant attacks that can be carried out in OpenPGP if we drop the assumption of a good CSPRNG and not respecting that security consideration is an expensive mistake already.",
          "createdAt": "2023-09-15T17:57:12Z",
          "updatedAt": "2023-09-15T17:57:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85gyF46",
          "commit": {
            "abbreviatedOid": "583228a"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-13T05:56:34Z",
          "updatedAt": "2023-09-13T06:01:58Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nNote that in the specification we bind NIST security category 2 hash functions to\r\n```\r\nNIST calls this \"category\" or \"security category\" in the ML-* drafts.\r\n\r\nI propose to turn the order around to say that we are binding hash algorithms to signature algorithms, not the other way around.",
              "createdAt": "2023-09-13T05:56:35Z",
              "updatedAt": "2023-09-13T06:01:58Z"
            },
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nthe signature algorithms that fall into NIST security category 3. This is done on purpose, since by the random salt that is prepended to the\r\n```",
              "createdAt": "2023-09-13T05:59:29Z",
              "updatedAt": "2023-09-13T06:01:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gzpq0",
          "commit": {
            "abbreviatedOid": "dced079"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-13T09:51:37Z",
          "updatedAt": "2023-09-13T09:51:37Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nNote that in the specification we bind NIST security category 2 hash functions\r\nto the signature algorithms that fall into NIST security category 3. This is\r\ndone on purpose: because of the random salt that is prepended to the data\r\ndigest, the hardness assumption is not collision resistance but second-preimage\r\nresistance, therefore this limitation does not constitute a security bottleneck.\r\n```\r\n\r\nReflow + small rewording",
              "createdAt": "2023-09-13T09:51:37Z",
              "updatedAt": "2023-09-13T09:52:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85gzuc5",
          "commit": {
            "abbreviatedOid": "8773418"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-13T10:02:02Z",
          "updatedAt": "2023-09-13T10:02:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85g6s6P",
          "commit": {
            "abbreviatedOid": "8773418"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I would move that paragraph to the one where ML-DSA is mentioned explicitely as it does not apply to our choices for SLH-DSA. Also I do not think that we did that on purpose but because of lacking support of SHA3-384 and now we are trying to save our a**es.\r\n\r\nProposal (as I do not know how to submit it as a suggestion over all those lines):\r\n\r\n\"ML-DSA internally uses a SHAKE256 digest, therefore we require SHA3 in the ML-DSA + ECC signature packet, see {{mldsa-sig-data-digest}}. Note that we bind a NIST security category 2 hash function to a signature algorithm that falls into NIST security category 3. This does not constitute a security bottleneck: because of the random salt that is prepended to the data digest, the hardness assumption is not collision resistance but second-preimage resistance.\"",
          "createdAt": "2023-09-14T06:27:09Z",
          "updatedAt": "2023-09-14T06:27:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85hJkuZ",
          "commit": {
            "abbreviatedOid": "9042899"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I removed a doubled sentence in https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/63/commits/9042899210344c59b8bf474bba034b2dd46edd6c.",
          "createdAt": "2023-09-16T04:13:35Z",
          "updatedAt": "2023-09-16T04:13:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 64,
      "id": "PR_kwDOIrmZ-85dCBym",
      "title": "Add changelog",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/64",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-17T15:22:21Z",
      "updatedAt": "2023-10-19T11:11:58Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "8ab9663c9a3d9081bdc5600be1ac2d65cbd31ffb",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "add-changelog",
      "headRefOid": "04cf9a3f47906f23a4bd0d52d1411dd5e4a624b3",
      "closedAt": "2023-10-19T11:11:58Z",
      "mergedAt": "2023-10-19T11:11:58Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "5a432bee93d4f882ac52d7949c30cb0960a7b113"
      },
      "comments": [
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "When did we allow KEMs for v4? Maybe this is also nice to see in the changelog.",
          "createdAt": "2023-10-18T04:53:30Z",
          "updatedAt": "2023-10-18T04:53:30Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> When did we allow KEMs for v4? Maybe this is also nice to see in the changelog.\r\n\r\nThat must have been in -02 since for that version it is listed that we allow PKESKv3 with ML-KEM composites. Allowing it for v4 keys was done at the same time.",
          "createdAt": "2023-10-18T07:01:38Z",
          "updatedAt": "2023-10-18T07:01:38Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I just listed v3 PKESK, but will add V4 keys",
          "createdAt": "2023-10-18T07:57:02Z",
          "updatedAt": "2023-10-18T07:57:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85kX8r4",
          "commit": {
            "abbreviatedOid": "db222c8"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T04:52:09Z",
          "updatedAt": "2023-10-18T04:52:10Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "```suggestion\r\n- Added the ephemeral and public key in the ECC key derivation function.\r\n```",
              "createdAt": "2023-10-18T04:52:09Z",
              "updatedAt": "2023-10-18T04:52:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85kZVB1",
          "commit": {
            "abbreviatedOid": "db222c8"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T07:58:01Z",
          "updatedAt": "2023-10-18T07:58:01Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "```suggestion\r\n- Allowed v3 PKESKs and v4 keys with PQ algorithms, limiting them to AES\r\n  symmetric ciphers\r\n```",
              "createdAt": "2023-10-18T07:58:01Z",
              "updatedAt": "2023-10-18T07:58:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85kZXWm",
          "commit": {
            "abbreviatedOid": "25dd25b"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T08:00:53Z",
          "updatedAt": "2023-10-18T08:00:53Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "```suggestion\r\n  symmetric ciphers.\r\n```",
              "createdAt": "2023-10-18T08:00:53Z",
              "updatedAt": "2023-10-18T08:00:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85kbGbu",
          "commit": {
            "abbreviatedOid": "04cf9a3"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-18T11:37:48Z",
          "updatedAt": "2023-10-18T11:37:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85kil0d",
          "commit": {
            "abbreviatedOid": "04cf9a3"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-19T06:00:11Z",
          "updatedAt": "2023-10-19T06:00:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 65,
      "id": "PR_kwDOIrmZ-85d3rKt",
      "title": "add sample PQC certificate + PKESK/SEIPD msg",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/65",
      "state": "CLOSED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "wussler",
        "fluppe2",
        "falko-strenzke"
      ],
      "labels": [],
      "body": "I added a PQC certificate (public and private) and a v6 PKESK + v2 SEIPD message encrypted to that certificate. The two MUST algorithms are used, i.e., ML-DSA-65 + Ed25519 and ML-KEM-768 + X25519.\r\nFor the format and description and I oriented myself at the Crypto Refresh.\r\n\r\n[The RNP main branch at commit 6a15c33](https://github.com/rnpgp/rnp/commit/6a15c3305c446f0b5fe812893b881f8342ffebe2) has been used to produce the data.\r\n\r\nTo begin with, this test vector should be enough. Signatures are also covered since the key packets are signed. It would be good to parse and decrypt this with some other implementation as soon as one is available.\r\n\r\nIn the future we might want to add some in-depth dissection of interesting intermediate values as for example [A.8. Sample X25519-AEAD-OCB encryption and decryption](https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-crypto-refresh-12#name-sample-x25519-aead-ocb-encr) section of the Crypto Refresh.",
      "createdAt": "2023-10-26T13:30:39Z",
      "updatedAt": "2024-02-20T09:45:16Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "5a432bee93d4f882ac52d7949c30cb0960a7b113",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "add_pqc_sample_cert",
      "headRefOid": "c5cdb2326b5321d51bd6a9aaf609880030b0605b",
      "closedAt": "2024-02-20T09:45:15Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> The two MUST algorithms are used, i.e., ML-DSA-65 + Ed25519 and ML-KEM-768 + X25519.\r\n\r\nTo be exact, that is Dilithium_round3-65+Ed25519 (an odd spec for Dilithium, I know) and Kyber_round3-768+X25519.",
          "createdAt": "2023-10-30T13:59:07Z",
          "updatedAt": "2023-10-30T14:00:00Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "> > The two MUST algorithms are used, i.e., ML-DSA-65 + Ed25519 and ML-KEM-768 + X25519.\r\n> \r\n> To be exact, that is Dilithium_round3-65+Ed25519 (an odd spec for Dilithium, I know) and Kyber_round3-768+X25519.\r\n\r\nThen I guess we discussed that the description of the test vector should point that out and include a reference to the specification document. That would really help people verify the given bits and bytes.\r\n\r\ni.e. add maybe something like \"the test vector has been produced using the following algorithmic specifications [Dilithium_round3-65] and [Kyber_round3]\".\r\n\r\nSuch a sentence could be a moving target that develops into referencing the final standard for ML-DSA and ML-KEM in the end.",
          "createdAt": "2023-11-04T05:12:33Z",
          "updatedAt": "2023-11-04T05:20:45Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "@TJ-91 Very nice work.",
          "createdAt": "2023-11-04T05:21:12Z",
          "updatedAt": "2023-11-04T05:21:12Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I added a general note in the Test vectors section and reference the spec again when writing e.g. \"ML-DSA-65\"  to point to the Dilithium Round3 spec.\r\n\r\nIs further clarification needed?\r\n\r\nEdit: Should we also point to https://github.com/ietf-wg-pquip/state-of-protocols-and-pqc#algorithm-names and give the name of the used spec according to that document??",
          "createdAt": "2023-11-06T10:06:23Z",
          "updatedAt": "2023-11-06T10:08:55Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Heyo, yesterday with @teythoon we managed to get the two implementations to partially interoperate, and spotted some bugs on both sides. These vectors here are unfortunately wrong:\r\n- The key is missing a mandatory direct sig\r\n- PKESKs v4 have the cipher identifier in the wrong place\r\n- When deriving the KEK, the cipher identifier is passed as `000...000` instead of `1d` (or similar)\r\n(- The key preferences are ignored, I made a key with AES128 only and it encrypted using AES256 AFAIK)\r\n\r\nEdit: he's gonna provide a partial patch for these issues",
          "createdAt": "2023-11-06T10:59:29Z",
          "updatedAt": "2023-11-06T11:00:18Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "FYI, here are some certs and messages we generated\r\n\r\nSK\r\n```\r\n-----BEGIN PGP PRIVATE KEY BLOCK-----\r\n\r\n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\r\n=O+Cg\r\n-----END PGP PRIVATE KEY BLOCK-----\r\n```\r\n\r\nPK\r\n```\r\n-----BEGIN PGP PUBLIC KEY BLOCK-----\r\n\r\n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\r\nAAAAAAAFDBMZHCI=\r\n=SAP5\r\n-----END PGP PUBLIC KEY BLOCK-----\r\n```\r\n\r\nMessage:\r\n```\r\n-----BEGIN PGP MESSAGE-----\r\n\r\nwcPUA+dLZWYz+VeVHXERp0akFiO0Z2CmLsrPPwr7ZuUIKxfDF4b8N+xlYRcK52GpwOEHGx9lYc9n\r\ndxVQ+2Xq0wbJnHea9QTaDijdIqWfOoEyYEfyEeRBxjc24ZDhpsgHtr0Xov02OC2O5gzE20yp/OG7\r\n0ZFwJ7yNBlzE1cwWEopaxJxrTo7gl42Y0gvqu0aGInyB2YjjYjOdaQ3nwPcY5Ed3dq/5z/IWc7GH\r\n1dPirnRl/TnCmrzq//msxbnp5dSn/ayT4+W88BvjK1mNvEULymLXdE7OAEQag5SZJJ+8E9oUXd1s\r\nqesKbFJRoIVKacQZCV0rhI4dI9hj/LbLQ95q9GFpGvA8+BhPEDedwSsB0no1fajbOm98EUKHPhZL\r\npyJTpCLgPKLGFe3gmh+F9QxKlVd2Z1qgfcEw5qqob+iyufipHIWMKxNuPACs9ezywOt8Mu7sil8P\r\nu9/BX696qDABwTGMkRdIc5FpHdmNAocGNrKtn7lm/B7fTePTnxopQ7dXgAfEO5kgm4l37DBbev8F\r\nSrxtDPJfmaRVBoJqE1YC0XBpGJ5v8baX+nduaJvkN85eWgYnxnlF2uyRTE73B0UAVyGFj4rRLa4g\r\ncLkZKwSpF9HTwy/80Bu9pNyl/C5LbxLTFgs19mzsZUOSDbKnEUmpAbSpxyLoIbZgPbO1lYtIfHY/\r\nc1CsmgGJVMYXzpgfIiU5a8Kovyoe0WwGp+bwCLzES8ZTxNwfBLxGbZSAtbA69U8CiCVR/eG2wW/N\r\ny/qdS8P6tK7RN/iq5ntvYW7XcvHj5GtoLfQsYXwcoovr5v0BNeH38M8UYIxVF/VzO+1DR4cAgCGs\r\neWVWNlGGrJPBtJ8QgdM3FI+siFXOJHtKCFa/H1vgS5nVX+lPNLYLi299H52u9HHU4YyNBTQAsNu+\r\nrhZ6ptVFKaVRvl46IEu2AOMojXZN7w8xRxqwat9IQGbDbYlJSIwwgeAJWa0fvK1dzaBKB4+BGtd4\r\nTllhtPu48dtizM2hAbIlnZSj8O7qN0X9EgD3YyRJYtxbnmCwqVUovQIqeA08C6Npq5gl5gOFVabz\r\np6knctK9YBz1kb4rMxpiWbaluH0tdXswJced4sPWzKVZkEW1XEVAqmJKVDU7y+Cwa6FP1gMEA2AE\r\n62BQyxzOFUVlreIF5DaCfpgV60/oOhJvvCzcj9wstABCwXECLnNkmwlOFqHsC99LOoXwCdwYE0ha\r\nrCZoEPG16qKrK/x0mZMbmLyssOjHYbwQCDMs79K2yTdMnr1elV+hs3XijtkkRkNB2kPmmpv52riI\r\n7EueYTuQ90wtTr++RRBbpW+nlQOdxP7jFEB1s52TFbbNpF5e3xDZ0JgwJJw/F3fhsBIpoOrntlt8\r\nX20F/7CdDaLTXSLaMkj7lKKozljBrm1KvpZt38Cq7edzR7auUkp8z6cxPj+52u+3BRd82R84Zfed\r\ntnvI1ceJ50sA+zLbATTUtN+0L+S8mzXEJ4baEX0tm+I7N8xiMh5Hxr1ASbqypKqdX7YJKFj9AU5n\r\nOxWuY5SOFEp7xrJv8sR9gZTwHXuKT4MsmTdz6EkYk3/nw7bSzTwBpoAM1NoZQEOOva+g3sTSpAMH\r\nP/f8mZ5CzBZJF/qmtSWvclFdHIGdfbkbaxFRd7lBKY5loUvSHS4O6adE/0VfvXN4lZHN5GFhBDYd\r\n0361sGp07uhcBGcpjYZlLM/fTwROdxEa1W2IaQbl0VYcYp7FIm3BZ/a6RVfl+j+9utq3WjmBzjtF\r\nwUpAlvKZVb9YCK+IEUMRAcVLUre3vikT6xfDDLuQXw26SfQcohZeiXyab0hn9uisLyCfXOh3RTOY\r\nRL9Zx4xDkoOByJPUTQBHYzucnhWwVnaONM/RXtsK9DjV9L3n6jJ+gj6OsvnT313fQj+l5kprFzfz\r\nZUQ4tNifkK1+kOZL060ZepKO7WpYo+So3oYzBxQtNYtUcG7dRrK2X/GlDAf5SVenhW2RUmqsoO+1\r\njxLJbWRJbd+uBe7ZayPmnIWvjuynjyMMLAD3+f92fTJcW2EVfBjh8ygLi6wX36w15wwk/rrrpwRg\r\n32js3Nu2JgAzKtnCBCve1AOvTuWUqkD1H1lM14yZieSi9OBsLfc8EEuFtxOjbQyCZ2l8H6k42VU5\r\n2JAA7Fo6UMoTCm7vRjIoAFm6HrqffeOcg9TgtHS1gihxQ11/JiyS+nHS5YHDzX0c7COCFAML0VLX\r\nBNiNGhxKyMh+bW8PosunaJ7xgHJhzQBkAkGmIke8tEmXVX+bxGnYHsdyI0VSRrFBC1C+umwP6ign\r\nVtzqssYJbk7Kn2lkKw3NMc90TLvXwkJsN+ybKDjXlXvAwkrRAAYinsiV+t9pekPYx3ud1KHkoKtU\r\nN2lpP/BY5NjmPw9RvE+JQyq2KXbGzzZZ9YCA9oeg2Ezu1PsqQRV9xrkbkvPNlH9DHw7UlxLBAOlC\r\no55o4EUcIKZ8EOvsonwWFbeTn5kXHoENoudnU88+bD4iggu8okCPS60k+7TJXoTh9E/nvw/xIv6f\r\nSS/Auiq7PymLbUqlXuVM/1reRQaxzntohayh+C6KjzZP5tFkKZX12vFRTBsU/ngvpSeBQ1IqHHD7\r\nkwZQkJPqEuEGM8aia9931olnI80F24x8dEK/sY+Bm6KeI7YwpeIYEQnw5ToHywQJSSv10WzJx6kg\r\nEBqbMXW+kcd+zL4vn2lCZxg/uhwN5QFw43al4O3MN/F2IZSI9fujVtzvnyJif+PYzw6iDtcc/iSq\r\ni1I0mktMf0vJxlxLzv517BHmcwp7KYR0fW05tl811u6k3sHvUrO9s2bse/2oz4bPuXtj6y1skzc1\r\ns5iLxFWDizZY7yD7L+tf3K+/KB9sOCcnhb0gKId/WAgRU0QopMzTFPNRZ/x6IxzfTCmvgAIZUSQ3\r\nUGX9fy6Lwz71ZLhBIex3KKJVcLweVXFXHFO1o779XyeATUgng3WhWlqoxN9skfrhlKLcTKjiIDwa\r\npUzrITWhvUOn8NZYLWwt+Fln2k21uy33Zaj4IV9OjG0mfdjxvxN235BqJ6EC2OYMiKJrRXyle6XS\r\nhTgrSHqMnKSdRUxHy48IbjIBBKwuMniP4e5VgcMa/vT4EP0tuamjyYTOvjmuGeJnVITOe31jU5cv\r\npDdQivwkvB5i5iDqqm/2ysVRM7qBDHylpcnyopX54PqsN2ntsnzXA54RUVxOXsqg96+MteTMNutB\r\nvIRZDRBNE+WWVdk8i9HnZukLj8XNGH5kgU/7dyvs8LcnDC8JBPz/Ca2uBKBJIYfFvwhCl2LDfq7J\r\nlVveTinThAtkUzMIvlnapwKx/8+9movuaSD5ITYKWjjlH8mBqcIPFx6BoX4eH2JdVm+h8nFPPJGw\r\nEQ3dKUMEgEl/KpZJAS4WXaLbk15dUyev/utjdKL115tFNFk25PT/VzKi1tJf4/PAkFtuNqT3+tEe\r\nfSZG+Jcmckk3nISKMA1xGlcBRaCxJoFwE5t43ZBzreAsjBSWS4CUg7bdiemmYCP2b/rUmFwgd0s0\r\nWnTOWfIlrHErbFqju26252vemVgICLgCsxyOLH828QW9/GsPtfALkrr9sQY3ebZjLqdBz4dAgyIx\r\nxZs51SLU+YqHCukkdwhAjGZsXUKGkoIRh5isdd2TDfxV01KGqHXs8cJHzYyvt+JB8WuWnIhpZg5A\r\nKtWf7yQ3ntC4HWDOu5q7h3WDtaEv7UwugNZhaY6M8k30yWy+/V8g3h42Fo1CKmx2iV27BNCE5LGv\r\nMCW5Bvbw7cwj6w7Obs14tsrkRNl4+X23HNDWx0Vrw79MXC5+EDR9XH3D1AXCKhdC2X6hoXbH8VCz\r\nOu7kBTj3eHwE242kBYctMZ6qRx+Y0kXkxkrfAMkYccYgJWyLJx4TAMfodWwtCQgboNeva5KCX6Wo\r\n2qBDPmXSwhyvrxrA2g7xXw+2ZPEA3FXZyibi119YtJZgvJrRhHeyD19ntUgxt9MMyyurz+Am6aAl\r\noqdWcsMuSu/YIgYXZVLKITSqcwfu5fFzX6erF3leUR/Y/KU1FOLOe3y7aOlcbKZV1/xaoQwjo5le\r\njwLPfXQJpJmOL0dkEf29rV5tKgK0xUkLQ7F6aXDJ986aixzYuXwtOmPQMpWWRIDzHC/wReznWfQX\r\naOSH1sGi9UnS9u7qwBJqRCT2xQlkcGJFaIxTbuVKXCBggKqFlZCH6Tk9LzeWbaffnbDFThj6Ihc9\r\nVPy9XT2pm7T9/CJR6DMEQsTxoDyCA/uQMkdWm5vYHN9SCGeqxVilfUQm8YSunV7fxSZ9ptD4zsSD\r\nhAKOlDDf9oW7tlXjV1ua9PR7aGkDRJgh7LwDL9PP7iHW+IgyhQ1Y29hmV/FnuNwYgpa76QcDN03w\r\nTolHyhaXwT/18fOp7Eo1o7UNnEggc9kga6rmeDM6YfJOHeWEfJ7xyN+nab1m1o1NwKJ5t6KSddQk\r\nZPvOU99s6vv3SwmCUAmx22NZA7jE0wjY48Djiaq0og45COUGASduN77BJLUm2JslbbzKMX2gvKa6\r\nxoFa/DnQ5KsYbfjXnJztJsMx0oXV5SbutbKyNKFEvJnOKseRzPJtXVz6Dkq7J38/B0o/r884Ak/S\r\npuF6yWYr3/7rbtzlTlnHduxFNN80fiXhOq8QYK9tdcMZl6jMqy+FvL+ca1TAekDqd03wIbn8SpG5\r\nSP5JcAXdggBrG6SmtxjuZMFcLHTXbAuVolz7hW3+rRlbHoyhIpwdVaQAcT9z8VLr4MFv1RuCKS+T\r\n3vJy9Cvkg8gc+zk8uUxgVnShMcc0jxXuqEMyLBYdokyVLbBcPvqTjmGAN073kzg6lFsID5G0iQqg\r\nMGnAbvUMGjBwr997DtHvlVa8ikSpTspmXwfKPACquoFTp2iheTdGLDL1YUHtFQg69kCanQSITps3\r\nsNzcBfRMNw9cAMG8Sm3dfBkOeCsWzjyN2zSNhrKmbUAj3MO1XX1HlpMdIkKas83ln7nrLru17Rcz\r\nDl78nwqFzyBvIY+txvgooMSt8NXgHDKW2tK0VnmF6n4aE8Z97eAKggUfzBtKqHGdMRPMolO5bzrH\r\nr8mdFSZ1EuSIeLPwiCaAp0Jpe5T1/PqwrtZbSHCVbxx4lBlTP7yYeY1+8zQUs+tYP/P2VS9BKEzL\r\n+XveFuTmkg43mBVGRTFcBuay3zMaHrJq0YiPLa2Xkitxd1m8GQU//XfJqeGRggrxTs6QSQXuInoi\r\nQHdP8NdO746COqrhK4Nu+53ezwdZOGL0zrV37clZ/M6HVfa30XYKZ5yLkCR5mzhVnRi/0+UhJkET\r\nB0EF7NdS77edz4XsS3uDnWjz2rur+9+BwOyxPudW+4r+6H7vn9BAPEG7O5MlhKcndWQUV7cWRNs5\r\n6CjFOY9/NQJ3U+7bXC/J4B04O3yFiwVsYfhTbVMpMBmrMaW4B2TuNUWhh+qIp/Wxfg3VfPrhl1vY\r\n7r6WeiBQi4u+Go5wEVM5v2/Dpyo1YDphpwwNeojbu0yjn80MYWHklF8wrAMTYEk1D0HW6GUEEb/D\r\nswDY4FJlfZeHyoFQhH5JzT8FJZzl3Nq843EFNfVQ3eRRVjCQClUNZcWKw8LcQB5VaR60P/QI81KQ\r\nYNW2hq0xnzy5E6mgQzQ7gxqV5zD6asn9km5M14d/qbn8Q9LtDJA1NltCs76on/tIwzxA+i8fHzXn\r\nqEtV6sW4/KpyAs/EaPbuMe8dNe9v4RnC2vE2x1wLmQGziA5ZileFq2671zBj33YEqS8N0KM32fhE\r\n5/oVej91yHykCI8U4S41YoLAP0bRuBOCaG0wl22aqiRKZpgiXEYx5GqiXityAk7+tST5XXTHNJLn\r\nWPMy9Z9IXjf0zRxW0hMNGy5yOvO4MHZMRvnXs6bnbt4REofLa9e33NK7sWiVxakQCxhbyqrdQizy\r\nRvXMpxUo6IgTJ+dtP7/4Eky6vjKyQxiorwG0y25lp/K3l3Ems1bHF/D0Acn/0Ig+3gnntoYgJBi1\r\nL4CgDy9kqh5FXofUP3PgEIFfU4RdLePbgT7uHplStWjDWgXy0v69k6dFbkpfVQ4UcsJxSmYiSEFY\r\nvFFTJD/8m+1V6VR0SwLtVLmBPP/RbebGpQas0ec+yrrK+7t35ho4CXxnblgSnXJ7qigmRgAqLxqu\r\nWgZptnCQNG97XjXzOR3im/+cqrdphtJeBG+u0yqHdq3CWFupz6r7ILjs11F0EHJBsubvq8W1rS+7\r\nsM2tSFKO0PVnmdMmtGqD3iDbYhP5GAzdhn/bosoBzz8GxwqLXSz50wCeJLRLj+dAzObQmz6g+rGO\r\nfKTy7nWZUGhDNLRaZ+ztEPyJQbDQPo/U/VuLj2S2aIVUTbTxpv1OtFM6byzkeghGA9/xIaTs4gyT\r\nmFpmNbq5YzvcIIOO6qZ/W6/lhBRGG5ZuSmBT\r\n=hAt4\r\n-----END PGP MESSAGE-----\r\n```\r\n\r\nPlaintext:\r\n```\r\nAmazing!!!!11elfelfeins now with the cypher byte in the right place hopefully\\n\r\n```\r\n\r\nNote that the PK does not sign the message. That's signed with a key that we didn't manage to export correctly (missing self-sig)",
          "createdAt": "2023-11-06T18:22:38Z",
          "updatedAt": "2023-11-06T18:22:38Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I've implemented the latest spec here: https://github.com/ProtonMail/go-crypto/pull/142",
          "createdAt": "2023-11-06T18:23:37Z",
          "updatedAt": "2023-11-06T18:23:37Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for testing and creating the certs+msg! With RNP I can use your keys fine. Decrypting the message fails as you already pointed out due to PKESK v3 incompatibilities. Please let me know when your partial fixes are available and whether I can help you with it.\r\n\r\nPS: Is there a specific reason why you generated PKESKv3/SEIPDv1 rather than the newer versions? I think we should generate two sets for the draft: v6 PQC keys + PKESKv6/SEIPDv2 and v4 PQC keys + PKESKv3/SEIPDv1 (but for now the main thing is to have any test vector that the implementations agree with at all)\r\n\r\nEdit:\r\n> When deriving the KEK, the cipher identifier is passed as 000...000 instead of 1d (or similar)\r\n\r\nBtw, this is due to a wrong initialization of a `std::vector` in `KMAC256::fixedInfo()`. To clarify, do you intend to patch the RNP code as well or should I do it?",
          "createdAt": "2023-11-07T08:57:14Z",
          "updatedAt": "2023-11-07T09:20:30Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hey :) I have some patches that you can use as a starting point.  Unfortunately at the time we did the experiments, I didn't notice that you merged the work into RNP upstream, so I started with https://github.com/falko-strenzke/rnp branch v6_pqc_2306.  Hope it will still be useful.",
          "createdAt": "2023-11-07T09:56:37Z",
          "updatedAt": "2023-11-07T09:56:37Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I pushed my work here: https://github.com/teythoon/rnp/commits/justus/hackhack",
          "createdAt": "2023-11-07T10:06:03Z",
          "updatedAt": "2023-11-07T10:06:03Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks that's helpful!",
          "createdAt": "2023-11-07T10:08:47Z",
          "updatedAt": "2023-11-07T10:08:47Z"
        },
        {
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I also added the stock RNP with crypto-refresh enabled, using the stock Botan to our v6 test suite: https://tests.sequoia-pgp.org/v6.html",
          "createdAt": "2023-11-07T10:28:16Z",
          "updatedAt": "2023-11-07T10:28:16Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this since it's outdated. Thanks for the feedback everyone, this has been helpful and I hope to submit new test vectors soon.",
          "createdAt": "2024-02-20T09:45:15Z",
          "updatedAt": "2024-02-20T09:45:15Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 66,
      "id": "PR_kwDOIrmZ-85ecc_a",
      "title": "Add missing parameter to ECC-KEM",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/66",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The `eccPublicKey` parameter is also used into the KDF, therefore required for the decaps",
      "createdAt": "2023-11-02T15:07:42Z",
      "updatedAt": "2024-02-13T09:54:32Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "86a468c8636263c7623d7b681a646e444debdee4",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "fix-ecc-kem",
      "headRefOid": "71c5d6808830f284c45163bd0b3b330bd76bf499",
      "closedAt": "2024-02-13T09:54:32Z",
      "mergedAt": "2024-02-13T09:54:32Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "28c1e0fda2d2055057f0ffcc19c8a8832ccda52b"
      },
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "@fluppe2 \r\n> Option 2 will trigger some changes in implementations as it would change the specification of the secret key material packet.\r\n\r\nThis would probably make it less OpenPGP-like but definitely makes it easy to verify the keys against KOpenpgp attacks",
          "createdAt": "2023-11-05T15:07:01Z",
          "updatedAt": "2023-11-05T15:07:01Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Personally, I prefer option 1) since it seems like the \"obvious approach\". For 2) I feel like we need some justification. IMO KOpenpgp attacks should be mitigated on a different level: use authenticated encryption (which is introduced in the Crypto Refresh).",
          "createdAt": "2023-11-06T09:25:17Z",
          "updatedAt": "2023-11-06T09:25:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85l9V5k",
          "commit": {
            "abbreviatedOid": "99facdb"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-02T15:19:10Z",
          "updatedAt": "2023-11-02T15:19:18Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I don't see that the public key is needed here. Consider from the NIST IPD for ML-KEM:\r\n\r\n`Algorithm 17 ML-KEM.Decaps(c, dk)`\r\n\r\nThis is just taking the ciphertext and the decapsulation key. The `ek_{PKE}` that is needed in the algorithm is a part of `dk`.",
              "createdAt": "2023-11-02T15:19:10Z",
              "updatedAt": "2023-11-02T15:19:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85mEZp3",
          "commit": {
            "abbreviatedOid": "99facdb"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-03T11:30:02Z",
          "updatedAt": "2023-11-03T11:30:02Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think Aron is right and ML-KEM doesn't have anything to do with this. See for example the [X448 KEM](https://datatracker.ietf.org/doc/html/draft-wussler-openpgp-pqc-03#name-x448-kem) in our draft:\r\n\r\n`Set the output eccKeyShare to SHA3-512(X || eccCipherText || eccPublicKey)`\r\n\r\n@wussler you missed the second occurance of `ECC-KEM.Decaps` in [5.2.5. Decryption procedure](https://datatracker.ietf.org/doc/html/draft-wussler-openpgp-pqc-03#name-decryption-procedure)",
              "createdAt": "2023-11-03T11:30:02Z",
              "updatedAt": "2023-11-03T11:30:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85mEetP",
          "commit": {
            "abbreviatedOid": "99facdb"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-03T11:42:09Z",
          "updatedAt": "2023-11-03T11:42:10Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Also, I'd probably write it as third parameter (as it's also the third in the hash computation), but that's just a question of preference.",
              "createdAt": "2023-11-03T11:42:10Z",
              "updatedAt": "2023-11-03T11:42:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85mFr9P",
          "commit": {
            "abbreviatedOid": "99facdb"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-03T14:05:46Z",
          "updatedAt": "2023-11-03T14:05:46Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@falko-strenzke In dilithium dk contains ek explicitly, for ECC it doesn't",
              "createdAt": "2023-11-03T14:05:46Z",
              "updatedAt": "2023-11-03T14:05:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85mJSJi",
          "commit": {
            "abbreviatedOid": "cff3fbb"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "@wussler : Nice catch!\r\n\r\nTo recall, the history of the appearance of `eccPublicKey` in the final step of our ECC-KEMs, i.e. `x25519kem`, `x448kem` and `ecdhkem`, is that\r\n\r\n- we introduced `eccKeyShare = Hash(X || eccCipherText)` (previously it was just `eccKeyShare = X`) to have IND-CCA2 secure ECC-KEMs following Cramer-Shoup. The crucial aspect of Cramer-Shoup is the inclusion of `eccCipherText`.\r\n- we raised this security aspect during the inclusion of X25519 and X448 in the crypto-refresh and pointed the OpenPGP WG to the security considerations of RFC7748 which states \"Alice and Bob can then use a key-derivation function that includes K, K_A, and K_B to derive a symmetric key.\". The K_A, K_B map to our `eccPublicKey` and `eccCipherText`. It has been applied to the crypto-refresh such that they included both in their KDF.\r\n- we adopted the additional inclusion of `eccPublicKey` in our ECC-KEMs to align to the approach of the crypto-refresh.\r\n\r\nML-KEM doas not need the explicit mentioning of the public key since it does extract the public key from the decapsulation key as @falko-strenzke and @wussler state it, i.e. already incorporates such an IND-CCA2 conversion and accomodates the needed data in the decapsulation key.\r\n\r\nSince the `mlkemSecretKey` contains the actual secret key AND the public key I guess we have two options here:\r\n\r\n1) Do it the way @wussler proposed it here and just have a slightly different interface for the ECC-KEMs.\r\n2) Mimic the way ML-KEM does it and define the ECC public key as part of the ML-KEM+ECC secret key packet in \u00a75.3.2 from which the `eccPublicKey` could then be extracted in the decapsulation function ECC-KEM.Decaps() without having it to specify it in the interface.\r\n\r\nWe are defining the key material packets for new algorithms and hence from scratch anyway so I guess we have the liberty to do this.\r\n\r\nI guess both options are fine. I would (personally) maybe tend to option 2 as I feel it is more in the mindset of modern KEMs to have the public key always be part of the secret key.\r\n\r\nOption 2 will trigger some changes in implementations as it would change the specification of the secret key material packet. In my opinion, we are in such an early stage that this should not hinder us in considering this approach.\r\n\r\nWhat do you think/prefer?\r\n",
          "createdAt": "2023-11-04T05:24:35Z",
          "updatedAt": "2023-11-04T05:30:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85mLyOu",
          "commit": {
            "abbreviatedOid": "99facdb"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-06T06:51:45Z",
          "updatedAt": "2023-11-06T06:51:45Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "> @falko-strenzke In dilithium dk contains ek explicitly, for ECC it doesn't\r\n\r\nyes, I didn't read correctly :-(",
              "createdAt": "2023-11-06T06:51:45Z",
              "updatedAt": "2023-11-06T06:51:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v5p1I",
          "commit": {
            "abbreviatedOid": "cff3fbb"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Yes, lets go for option 1, I think that is a good way forward.",
          "createdAt": "2024-02-13T09:48:59Z",
          "updatedAt": "2024-02-13T09:48:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85v5qHB",
          "commit": {
            "abbreviatedOid": "cff3fbb"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-13T09:49:19Z",
          "updatedAt": "2024-02-13T09:49:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOIrmZ-85fAm5g",
      "title": "Fix typos.",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/72",
      "state": "MERGED",
      "author": "teythoon",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-09T09:03:09Z",
      "updatedAt": "2024-02-02T02:42:45Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "25b8386acf63fad5afdd9fd5f7193ea89961a052",
      "headRepository": "teythoon/draft-openpgp-pqc",
      "headRefName": "justus/typos",
      "headRefOid": "431a4b28363643ba89aae21e674524c47b5ed2ef",
      "closedAt": "2024-02-02T02:42:45Z",
      "mergedAt": "2024-02-02T02:42:45Z",
      "mergedBy": "fluppe2",
      "mergeCommit": {
        "oid": "36a438263eb329e616771771472cdce99b3952b9"
      },
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "@teythoon Could you please still remove the conflicts with the main branch \u2013 probably it' s the renaming of the file.",
          "createdAt": "2024-02-01T15:07:03Z",
          "updatedAt": "2024-02-01T15:07:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85p8pti",
          "commit": {
            "abbreviatedOid": "e15ad22"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-12T13:43:52Z",
          "updatedAt": "2023-12-12T13:43:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85qK5bG",
          "commit": {
            "abbreviatedOid": "e15ad22"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-14T08:00:22Z",
          "updatedAt": "2023-12-14T08:00:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I disagree here: \"cryptanalytic\" or \"cryptanalytis\" are the commonly used term with a hits on Google while for \"cryptoanalytic\" I don't see any results on Google.",
              "createdAt": "2023-12-14T08:00:22Z",
              "updatedAt": "2023-12-14T08:01:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85qK5pE",
          "commit": {
            "abbreviatedOid": "e15ad22"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-14T08:00:58Z",
          "updatedAt": "2023-12-14T08:00:59Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I think both words mean the same but I am fine with changing it.",
              "createdAt": "2023-12-14T08:00:58Z",
              "updatedAt": "2023-12-14T08:00:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85qK6dr",
          "commit": {
            "abbreviatedOid": "e15ad22"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-14T08:03:15Z",
          "updatedAt": "2023-12-14T08:03:16Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I am not sure whether we have commited to BE or AE. In BE, \"artefact\" would be appropriate: https://grammarist.com/spelling/artefact-artifact/",
              "createdAt": "2023-12-14T08:03:15Z",
              "updatedAt": "2023-12-14T08:03:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85ukAok",
          "commit": {
            "abbreviatedOid": "e15ad22"
          },
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-31T22:03:43Z",
          "updatedAt": "2024-01-31T22:03:43Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "agree with @falko-strenzke here, i tend to think cryptanalytic is the preferred form.",
              "createdAt": "2024-01-31T22:03:43Z",
              "updatedAt": "2024-01-31T22:03:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85ukBQi",
          "commit": {
            "abbreviatedOid": "e15ad22"
          },
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-31T22:05:13Z",
          "updatedAt": "2024-01-31T22:05:13Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "agree with @teythoon's  proposed change here.  As a native en_US speaker with a decent vocabulary, unequivocally is a much more common and well-understood word choice.  i can parse \"univocally\" and figure out what it means (\"with one voice\") but it's not anything that i'm used to reading.",
              "createdAt": "2024-01-31T22:05:13Z",
              "updatedAt": "2024-01-31T22:05:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85ukG5s",
          "commit": {
            "abbreviatedOid": "e15ad22"
          },
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-31T22:15:37Z",
          "updatedAt": "2024-01-31T22:15:37Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "i'm native en_US, so i prefer \"artifact\" over \"artefact\".  From a quick'n'dirty review of a corpus of IETF documents, \"artifact\" seems to be roughly 10\u00d7 as frequent as \"artefact\".  The document also uses \"artifact\" in several other places.  it should at least be internally consistent, and this one change to \"artifact\" looks like the easiest way to do that.",
              "createdAt": "2024-01-31T22:15:37Z",
              "updatedAt": "2024-01-31T22:15:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85umf-X",
          "commit": {
            "abbreviatedOid": "e15ad22"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-01T06:06:51Z",
          "updatedAt": "2024-02-01T06:06:51Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "OK, great, thanks for these insights, DKG. Once the topmost change regarding \"cryptanalytic\" has been reverted, I will hit \"approve\".",
              "createdAt": "2024-02-01T06:06:51Z",
              "updatedAt": "2024-02-01T06:06:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85uq5Np",
          "commit": {
            "abbreviatedOid": "e15ad22"
          },
          "author": "teythoon",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-01T15:03:54Z",
          "updatedAt": "2024-02-01T15:03:54Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Reverted.",
              "createdAt": "2024-02-01T15:03:54Z",
              "updatedAt": "2024-02-01T15:03:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85uq51R",
          "commit": {
            "abbreviatedOid": "99009fb"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "@teythoon Thanks for these corrections.",
          "createdAt": "2024-02-01T15:05:00Z",
          "updatedAt": "2024-02-01T15:05:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 73,
      "id": "PR_kwDOIrmZ-85gHbnH",
      "title": "added johannes as author",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/73",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-22T10:49:51Z",
      "updatedAt": "2023-11-22T11:00:29Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "5a432bee93d4f882ac52d7949c30cb0960a7b113",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "add-jrh-as-author",
      "headRefOid": "cf88cc0f307a5f5c67bc76173fbff8ced4c378d5",
      "closedAt": "2023-11-22T11:00:29Z",
      "mergedAt": "2023-11-22T11:00:29Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "6653ace97ea2b5ad951f9165e39793bd71a60b55"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 78,
      "id": "PR_kwDOIrmZ-85ln7Nk",
      "title": "README: point to WG draft, not draft-wussler",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/78",
      "state": "MERGED",
      "author": "dkg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-31T22:23:43Z",
      "updatedAt": "2024-02-02T03:09:37Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "25b8386acf63fad5afdd9fd5f7193ea89961a052",
      "headRepository": "dkg/openpgp-pqc",
      "headRefName": "fix-readme",
      "headRefOid": "de7e0228f0967b9cda2d315d75224392e8bbbd3c",
      "closedAt": "2024-02-02T03:09:36Z",
      "mergedAt": "2024-02-02T03:09:36Z",
      "mergedBy": "fluppe2",
      "mergeCommit": {
        "oid": "b047507ad73e25bef7d7914eba2b648cbb62d6cc"
      },
      "comments": [
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "probably worth having some more cleanup on the editor's copy stuff as well, but i don't understand that setup well enough to offer a specific edit.",
          "createdAt": "2024-01-31T22:24:03Z",
          "updatedAt": "2024-01-31T22:24:26Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "body": "> probably worth having some more cleanup on the editor's copy stuff as well, but i don't understand that setup well enough to offer a specific edit.\r\n\r\njust did it (tried cleaned up links in the browser first) ",
          "createdAt": "2024-02-02T03:07:43Z",
          "updatedAt": "2024-02-02T03:07:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85umdOj",
          "commit": {
            "abbreviatedOid": "ffaa4fd"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-01T06:02:18Z",
          "updatedAt": "2024-02-01T06:02:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85uwYlh",
          "commit": {
            "abbreviatedOid": "ffaa4fd"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-02T03:03:01Z",
          "updatedAt": "2024-02-02T03:03:01Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\n* [Editor's Copy](https://openpgp-pqc.github.io/draft-openpgp-pqc/#go.draft-ietf-openpgp-pqc.html)\r\n```",
              "createdAt": "2024-02-02T03:03:01Z",
              "updatedAt": "2024-02-02T03:03:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85uwYun",
          "commit": {
            "abbreviatedOid": "ffaa4fd"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-02T03:03:23Z",
          "updatedAt": "2024-02-02T03:03:23Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n* [Compare Editor's Copy to Individual Draft](https://openpgp-pqc.github.io/draft-openpgp-pqc/#go.draft-ietf-openpgp-pqc.diff)\r\n```",
              "createdAt": "2024-02-02T03:03:23Z",
              "updatedAt": "2024-02-02T03:03:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85uwajy",
          "commit": {
            "abbreviatedOid": "de7e022"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Applied further cleanups",
          "createdAt": "2024-02-02T03:09:24Z",
          "updatedAt": "2024-02-02T03:09:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOIrmZ-85mCajB",
      "title": "Clarifications mostly to KEM specification",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/80",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "These are all mere clarifications. \r\n\r\nNote that X25519 is defined not with a scalar input, but with [an octet string as input](https://datatracker.ietf.org/doc/html/rfc7748#section-6.1).\r\n\r\n\"the fixed 4 byte value 0x00000001\" did specify a number, not a sequence of bytes. The endianess of the encoding would still have to be given here.\r\n\r\nThe remaining changes should be obvious.",
      "createdAt": "2024-02-05T15:19:29Z",
      "updatedAt": "2024-02-19T05:16:44Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "19fe56218a7d4796b6cdbfdb8e64a85826b89de3",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "clarify-mlkem",
      "headRefOid": "21e32270e260b6b0c063fcba44c4243e71a601a1",
      "closedAt": "2024-02-19T05:16:44Z",
      "mergedAt": "2024-02-19T05:16:44Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "f69fdffb35ed26b43c2355461c3ef1709a06c307"
      },
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "fixes #69",
          "createdAt": "2024-02-13T12:42:38Z",
          "updatedAt": "2024-02-13T12:42:38Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "fixes #70 ",
          "createdAt": "2024-02-13T12:44:33Z",
          "updatedAt": "2024-02-13T12:44:33Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "fixes #68 ",
          "createdAt": "2024-02-13T12:47:28Z",
          "updatedAt": "2024-02-13T12:47:28Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "fixes #15 \r\n\r\n@wussler Could you also review at least the last commit renaming \"MB = KMAC(...\" as I made this change after @fluppe2 and @TJ-91 had approved?",
          "createdAt": "2024-02-13T12:52:57Z",
          "updatedAt": "2024-02-13T12:52:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85vEIXw",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-05T17:08:54Z",
          "updatedAt": "2024-02-05T17:33:18Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "It should be made more clear that this is meant as a mapping between the KMAC terminology `KMAC256(K, X, L, S)` and the inputs that we pass in the combiner. I think explicitly naming the parameters `K, X, L, S` and referencing to Section 4.2 and 4.3 in SP800-185 will make it more clear.\r\n\r\nImplementers will face the additional challenge of mapping these values to the MAC API of their chosen crypto library which can be unintuitive. For example, the nonce/iv will be the `customizationString`. It's probably out of scope for this document, but I'd not be surprised if this confuses some people. So my question is: Can or should we add some hints in the document?",
              "createdAt": "2024-02-05T17:08:54Z",
              "updatedAt": "2024-02-05T17:33:18Z"
            },
            {
              "originalPosition": 93,
              "body": "\"symmetric algorithm\" should be \"symmetric algorithm **id**\"",
              "createdAt": "2024-02-05T17:19:28Z",
              "updatedAt": "2024-02-05T17:33:18Z"
            },
            {
              "originalPosition": 91,
              "body": "I have a comment that does not diretly relate to your change but in Section 5.3.1  it says:\r\n\r\n> The wrapped session key represented as an octet string, i.e., the output of the encryption procedure described in Section 5.2.4.\r\n\r\nThis does not match and assumes that 5.2.4 only outputs `C`. Perhaps you can fix it in this PR. Otherwsie we can make a separate issue for this.",
              "createdAt": "2024-02-05T17:23:27Z",
              "updatedAt": "2024-02-05T17:33:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vFkdW",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This looks like an overall improvement in the draft.  I've left a series of nit-picking comments that could improve it further though.  Thanks for working on it, @falko-strenzke !",
          "createdAt": "2024-02-05T20:08:53Z",
          "updatedAt": "2024-02-05T20:30:45Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "this seems to just be a textual reflow.  is there a reason to include it in this change?",
              "createdAt": "2024-02-05T20:08:54Z",
              "updatedAt": "2024-02-05T20:30:45Z"
            },
            {
              "originalPosition": 50,
              "body": "for X25519, it says \"with a length *of* 32 octets\".  This omits the \"of\".  maybe align them?",
              "createdAt": "2024-02-05T20:09:44Z",
              "updatedAt": "2024-02-05T20:30:45Z"
            },
            {
              "originalPosition": 21,
              "body": "It's not clear to me why \"submitted to the NIST process as\u2026\" needs to be here for any of these three schemes, particularly in the introduction.  This is historical data at this point, right?  and the schemes as submitted don't necessarily match the schemes as standardized or used here.\r\n\r\nIf the goal is that someone searching an archive of IETF documents for \"Dilithium\", etc can find this draft, maybe just create a \"historical notes\" appendix or something.  otherwise, i think just dropping the \"submitted to the NIST process as \u2026\" texts would also be fine.",
              "createdAt": "2024-02-05T20:12:37Z",
              "updatedAt": "2024-02-05T20:30:45Z"
            },
            {
              "originalPosition": 102,
              "body": "nit-pick: comma after \"i.e.\" ",
              "createdAt": "2024-02-05T20:14:08Z",
              "updatedAt": "2024-02-05T20:30:45Z"
            },
            {
              "originalPosition": 137,
              "body": "Is \"unlike most\" really what we want to say here?  It's also true for the crypto-refresh's recommended X25519 and X448 public-key algorithms.  Maybe it's better to refer to the similiarity rather than to the difference?",
              "createdAt": "2024-02-05T20:20:16Z",
              "updatedAt": "2024-02-05T20:30:45Z"
            },
            {
              "originalPosition": 139,
              "body": "is \"prepended\" the right way to say this?  it is prepended to `len(C)||C`, but it is after `eccCipherText||mlkemCipherText`.",
              "createdAt": "2024-02-05T20:22:01Z",
              "updatedAt": "2024-02-05T20:30:45Z"
            },
            {
              "originalPosition": 141,
              "body": "Should we justify this?\r\n\r\nI note that in crypto-refresh-13, the same concern is not explicitly justified in the text, but in commit 3eea8ee71215a2e1be24a3d45ac928aa098720a4 @twiss justifies it with:\r\n\r\n> Since the symmetric algorithm ID is not encrypted nor authenticated in v3 PKESKs, mandate that AES is used, to prevent a (remote) risk of cross-algorithm attacks.",
              "createdAt": "2024-02-05T20:29:51Z",
              "updatedAt": "2024-02-05T20:30:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIPwd",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T07:22:57Z",
          "updatedAt": "2024-02-06T07:22:57Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "> It should be made more clear that this is meant as a mapping between the KMAC terminology `KMAC256(K, X, L, S)` and the inputs that we pass in the combiner. I think explicitly naming the parameters `K, X, L, S` and referencing to Section 4.2 and 4.3 in SP800-185 will make it more clear.\r\n\r\nOK, fixed.\r\n> \r\n> Implementers will face the additional challenge of mapping these values to the MAC API of their chosen crypto library which can be unintuitive. For example, the nonce/iv will be the `customizationString`. It's probably out of scope for this document, but I'd not be surprised if this confuses some people. So my question is: Can or should we add some hints in the document?\r\n\r\nI don't see that we can clarify the use of library interfaces for implementers on that level. Then we would have do that for each and every cryptographic operation that we mention. Each time this would involve lengthy text full of speculation how a library might have to be used. I think this would do more harm than good in terms of clarity.",
              "createdAt": "2024-02-06T07:22:57Z",
              "updatedAt": "2024-02-06T07:22:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIbae",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T07:53:45Z",
          "updatedAt": "2024-02-06T07:53:45Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "I was thinking of a small, generic hint and not a complete survey of crypto libraries, of course. But I agree that it's not the right place to do. Providing KDF output values in test vectors will probably be enough to easily catch mixed-up MAC inputs.",
              "createdAt": "2024-02-06T07:53:45Z",
              "updatedAt": "2024-02-06T07:53:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIcIG",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T07:55:40Z",
          "updatedAt": "2024-02-06T07:55:40Z",
          "comments": [
            {
              "originalPosition": 137,
              "body": "Yes, a good suggestion, done.",
              "createdAt": "2024-02-06T07:55:40Z",
              "updatedAt": "2024-02-06T07:55:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIcLU",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T07:55:48Z",
          "updatedAt": "2024-02-06T07:55:48Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "I tried to describe it exactly now.",
              "createdAt": "2024-02-06T07:55:48Z",
              "updatedAt": "2024-02-06T07:55:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIcQo",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T07:56:02Z",
          "updatedAt": "2024-02-06T07:56:02Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "Fixed.",
              "createdAt": "2024-02-06T07:56:02Z",
              "updatedAt": "2024-02-06T07:56:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIcVI",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T07:56:12Z",
          "updatedAt": "2024-02-06T07:56:12Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I agree, that this is information is superfluous in the introduction. I replaced it by the references to the FIPS standards for each scheme.",
              "createdAt": "2024-02-06T07:56:12Z",
              "updatedAt": "2024-02-06T07:56:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIcX1",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T07:56:19Z",
          "updatedAt": "2024-02-06T07:56:19Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Yes, clearly the \"of\" was missing. Added it now.",
              "createdAt": "2024-02-06T07:56:19Z",
              "updatedAt": "2024-02-06T07:56:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIcc-",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T07:56:32Z",
          "updatedAt": "2024-02-06T07:56:32Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "It seems to have happened due to an inaccuracy of my editor (Vim) which made a reflow to limit the line to one character less than I specified. I reverted it. ",
              "createdAt": "2024-02-06T07:56:32Z",
              "updatedAt": "2024-02-06T07:56:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIcie",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T07:56:44Z",
          "updatedAt": "2024-02-06T07:56:44Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "Indeed. I reorganized Section 5.3.1 even a bit more.",
              "createdAt": "2024-02-06T07:56:44Z",
              "updatedAt": "2024-02-06T07:56:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIcnc",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T07:56:57Z",
          "updatedAt": "2024-02-06T07:56:57Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "Fixed.",
              "createdAt": "2024-02-06T07:56:57Z",
              "updatedAt": "2024-02-06T07:56:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIfQz",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T08:03:37Z",
          "updatedAt": "2024-02-06T08:03:37Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "For me its hard to see this as a justification. With our specification, we followed how the crypto-refresh does it for the v3 PKESK case, in order not to introduce a further variant. Clearly, once one commits to not encrypting the algorithm identifier, the concern of cross-algorithm attacks arises. But what really calls for justification here in my view is why not to encrypt the algorithm identifier in the first place. I think the outset for the justification really has to be: \"There is no need for another symmetric encryption algorithm than AES\". Otherwise this approach is hardly justifiable.",
              "createdAt": "2024-02-06T08:03:37Z",
              "updatedAt": "2024-02-06T08:03:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIj5l",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T08:15:05Z",
          "updatedAt": "2024-02-06T08:15:05Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "The way I see it: That choice has been made in the Crypto Refresh and we only align to it. Perhaps we can state that we align to the Crypto Refresh (specifically to the X25519/X448 case) and that is enough justification for the PQC draft?\r\n\r\nOtherwise I think I have to agree with Falko and in consequence we would have to diverge from the Crypto Refresh and encrypt the id with a padding. And at this point, that will only introduce unnecessary further implementation complexity by introducing even another case to consider for the correct parsing and writing of PKESKs.",
              "createdAt": "2024-02-06T08:15:05Z",
              "updatedAt": "2024-02-06T08:15:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vImtx",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T08:21:31Z",
          "updatedAt": "2024-02-06T08:21:31Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "I would even go so far to say that the chosen approach is not 100% waterproof. It prevents cross-algorithm attacks, but not necessarily cross-key-size attacks in all cases. If an implementation accepts a 256 bit value for an AES-128 key by dropping the second half, then such an attack is possible. I would clearly say that a secure and robust implemention should not accept oversized keys, but still: with the chosen approach we increase the attack surface without any justifiable reason, except that we want align with the crypto-refresh.",
              "createdAt": "2024-02-06T08:21:31Z",
              "updatedAt": "2024-02-06T08:21:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vJLwa",
          "commit": {
            "abbreviatedOid": "5e1521f"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T09:35:54Z",
          "updatedAt": "2024-02-06T09:35:54Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "In our implementations we already check the key size matching the algorithm, and error our otherwise. I see no issue in mandating this check.",
              "createdAt": "2024-02-06T09:35:54Z",
              "updatedAt": "2024-02-06T09:35:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vJzHo",
          "commit": {
            "abbreviatedOid": "714a83e"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T10:51:20Z",
          "updatedAt": "2024-02-06T10:51:21Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "```suggestion\r\n     denotes the symmetric algorithm ID used and is present only for a v3 PKESK.\r\n```",
              "createdAt": "2024-02-06T10:51:20Z",
              "updatedAt": "2024-02-06T10:51:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vJ00P",
          "commit": {
            "abbreviatedOid": "714a83e"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T10:54:53Z",
          "updatedAt": "2024-02-06T10:54:54Z",
          "comments": [
            {
              "originalPosition": 143,
              "body": "```suggestion\r\nAES-192 or AES-256 (algorithm ID 7, 8 or 9).\r\n\r\nAn implementation MUST check if the key length matches the key algorithm identifier, and abort otherwise.\r\n```\r\n\r\nThis would fully prevent cross-algorithm attacks",
              "createdAt": "2024-02-06T10:54:54Z",
              "updatedAt": "2024-02-06T10:54:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vKKxi",
          "commit": {
            "abbreviatedOid": "714a83e"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T11:41:47Z",
          "updatedAt": "2024-02-06T11:41:47Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "There are no periods after the preceding sentences in the algorithm specification. If we insert it here, we should do so in all algorithms in all steps.",
              "createdAt": "2024-02-06T11:41:47Z",
              "updatedAt": "2024-02-06T11:41:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vKNRG",
          "commit": {
            "abbreviatedOid": "714a83e"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T11:47:32Z",
          "updatedAt": "2024-02-06T11:47:32Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "You are right, I had seen that somewhere else we have a period on the last one, but we should avoid here",
              "createdAt": "2024-02-06T11:47:32Z",
              "updatedAt": "2024-02-06T11:47:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vKNfq",
          "commit": {
            "abbreviatedOid": "714a83e"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T11:48:01Z",
          "updatedAt": "2024-02-06T11:48:01Z",
          "comments": [
            {
              "originalPosition": 143,
              "body": "Good suggestion, I adopted a slightly different variant of the sentence.",
              "createdAt": "2024-02-06T11:48:01Z",
              "updatedAt": "2024-02-06T11:48:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vxRC2",
          "commit": {
            "abbreviatedOid": "3622d63"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T12:59:09Z",
          "updatedAt": "2024-02-12T12:59:09Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"public key\" is doubled in that sentence now, I would write  \"where `R` is the recipient's public key `eccPublicKey`\" or similar.",
              "createdAt": "2024-02-12T12:59:09Z",
              "updatedAt": "2024-02-12T12:59:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vxRM3",
          "commit": {
            "abbreviatedOid": "3622d63"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T12:59:33Z",
          "updatedAt": "2024-02-12T12:59:33Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "\"public key\" doubled as above",
              "createdAt": "2024-02-12T12:59:33Z",
              "updatedAt": "2024-02-12T12:59:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vyAne",
          "commit": {
            "abbreviatedOid": "3622d63"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T14:34:17Z",
          "updatedAt": "2024-02-12T14:34:18Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "OK, fixed",
              "createdAt": "2024-02-12T14:34:17Z",
              "updatedAt": "2024-02-12T14:34:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vyAs9",
          "commit": {
            "abbreviatedOid": "3622d63"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T14:34:27Z",
          "updatedAt": "2024-02-12T14:34:28Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "OK, fixed",
              "createdAt": "2024-02-12T14:34:28Z",
              "updatedAt": "2024-02-12T14:34:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vyDdu",
          "commit": {
            "abbreviatedOid": "67a4734"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-12T14:39:38Z",
          "updatedAt": "2024-02-12T14:39:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85v6ngz",
          "commit": {
            "abbreviatedOid": "67a4734"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-13T11:00:02Z",
          "updatedAt": "2024-02-13T11:00:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85wPUVj",
          "commit": {
            "abbreviatedOid": "21e3227"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "The whole PR looks good to me. Thanks!",
          "createdAt": "2024-02-15T15:18:57Z",
          "updatedAt": "2024-02-15T15:18:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDOIrmZ-85mDh_i",
      "title": "remove the binding between v6 and PQC encryption keys in the \u2026",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/81",
      "state": "MERGED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026Key Generation Strategies.\r\n\r\nThe text still referred to the state of the document when it was mandated to use v6 with PQC. This is now relaxed for encryption subkeys. ",
      "createdAt": "2024-02-05T17:53:57Z",
      "updatedAt": "2024-02-06T11:38:39Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "b047507ad73e25bef7d7914eba2b648cbb62d6cc",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "remove-pqc-v6-binding-in-keygen-strategies",
      "headRefOid": "24bec3e2c6e8b1c80408e8e90b908f661b716bca",
      "closedAt": "2024-02-06T11:38:39Z",
      "mergedAt": "2024-02-06T11:38:39Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "9fc798566d242ffabd8be2683b7d78a8ad572f20"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85vIKWC",
          "commit": {
            "abbreviatedOid": "24bec3e"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T07:05:47Z",
          "updatedAt": "2024-02-06T07:05:48Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nv6 PQ(/T) signature keys may also be attached to a certificate with a v4 or v6 primary key. The PQ(/T) signature keys may then be used whenever there is sufficient evidence that the recipient will be able to verify such signatures.\r\n```\r\n\r\nI understand that this statement may be controversial, because of the questionable security gain in PQ signature subkeys under a traditional primary key. But since anyone who receives such such a public key in an authenticated way and then stores it until the quantum computer era, can still be sure to have authentic PQ signature keys of that party.",
              "createdAt": "2024-02-06T07:05:48Z",
              "updatedAt": "2024-02-06T07:05:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIwlf",
          "commit": {
            "abbreviatedOid": "24bec3e"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T08:42:48Z",
          "updatedAt": "2024-02-06T08:42:49Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Technical point: You can't mix v4 and v6 keys. See \"10.1.3. OpenPGP v4 Certificate Structure\" and \"10.1.1. OpenPGP v6 Certificate Structure\" in the Crypto Refresh. And currently, we mandate v6 for PQC signature keys.\r\n\r\n(so it'd at least be restricted to v6)",
              "createdAt": "2024-02-06T08:42:49Z",
              "updatedAt": "2024-02-06T08:43:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIxjF",
          "commit": {
            "abbreviatedOid": "24bec3e"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T08:44:46Z",
          "updatedAt": "2024-02-06T08:44:46Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "As for the suggestion itself, I think it can be a useful (but niche) thing. Perhaps it's worth discussing this in a separate issue though, what do you think?",
              "createdAt": "2024-02-06T08:44:46Z",
              "updatedAt": "2024-02-06T08:44:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vIy2I",
          "commit": {
            "abbreviatedOid": "24bec3e"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T08:47:30Z",
          "updatedAt": "2024-02-06T08:47:30Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Oh, yes, clearly you can't attach a v6 subkey to a v4 primary key. You are right, this is an entirely different topic I brought up here. Probably it will surface anyway in the upcoming discussions, so I don't think we necessarily have to create an issue now.",
              "createdAt": "2024-02-06T08:47:30Z",
              "updatedAt": "2024-02-06T08:47:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vJYIU",
          "commit": {
            "abbreviatedOid": "24bec3e"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me, also good hint of specifying v6 + sigs",
          "createdAt": "2024-02-06T09:58:54Z",
          "updatedAt": "2024-02-06T09:58:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85vKIXb",
          "commit": {
            "abbreviatedOid": "24bec3e"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-06T11:36:07Z",
          "updatedAt": "2024-02-06T11:36:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 85,
      "id": "PR_kwDOIrmZ-85mYpFx",
      "title": "correction of IANA registry names",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/85",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes https://github.com/openpgp-pqc/draft-openpgp-pqc/issues/82",
      "createdAt": "2024-02-08T14:40:14Z",
      "updatedAt": "2024-03-04T20:58:26Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "cd6cea1557013f5e8da4f4f60d5c123c4a8aa4ee",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "fix-iana-table-names",
      "headRefOid": "2298e197c7540a3e1cf5e117012a2a4d0e9d5566",
      "closedAt": "2024-03-04T20:58:26Z",
      "mergedAt": "2024-03-04T20:58:26Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "57c59e5fbebefd7c2c6c248a42d6f87c5841f64a"
      },
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @falko-strenzke!\r\n\r\nI would personally add a new section to the changelog and document this fix there, it makes reviewing changes much easier, and I'd like to take it more seriously.",
          "createdAt": "2024-02-08T19:11:42Z",
          "updatedAt": "2024-02-08T19:11:42Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> Thanks @falko-strenzke!\r\n> \r\n> I would personally add a new section to the changelog and document this fix there, it makes reviewing changes much easier, and I'd like to take it more seriously.\r\n\r\nDone.",
          "createdAt": "2024-02-12T14:04:32Z",
          "updatedAt": "2024-02-12T14:04:32Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I wouldn't put the temporary IDs in the table, rather `TBD`",
          "createdAt": "2024-02-12T14:08:50Z",
          "updatedAt": "2024-02-12T14:08:50Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> I wouldn't put the temporary IDs in the table, rather `TBD`\r\n\r\nMakes sense, clearly. Done.",
          "createdAt": "2024-02-12T14:13:38Z",
          "updatedAt": "2024-02-12T14:13:38Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "@dkg can we merge this one?",
          "createdAt": "2024-03-01T09:52:43Z",
          "updatedAt": "2024-03-01T09:52:43Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging since it's the cut-off for draft submission. If any further change is required, it will be addressed in revision 02",
          "createdAt": "2024-03-04T20:58:15Z",
          "updatedAt": "2024-03-04T20:58:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85vhZld",
          "commit": {
            "abbreviatedOid": "4531b32"
          },
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks for writing this up, @falko-strenzke !  i think it needs more work to be clearer to IANA",
          "createdAt": "2024-02-08T18:57:19Z",
          "updatedAt": "2024-02-08T19:02:14Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "this sees like it belongs in a separate commit",
              "createdAt": "2024-02-08T18:57:19Z",
              "updatedAt": "2024-02-08T19:02:14Z"
            },
            {
              "originalPosition": 7,
              "body": "i would drop the trailing `/openpgp.xhtml` -- or maybe drop the whole URL, since we want the updates to happen to the registry itself, not just the html variant.",
              "createdAt": "2024-02-08T19:00:25Z",
              "updatedAt": "2024-02-08T19:02:14Z"
            },
            {
              "originalPosition": 28,
              "body": "the \"OpenPGP Public Key Algorithms\" table has the following columns:\r\n\r\nID, Algorithm, Public Key Format, Secret Key Format, Signature Format, PKESK Format, Reference\r\n\r\nThe tables linked here don't tell IANA how to populate all the columns.",
              "createdAt": "2024-02-08T19:01:45Z",
              "updatedAt": "2024-02-08T19:02:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vxw4-",
          "commit": {
            "abbreviatedOid": "4531b32"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T14:03:51Z",
          "updatedAt": "2024-02-12T14:03:52Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Fixed now.",
              "createdAt": "2024-02-12T14:03:51Z",
              "updatedAt": "2024-02-12T14:03:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vxw9u",
          "commit": {
            "abbreviatedOid": "4531b32"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T14:04:01Z",
          "updatedAt": "2024-02-12T14:04:01Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "> i would drop the trailing `/openpgp.xhtml`\r\n\r\nFixed now.",
              "createdAt": "2024-02-12T14:04:01Z",
              "updatedAt": "2024-02-12T14:04:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vxxFj",
          "commit": {
            "abbreviatedOid": "4531b32"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T14:04:16Z",
          "updatedAt": "2024-02-12T14:04:16Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Added a table with all the information.",
              "createdAt": "2024-02-12T14:04:16Z",
              "updatedAt": "2024-02-12T14:04:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vybvt",
          "commit": {
            "abbreviatedOid": "4c67c37"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-12T15:24:04Z",
          "updatedAt": "2024-02-12T15:24:18Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nFurthermore, IANA is requested to add the algorithm IDs defined in {{iana-pubkey-algos}} to the existing registry `OpenPGP Public Key Algorithms`. Brackets denote fields the presence of which is conditional.\r\n```",
              "createdAt": "2024-02-12T15:24:04Z",
              "updatedAt": "2024-02-12T15:24:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85vyi5H",
          "commit": {
            "abbreviatedOid": "4c67c37"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T15:36:28Z",
          "updatedAt": "2024-02-12T15:36:29Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I corrected the sentence in yet another way.",
              "createdAt": "2024-02-12T15:36:28Z",
              "updatedAt": "2024-02-12T15:36:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v6brb",
          "commit": {
            "abbreviatedOid": "0eebefa"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T10:43:19Z",
          "updatedAt": "2024-02-13T10:43:19Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\nTBD    | ML-KEM-768 + X25519 | 32 octets X25519 public key ({{tab-ecdh-cfrg-artifacts}}), 1184 octets ML-KEM-768 public key ({{tab-mlkem-artifacts}}) | 32 octets X25519 secret key ({{tab-ecdh-cfrg-artifacts}}), 2400 octets ML-KEM-768 secret-key ({{tab-mlkem-artifacts}}) | N/A                                                                                                               | 32 octets X25519 ciphertext, 1088 octets ML-KEM-768 ciphertext \\[, 1 octet algorithm ID in case of v3 PKESK\\], 1 octet length field of value `n`, `n` octets wrapped session key ({{ecc-mlkem-pkesk}}) | {{ecc-mlkem}}\r\n```",
              "createdAt": "2024-02-13T10:43:19Z",
              "updatedAt": "2024-02-13T10:45:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v6cDZ",
          "commit": {
            "abbreviatedOid": "0eebefa"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T10:44:07Z",
          "updatedAt": "2024-02-13T10:44:08Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Complete reference to ML-KEM parameter set like you did it for ML-DSA.",
              "createdAt": "2024-02-13T10:44:07Z",
              "updatedAt": "2024-02-13T10:44:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v6ckE",
          "commit": {
            "abbreviatedOid": "0eebefa"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T10:45:07Z",
          "updatedAt": "2024-02-13T10:45:08Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nTBD    | ML-KEM-1024 + X448  | 56 octets X448 public key ({{tab-ecdh-cfrg-artifacts}}), 1568  octets ML-KEM-1024 public key ({{tab-mlkem-artifacts}})  | 56 octets X448 secret key ({{tab-ecdh-cfrg-artifacts}}), 3168 octets ML-KEM-1024 secret-key ({{tab-mlkem-artifacts}})   | N/A                                                                                                               | 56 octets X448 ciphertext, 1568 octets ML-KEM-1024 ciphertext \\[, 1 octet algorithm ID in case of v3 PKESK\\], 1 octet length field of value `n`, `n` octets wrapped session key ({{ecc-mlkem-pkesk}}) | {{ecc-mlkem}}\r\n```",
              "createdAt": "2024-02-13T10:45:07Z",
              "updatedAt": "2024-02-13T10:45:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v6cob",
          "commit": {
            "abbreviatedOid": "0eebefa"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T10:45:17Z",
          "updatedAt": "2024-02-13T10:45:17Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "As above",
              "createdAt": "2024-02-13T10:45:17Z",
              "updatedAt": "2024-02-13T10:45:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v6dLg",
          "commit": {
            "abbreviatedOid": "0eebefa"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T10:46:26Z",
          "updatedAt": "2024-02-13T10:46:26Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nTBD    | ML-DSA-87 + Ed448   | 57 octets Ed448 public key ({{tab-eddsa-artifacts}}),  2592 octets ML-DSA-87 public key ({{tab-mldsa-artifacts}})  | 57 octets Ed448 secret key ({{tab-eddsa-artifacts}}), 4864 octets ML-DSA-87 secret ({{tab-mldsa-artifacts}})       | 114 octets Ed448 signature ({{tab-eddsa-artifacts}}), 4595 octets ML-DSA-87 signature ({{tab-mldsa-artifacts}}) | N/A                                                                                                                                                                                             | {{ecc-mldsa}}\r\n```",
              "createdAt": "2024-02-13T10:46:26Z",
              "updatedAt": "2024-02-13T10:46:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v6dPK",
          "commit": {
            "abbreviatedOid": "0eebefa"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T10:46:34Z",
          "updatedAt": "2024-02-13T10:46:34Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Typo",
              "createdAt": "2024-02-13T10:46:34Z",
              "updatedAt": "2024-02-13T10:46:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v6edO",
          "commit": {
            "abbreviatedOid": "0eebefa"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T10:48:06Z",
          "updatedAt": "2024-02-13T10:48:06Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Is SLH-DSA-SHAKE missing in the table?",
              "createdAt": "2024-02-13T10:48:06Z",
              "updatedAt": "2024-02-13T10:48:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v6fDf",
          "commit": {
            "abbreviatedOid": "0eebefa"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Went over the IANA table and left some suggestions and comments. Didn't check the numbers though :-)",
          "createdAt": "2024-02-13T10:49:05Z",
          "updatedAt": "2024-02-13T10:49:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85v7VpM",
          "commit": {
            "abbreviatedOid": "0eebefa"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T12:31:47Z",
          "updatedAt": "2024-02-13T12:31:47Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Yes, indeed. Now added.",
              "createdAt": "2024-02-13T12:31:47Z",
              "updatedAt": "2024-02-13T12:31:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v7dQZ",
          "commit": {
            "abbreviatedOid": "07f5d17"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-13T12:48:27Z",
          "updatedAt": "2024-02-13T12:48:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 86,
      "id": "PR_kwDOIrmZ-85mavlL",
      "title": "use experimental codepoints for now, during interop testing",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/86",
      "state": "CLOSED",
      "author": "dkg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes: #83",
      "createdAt": "2024-02-08T19:38:49Z",
      "updatedAt": "2024-02-12T14:07:26Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "9fc798566d242ffabd8be2683b7d78a8ad572f20",
      "headRepository": "dkg/openpgp-pqc",
      "headRefName": "avoid-codepoint-squatting",
      "headRefOid": "c5d906a33900a88ece05425a92ff7cc7e870ccfd",
      "closedAt": "2024-02-12T14:07:25Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "This is one proposal for how to use experimental codepoints.",
          "createdAt": "2024-02-08T19:39:28Z",
          "updatedAt": "2024-02-08T19:39:28Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "@TJ-91 suggests on list simply not assigning codepoints to the MAY algorithms, rather than having overlap.  This also seems fine to me.",
          "createdAt": "2024-02-09T14:34:43Z",
          "updatedAt": "2024-02-09T14:34:43Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing in favor of #87 ",
          "createdAt": "2024-02-12T14:07:25Z",
          "updatedAt": "2024-02-12T14:07:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 87,
      "id": "PR_kwDOIrmZ-85mnCtB",
      "title": "assign experimental/private codepoints; leave out MAY algorithms",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/87",
      "state": "MERGED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #83. this is an alternative to PR #86.\r\n\r\nI only assign IDs to \"MUST\" and \"SHOULD\" algorithms.\r\nIn cases where a referenced ID is not assigned, I write `TBD (Full Algorithm Name)` to keep the reference in tact.\r\n\r\nIn cases where there are multiple IDs listed and the IDs are only there for convenience and the meaning of the table is still clear, I only write \"TBD\" to keep the draft more readable. For example in `Table 12: ML-DSA parameters and artifact lengths in octets`.",
      "createdAt": "2024-02-12T08:46:42Z",
      "updatedAt": "2024-02-12T16:16:25Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "9fc798566d242ffabd8be2683b7d78a8ad572f20",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "issue-83-codepoints-alternative",
      "headRefOid": "71c179f4575930dc3065a6aa87892be503064133",
      "closedAt": "2024-02-12T14:03:26Z",
      "mergedAt": "2024-02-12T14:03:26Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "19fe56218a7d4796b6cdbfdb8e64a85826b89de3"
      },
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "We still have codepoints left, so we can just use the next one for SHAKE if it comes to that. I'd be fine with both options.",
          "createdAt": "2024-02-12T11:02:03Z",
          "updatedAt": "2024-02-12T11:02:03Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> We still have codepoints left, so we can just use the next one for SHAKE if it comes to that. I'd be fine with both options.\r\n\r\nYes, I think we can worry about that later.",
          "createdAt": "2024-02-12T11:48:25Z",
          "updatedAt": "2024-02-12T11:48:25Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "May sound silly, but what about using 105-109 instead? Most experimental algos I know of are already using 100-102 and this could be a source of conflict",
          "createdAt": "2024-02-12T12:12:29Z",
          "updatedAt": "2024-02-12T12:12:29Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> May sound silly, but what about using 105-109 instead? Most experimental algos I know of are already using 100-102 and this could be a source of conflict\r\n\r\nThen that makes sense I think. Clearly, none of these solutions are robust \u2013 as soon as anyone else arrives at the same solution there will be a conflict...",
          "createdAt": "2024-02-12T12:21:14Z",
          "updatedAt": "2024-02-12T12:21:14Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I changed it to 105-109. I'm not sure if it's really relevant but I also don't have any problem with the IDs starting at 105.",
          "createdAt": "2024-02-12T13:10:32Z",
          "updatedAt": "2024-02-12T13:10:32Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for this, @TJ-91 !  I think this is the right way forward.",
          "createdAt": "2024-02-12T16:16:24Z",
          "updatedAt": "2024-02-12T16:16:24Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85vwd-q",
          "commit": {
            "abbreviatedOid": "b3590d2"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks for coming up with the solution @TJ-91 and @dkg and this PR. The only thing that I am a bit concerned about right now is that I anticipate that we will rather prioritise SLH-DSA-SHAKE over -SHA2, and thus the meaning of that code point will change again, potentially causing problems during interop testing if one implementation misses to adopt that change. So maybe we wait a bit with the assignment of any code points for SLH-DSA right now?",
          "createdAt": "2024-02-12T10:53:08Z",
          "updatedAt": "2024-02-12T10:53:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85vw0Cs",
          "commit": {
            "abbreviatedOid": "b3590d2"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-12T11:48:39Z",
          "updatedAt": "2024-02-12T11:48:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85vxak2",
          "commit": {
            "abbreviatedOid": "71c179f"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-12T13:21:53Z",
          "updatedAt": "2024-02-12T13:21:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85vxk44",
          "commit": {
            "abbreviatedOid": "71c179f"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you!",
          "createdAt": "2024-02-12T13:43:11Z",
          "updatedAt": "2024-02-12T13:43:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 88,
      "id": "PR_kwDOIrmZ-85moY9g",
      "title": "relax EC-key reuse to SHOULD",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/88",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Note: mentioning fingerprints here doesn't seem reasonable as the two algorithms in question are clearly different ones",
      "createdAt": "2024-02-12T12:35:25Z",
      "updatedAt": "2024-02-12T13:05:31Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "9fc798566d242ffabd8be2683b7d78a8ad572f20",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "relax-key-reuse-restriction",
      "headRefOid": "46d90f147ee6d4b5f2d85ff5027ec076fa7c61c2",
      "closedAt": "2024-02-12T13:05:31Z",
      "mergedAt": "2024-02-12T13:05:31Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "d8b3d5142f2131898a5de5cab658bd66ab27c6e2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85vxNgQ",
          "commit": {
            "abbreviatedOid": "46d90f1"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Sounds good to me, note that the fingerprints comment was intended to be obvious. IMO good to remove",
          "createdAt": "2024-02-12T12:50:28Z",
          "updatedAt": "2024-02-12T12:50:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85vxTFI",
          "commit": {
            "abbreviatedOid": "46d90f1"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-12T13:04:11Z",
          "updatedAt": "2024-02-12T13:04:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 89,
      "id": "PR_kwDOIrmZ-85mo-xq",
      "title": "fix .gitignore for .xml for new draft file name",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/89",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-12T14:09:41Z",
      "updatedAt": "2024-02-12T15:26:53Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "19fe56218a7d4796b6cdbfdb8e64a85826b89de3",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "fix-ignore-xml",
      "headRefOid": "eea4301acb312f39055b3cb55b07447f8eab0c33",
      "closedAt": "2024-02-12T15:26:45Z",
      "mergedAt": "2024-02-12T15:26:45Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "86a468c8636263c7623d7b681a646e444debdee4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85vx034",
          "commit": {
            "abbreviatedOid": "eea4301"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-12T14:11:51Z",
          "updatedAt": "2024-02-12T14:11:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85vyaoX",
          "commit": {
            "abbreviatedOid": "eea4301"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-12T15:22:00Z",
          "updatedAt": "2024-02-12T15:22:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 90,
      "id": "PR_kwDOIrmZ-85mqTm3",
      "title": "mandate AES-256 support and promote its use",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/90",
      "state": "MERGED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Here is my proposal to include `AES-256` as a mandatory-to-implement algorithm and to promote its use as discussed in #74.\r\nI tried to consider all cases and find the best balance between forcing (and migrating to) AES-256 and interoperability with the older specs (RFC4880, Crypto Refresh).\r\n\r\nCases to consider are:\r\n\r\n* Encrypting to a v4 certificate with a PQ/T encryption subkey\r\n* Encrypting to a v4 certificate with only traditional keys\r\n* Encrypting to a v6 certificate with any PQ(/T) key.\r\n* Encrypting to a v6 certificate without any PQ(/T) key.\r\n* Encrypting to certificates that explicitly indicate AES-128 or AES-256 support\r\n* Encrypting to certificates that do not indicate AES-128 or AES-256 support\r\n* Encrypting to any combination of the cases above\r\n\r\nAnother important aspect: If all involved parties use PQ(/T) keys, then AES-256 will be supported (and hopefully favored) by every party. To further push AES-256, I have added the following sentence to the security considerations:\r\n\r\n> An implementation SHOULD use `AES-256` in the case of a v1 SEIPD packet, or `AES-256` and `OCB` in the case of a v2 SEIPD packet, if all recipients indicate support for it (explicitly or implicitly).\r\n\r\nThe reason is that when carelessly implementing the specification, an implementation might otherwise choose to take the simple way of always encrypting via AES-128, even if every recipient uses the \"Level 5\" PQ algorithms. \r\n\r\n---\r\n\r\nPlease also comment on:\r\n\r\n* The place where the text is added and the names of the sections\r\n* Is there a better place to state `Implementations MUST implement AES-256`?\r\n\r\n---\r\n\r\nIf we want to ask for opinions on the mailing list, the argument is: `AES-256` is the obvious choice and this will result in everyone using PQ(/T) + `AES-256` in the long run. We are committed to `AES-256` anyway by the KEM construction.",
      "createdAt": "2024-02-12T17:25:08Z",
      "updatedAt": "2024-02-26T09:25:15Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "28c1e0fda2d2055057f0ffcc19c8a8832ccda52b",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "issue-74-aes256-mandatory",
      "headRefOid": "443ff10d63530c364e16d31d43c9e38b2601a175",
      "closedAt": "2024-02-26T09:25:15Z",
      "mergedAt": "2024-02-26T09:25:15Z",
      "mergedBy": "TJ-91",
      "mergeCommit": {
        "oid": "d78d69680fd2a3bb06a8e38d0d3b8c367107fb1a"
      },
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "* I moved the `SHOULD` from the security considerations\r\n* I added some text to justify the \"SHOULD use AES-256\" thing. Is it sufficient?\r\n* I adjusted the titles of the two sections to match\r\n",
          "createdAt": "2024-02-13T10:49:44Z",
          "updatedAt": "2024-02-13T10:49:44Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Please add a note in the changelog :)",
          "createdAt": "2024-02-13T12:46:47Z",
          "updatedAt": "2024-02-13T12:46:47Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I rebased, added a changelog for the next version, and addressed Falko's comments",
          "createdAt": "2024-02-13T14:22:29Z",
          "updatedAt": "2024-02-13T14:22:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85v4bUA",
          "commit": {
            "abbreviatedOid": "ead5b91"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T07:54:45Z",
          "updatedAt": "2024-02-13T07:54:45Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "I am not sure about making normative specifications in the security considerations. I think the \"SHOULD\" better appear in the normative part.",
              "createdAt": "2024-02-13T07:54:45Z",
              "updatedAt": "2024-02-13T07:54:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v5hZx",
          "commit": {
            "abbreviatedOid": "ead5b91"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T09:39:55Z",
          "updatedAt": "2024-02-13T09:39:55Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "@TJ-91 : We should move lines 1571-1573 to the above section \"Symmetric Algorithms for SEIPD Packets\", immediately behind \"Implementations MUST implement AES-256\". I think this intgerates then seamless into the rest of the text.",
              "createdAt": "2024-02-13T09:39:55Z",
              "updatedAt": "2024-02-13T10:38:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v6d3Q",
          "commit": {
            "abbreviatedOid": "ead5b91"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T10:47:38Z",
          "updatedAt": "2024-02-13T10:47:38Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "done",
              "createdAt": "2024-02-13T10:47:38Z",
              "updatedAt": "2024-02-13T10:47:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v6h7s",
          "commit": {
            "abbreviatedOid": "d288bb9"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T10:53:53Z",
          "updatedAt": "2024-02-13T10:53:53Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "Do you mean the ones in section \"Symmetric Algorithms for SEIPD Packets\"?\r\n\r\nIf yes, I would make it plural (\"clear and easy rules\") and add a link to that section.",
              "createdAt": "2024-02-13T10:53:53Z",
              "updatedAt": "2024-02-13T10:53:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v6tyy",
          "commit": {
            "abbreviatedOid": "d288bb9"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T11:12:21Z",
          "updatedAt": "2024-02-13T11:12:21Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "I rephrased it and hopefully it's a bit more clear. I only intend to contextualize the \"An implementation SHOULD use `AES-256` in the case ...\" statement.",
              "createdAt": "2024-02-13T11:12:21Z",
              "updatedAt": "2024-02-13T11:12:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v7MsR",
          "commit": {
            "abbreviatedOid": "0424ab3"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Good for me.\r\n@TJ-91 : Thank you for the effort and this very nice guidance towards AES-256.",
          "createdAt": "2024-02-13T12:12:23Z",
          "updatedAt": "2024-02-13T12:12:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85v7ziO",
          "commit": {
            "abbreviatedOid": "0424ab3"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-02-13T13:32:35Z",
          "updatedAt": "2024-02-13T14:00:47Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "In a specification, providing the reason for mandating something is usually not given. I agree, that it might make sense here, but in that case, it should come after the specification. For instance let the sentence begin with \"If  `AES-256` is not ...\" and then append the sentence: \"This is justified since AES-256 is mandatory ...\".",
              "createdAt": "2024-02-13T13:32:35Z",
              "updatedAt": "2024-02-13T14:00:47Z"
            },
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nSince `OCB` is mandatory to implement, if the pair (`AES-256`,  `OCB`) is not explicitly in the list\r\n```\r\n\r\nAlso same comment regarding giving reason after spec. as above.",
              "createdAt": "2024-02-13T13:53:05Z",
              "updatedAt": "2024-02-13T14:00:47Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nIf the pair (`AES-128`, `OCB`) is also implictly added to the list, it is added after the pair (`AES-256`, `OCB`).\r\n```",
              "createdAt": "2024-02-13T13:55:55Z",
              "updatedAt": "2024-02-13T14:00:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v8LJX",
          "commit": {
            "abbreviatedOid": "0424ab3"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T14:08:21Z",
          "updatedAt": "2024-02-13T14:08:21Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "In this case I took the Crypto Refresh as a blueprint (which took RFC4880 as a blueprint). However, I agree that it's better to simply state the fact before giving a reason and will rephrase it",
              "createdAt": "2024-02-13T14:08:21Z",
              "updatedAt": "2024-02-13T14:08:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v8VWu",
          "commit": {
            "abbreviatedOid": "0424ab3"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T14:24:11Z",
          "updatedAt": "2024-02-13T14:24:11Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I wrote it as \"the pair AES-256 with OCB\" since I think it looks less odd. The Crypto Refresh also writes it like this (minus \"the pair\"). I think it's clear enough and definitely better than \"and\"",
              "createdAt": "2024-02-13T14:24:11Z",
              "updatedAt": "2024-02-13T14:24:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85v8XOL",
          "commit": {
            "abbreviatedOid": "443ff10"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "OK, great :+1: ",
          "createdAt": "2024-02-13T14:27:25Z",
          "updatedAt": "2024-02-13T14:27:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85wPSj2",
          "commit": {
            "abbreviatedOid": "443ff10"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-15T15:15:52Z",
          "updatedAt": "2024-02-15T15:15:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 92,
      "id": "PR_kwDOIrmZ-85nQj6E",
      "title": "Added an analysis of the composite signatures in the security considerations.",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/92",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-19T08:40:07Z",
      "updatedAt": "2024-03-04T07:38:02Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "f69fdffb35ed26b43c2355461c3ef1709a06c307",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "comp-sig-sec-cons",
      "headRefOid": "11b8920770869914bc841eae09cb205ee03f53b1",
      "closedAt": "2024-03-04T07:38:02Z",
      "mergedAt": "2024-03-04T07:38:02Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "2a2b032ed6e05b53238211064095c30737430d29"
      },
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with the arguments that you make but I think we can omit some of the things you are explaining.\r\nI think the second paragraph is useful to have in mind as a protocol designer but it may not be this specification's job to explain this to the implementer. Also, the first paragraph could stop after the first two sentences which explain what the attack is.\r\nThat would keep it a bit more concise and to the point, i.e., we state what the attack is and why the attack does not apply to this construction.\r\n\r\nAs for explaining the resistance against the described weak existential forgery attack, I would either add this to a new section, or make the section title more general.",
          "createdAt": "2024-02-19T10:17:18Z",
          "updatedAt": "2024-02-19T10:17:18Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> I agree with the arguments that you make but I think we can omit some of the things you are explaining. I think the second paragraph is useful to have in mind as a protocol designer but it may not be this specification's job to explain this to the implementer. Also, the first paragraph could stop after the first two sentences which explain what the attack is. That would keep it a bit more concise and to the point, i.e., we state what the attack is and why the attack does not apply to this construction.\r\n\r\nOK, makes sense. I reduced the text significantly.\r\n\r\n> \r\n> As for explaining the resistance against the described weak existential forgery attack, I would either add this to a new section, or make the section title more general.\r\n\r\nYes, I generalized the title.\r\n",
          "createdAt": "2024-02-19T11:20:06Z",
          "updatedAt": "2024-02-19T11:20:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85wjCII",
          "commit": {
            "abbreviatedOid": "0df18ba"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-19T11:51:03Z",
          "updatedAt": "2024-02-19T12:08:26Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "> whereas the stripped signature\r\n\r\noriginal / non-stripped",
              "createdAt": "2024-02-19T11:51:04Z",
              "updatedAt": "2024-02-19T12:08:26Z"
            },
            {
              "originalPosition": 39,
              "body": "1. There also is the case that the receiver cannot verify the stripped signature at all (for example he only accepts PQ signatures but the attacker stripped the PQ signature and only an ECDSA signature remains).\r\n2. In your scenario, there actually is the possibility that you can still be sure that the signature is valid if you are sure that it's been securely stored on your device since before the \"cut-off date\". The Crypto Refresh already opens up this possibility for signatures made with sha1/md5/ripemd so that's not a far stretch.\r\n\r\nTherefore, I would keep it more general here. For example: \"This reduces the options of the recipient to verify the message and might lead to verification failures, even when the original, non-stripped signature would have been verifiable.\"",
              "createdAt": "2024-02-19T12:07:35Z",
              "updatedAt": "2024-02-19T12:08:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85wjM-s",
          "commit": {
            "abbreviatedOid": "0df18ba"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-19T12:16:17Z",
          "updatedAt": "2024-02-19T12:16:17Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "\"stripped signature\" is meant to refer to that component signature, that is removed. Probably I should introduce the word \"component\" here to make that clear.",
              "createdAt": "2024-02-19T12:16:17Z",
              "updatedAt": "2024-02-19T12:16:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85wjPIs",
          "commit": {
            "abbreviatedOid": "0df18ba"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-19T12:21:03Z",
          "updatedAt": "2024-02-19T12:21:04Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "> 1. There also is the case that the receiver cannot verify the stripped signature at all (for example he only accepts PQ signatures but the attacker stripped the PQ signature and only an ECDSA signature remains).\r\n> \r\n\r\nI don't think the goal is here to provide a full treatment of all cases. This is not a scientific treatment, but an example what can go wrong. In any case, if the recipient cannot verify any signature, that is the case that should not lead to a later availability problem, because it is detected at the time of message reception. The attacker can always also just strip off all signatures to achieve that situation. So this case is trivial and out of scope.\r\n\r\n>     2. In your scenario, there actually is the possibility that you can still be sure that the signature is valid if you are sure that it's been securely stored on your device since before the \"cut-off date\". The Crypto Refresh already opens up this possibility for signatures made with sha1/md5/ripemd so that's not a far stretch.\r\n\r\nIf the message is known to have not been altered, then no signature verification is needed at all. Then you simply reduce the signature packet to the information about the signer. The signature verification with an untrusted algorithm is worthless in any case.\r\n\r\n> \r\n> \r\n> Therefore, I would keep it more general here. For example: \"This reduces the options of the recipient to verify the message and might lead to verification failures, even when the original, non-stripped signature would have been verifiable.\"\r\n\r\n",
              "createdAt": "2024-02-19T12:21:04Z",
              "updatedAt": "2024-02-19T12:21:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85wjXca",
          "commit": {
            "abbreviatedOid": "0df18ba"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-19T12:37:28Z",
          "updatedAt": "2024-02-19T12:37:28Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "An example of what @TJ-91 mentions is caching the verification status upon receiving\r\n\r\n> Therefore, I would keep it more general here. For example: \"This reduces the options of the recipient to verify the message and might lead to verification failures, even when the original, non-stripped signature would have been verifiable.\"\r\n\r\nI think this suggestion is good",
              "createdAt": "2024-02-19T12:37:28Z",
              "updatedAt": "2024-02-19T12:38:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85wjgdU",
          "commit": {
            "abbreviatedOid": "0df18ba"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-19T12:56:05Z",
          "updatedAt": "2024-02-19T12:56:06Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "> I don't think the goal is here to provide a full treatment of all cases\r\n\r\nYes I agree. I still think a general statement has more weight here and the example is not motivated by a realistic attack scenario. Perhaps you can make it more clear that this is an example of what can happen. To me it currently reads like the continuation of the description of a stripping attack.\r\n\r\n> If the message is known to have not been altered, then no signature verification is needed at all. \r\n\r\nIt is, if you simply store the signed message. You verified it when you received it but you didn't write down \"this was a valid signature at the time of receiving it\". Then you need to re-verify the signature in order to come to the same conclusion now.\r\n\r\n> The signature verification with an untrusted algorithm is worthless in any case.\r\n\r\nThat's not true. For verification you can follow different models and one model is to accept signatures as long as they are valid at the time of creation. As long as you are sure that the signature really has been created at the time and is valid at that time, it will work.\r\n\r\n@wussler yes that would be one example \r\n\r\n@falko-strenzke Anyway it's just a tangential topic and I'm fine if you keep it as it is.",
              "createdAt": "2024-02-19T12:56:06Z",
              "updatedAt": "2024-02-19T12:56:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85wkAdw",
          "commit": {
            "abbreviatedOid": "0df18ba"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-19T14:01:45Z",
          "updatedAt": "2024-02-19T14:01:46Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "My idea here is the description signature stripping as a cryptographic attack. What you @TJ-91 and @wussler are suggesting is application specific settings which require quite some eloboration of what is stored and how. I do not see any gain in that, especially because this is the case (i.e. signature stripping has happened) which is __not__ applicable to OpenPGP. Your proposed approach will either require elaboration of the purely hypothetical (since entirely unnecessary for OpenPGP) features of the application with respect to stored information or will blur the description if the elaboration is omitted.",
              "createdAt": "2024-02-19T14:01:46Z",
              "updatedAt": "2024-02-19T14:01:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85wkJ_M",
          "commit": {
            "abbreviatedOid": "0df18ba"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-19T14:19:31Z",
          "updatedAt": "2024-02-19T14:19:31Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "I didn't intend to suggest describing any of that. I only suggest to change from an example to a more general description like this:\r\n\r\n> Therefore, I would keep it more general here. For example: \"This reduces the options of the recipient to verify the message and might lead to verification failures, even when the original, non-stripped signature would have been verifiable.\"\r\n\r\nThe rest is only justification why I prefer a general statement. There is no need to describe how to verify stored messages. I fear we are confused by the discussion so let's just stop it and you decide whether you want to leave the example in its current form or provide the more general description that I suggest.",
              "createdAt": "2024-02-19T14:19:31Z",
              "updatedAt": "2024-02-19T14:19:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85wkT59",
          "commit": {
            "abbreviatedOid": "0df18ba"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-19T14:38:00Z",
          "updatedAt": "2024-02-19T14:38:01Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "> Therefore, I would keep it more general here. For example: \"This reduces the options of the recipient to verify the message and might lead to verification failures, even when the original, non-stripped signature would have been verifiable.\"\r\n\r\nI fear this will be confusing because in our scenario, there are no \"options\" for the recipient regarding which signature(s) to verify, since we are specifying a composite scheme. If you think it is necessary to include more information, then it should fit to our type of composite signatures.",
              "createdAt": "2024-02-19T14:38:00Z",
              "updatedAt": "2024-02-19T14:38:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85wkvgw",
          "commit": {
            "abbreviatedOid": "5673a0e"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-19T15:22:39Z",
          "updatedAt": "2024-02-19T15:22:39Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Let me summarize/paraphrise your text regarding stripping attacks:\r\n\r\n1. Description of the general problem of stripping attacks when there are multiple signatures\r\n2. Description of what a stripping attack is\r\n3. Example (recipient stores message, cant verify later)\r\n4. Explanation why the composite scheme is not vulnerable\r\n\r\nI only propose to replace \"3\". At this point, you do not talk about composite signatures but about the general principle of what could happen with multiple signatures if there are no mitigations for stripping.\r\n\r\nTo clarify, the structure would then be:\r\n\r\n1. as above\r\n2. as above\r\n3. general statement how the stripping affects the verifier\r\n4. as above\r\n\r\nI hope it's clear now",
              "createdAt": "2024-02-19T15:22:39Z",
              "updatedAt": "2024-02-19T15:22:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85wqcJe",
          "commit": {
            "abbreviatedOid": "5673a0e"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T11:20:03Z",
          "updatedAt": "2024-02-20T11:20:03Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "I now generalized the description of the attack.",
              "createdAt": "2024-02-20T11:20:03Z",
              "updatedAt": "2024-02-20T11:20:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85wqn2o",
          "commit": {
            "abbreviatedOid": "0df18ba"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T11:45:02Z",
          "updatedAt": "2024-02-20T11:45:02Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "looks good to me thanks!",
              "createdAt": "2024-02-20T11:45:02Z",
              "updatedAt": "2024-02-20T11:45:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85wqn9f",
          "commit": {
            "abbreviatedOid": "11b8920"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-20T11:45:18Z",
          "updatedAt": "2024-02-20T11:45:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85x41c1",
          "commit": {
            "abbreviatedOid": "11b8920"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-01T09:46:09Z",
          "updatedAt": "2024-03-01T09:46:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85x5L6k",
          "commit": {
            "abbreviatedOid": "11b8920"
          },
          "author": "fluppe2",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-01T10:27:32Z",
          "updatedAt": "2024-03-01T10:27:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 93,
      "id": "PR_kwDOIrmZ-85ny71w",
      "title": "Align PKESK v3 ciphertext format with crypto-refresh's X25519 and X448",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/93",
      "state": "MERGED",
      "author": "dkg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In [\u00a75.1.6 of the crypto-refresh](https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-13.html#section-5.1.6), the order of fields in the ciphertext object is:\r\n\r\n- 32 octets representing an ephemeral X25519 public key.\r\n- A one-octet size of the following fields.\r\n- The one-octet algorithm identifier, if it was passed (in the case of a v3 PKESK packet).\r\n- The encrypted session key.\r\n\r\nThis change aligns the PQC wire format with the crypto-refresh wire format by swapping the length octet with the optional v3 PKESK algorithm identifier.\r\n\r\nThis has no impact on the v6 PKESK wire format, since the algorithm identifier field isn't present.\r\n\r\nIt is easier for implementers if they don't have to tweak these things between algorithms.",
      "createdAt": "2024-02-23T21:30:54Z",
      "updatedAt": "2024-02-27T07:30:58Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "f69fdffb35ed26b43c2355461c3ef1709a06c307",
      "headRepository": "dkg/openpgp-pqc",
      "headRefName": "align-ciphertext-fields-with-c-r",
      "headRefOid": "17dbbbf7a7fb3d0ea0c772a358d6191899c643b6",
      "closedAt": "2024-02-27T07:30:58Z",
      "mergedAt": "2024-02-27T07:30:58Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "cb1fd4f22a3c40f918bfbada23aa13c5240eff24"
      },
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "In my view, what the crypto-refresh does here does not make much sense. The size field is clearly there for the wrapped session key (isn't it?). Why then group the algorithm ID together with the wrapped session key?\r\n\r\nYet I am not opposed to aligning with the crypto refresh here, but first I would like to hear what others have to say to this.",
          "createdAt": "2024-02-26T06:33:49Z",
          "updatedAt": "2024-02-26T06:33:49Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure what's \"logical\" about either way.  if we want to argue logic, we can just say \"until the end of the packet\" and then we don't need a length octet at all.  i believe the idea is that it's just there for \"safety\" purposes, or for ease in parsing.  If we're going to make it for ease in parsing, it really should not diverge from other packets which have the same behavior.",
          "createdAt": "2024-02-26T14:33:20Z",
          "updatedAt": "2024-02-26T14:33:20Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "@wussler What do you think?",
          "createdAt": "2024-02-26T14:34:36Z",
          "updatedAt": "2024-02-26T14:34:36Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "fwiw, with the size octet before the algorithm ID octet, you can tell whether the extra algorithm ID octet is supposed to be there based on whether the size octet mod 8 is congruent to 1.  with the other way around, you can't tell from the contents of the packet whether that's the case.\r\n\r\nWhether that's a smart way to parse such a packet is a separate question, i guess -- you'd like that to align with the version number explicitly more than anything else.",
          "createdAt": "2024-02-26T14:42:09Z",
          "updatedAt": "2024-02-26T14:42:09Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> fwiw, with the size octet before the algorithm ID octet, you can tell whether the extra algorithm ID octet is supposed to be there based on whether the size octet mod 8 is congruent to 1. with the other way around, you can't tell from the contents of the packet whether that's the case.\r\n\r\nUnderstood, its trivial math. But to me it still makes, at least per se, no sense to put a length field which says \"this is the length of the next two subsequent fields. Use the following formulas to calculate the lengths of the individual fields ...\". That is not how protocol specs are usually built. But as I wrote, I also see the argument of aligning with the c-r and will not argue against it. But I first want to hear Aron's opinion, him being an actual stakeholder and having the experience (among the editors, I mean).\r\n",
          "createdAt": "2024-02-26T14:51:10Z",
          "updatedAt": "2024-02-26T16:05:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85xRBoT",
          "commit": {
            "abbreviatedOid": "17dbbbf"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I agree with Falko that what we currently have is more logical. However, aligning with X448/X25519 makes sense too so I'm approving it. I don't think it's a real issue either way.",
          "createdAt": "2024-02-26T08:56:46Z",
          "updatedAt": "2024-02-26T08:56:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85xW6G2",
          "commit": {
            "abbreviatedOid": "17dbbbf"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I think we should align with the C-R. Both choices seem to be quite arbitrary to me, and I would not rely on the modulo-8 to determine whether there should be an extra byte anyway",
          "createdAt": "2024-02-26T19:34:18Z",
          "updatedAt": "2024-02-26T19:34:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85xaSzP",
          "commit": {
            "abbreviatedOid": "17dbbbf"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-27T07:30:32Z",
          "updatedAt": "2024-02-27T07:30:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 94,
      "id": "PR_kwDOIrmZ-85oL_DA",
      "title": "add entry in changelog for wireformat change in v3 PKESK",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/94",
      "state": "MERGED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "adds a changelog entry for PR #93 ",
      "createdAt": "2024-02-28T15:36:20Z",
      "updatedAt": "2024-03-04T07:36:09Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "cb1fd4f22a3c40f918bfbada23aa13c5240eff24",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "changelog-align-ciphertext-fields-with-c-r",
      "headRefOid": "dcda26a8c417ca9f1c79926ecb33927309e39ccf",
      "closedAt": "2024-03-04T07:36:09Z",
      "mergedAt": "2024-03-04T07:36:09Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "e697cbf936fa0293e3743c258604c75c469f7163"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85x4psP",
          "commit": {
            "abbreviatedOid": "dcda26a"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-01T09:23:10Z",
          "updatedAt": "2024-03-01T09:23:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85yDmGo",
          "commit": {
            "abbreviatedOid": "dcda26a"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T07:35:57Z",
          "updatedAt": "2024-03-04T07:35:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 95,
      "id": "PR_kwDOIrmZ-85oNqpM",
      "title": "Fix ML-DSA private key size",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/95",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://csrc.nist.gov/files/pubs/fips/204/ipd/docs/fips-204-initial-public-comments-2023.pdf\r\n\r\nBased on the comment from Lauren Brandt on page 11, they got the sizes wrong in the IPD",
      "createdAt": "2024-02-28T19:53:19Z",
      "updatedAt": "2024-03-04T09:51:04Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "2a2b032ed6e05b53238211064095c30737430d29",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "fix-mldsa-sk-size",
      "headRefOid": "ad70f72e0c44089764e4ab5c3e61b47997f92bc4",
      "closedAt": "2024-03-04T09:51:03Z",
      "mergedAt": "2024-03-04T09:51:03Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "11bed523ab82647db7556d23c8269ec5fa87942a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85x4qCd",
          "commit": {
            "abbreviatedOid": "94e55c2"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-01T09:23:57Z",
          "updatedAt": "2024-03-01T09:23:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85yDp43",
          "commit": {
            "abbreviatedOid": "94e55c2"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T07:46:45Z",
          "updatedAt": "2024-03-04T07:46:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 96,
      "id": "PR_kwDOIrmZ-85oN1nq",
      "title": "Add test vectors",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/96",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add test vectors for \r\n- V6 Ed25519 key with X25519+ML-KEM-786 encryption subkey\r\n- V4 Ed25519 key with X25519+ML-KEM-786 encryption subkey",
      "createdAt": "2024-02-28T20:13:05Z",
      "updatedAt": "2024-03-04T20:52:57Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "11bed523ab82647db7556d23c8269ec5fa87942a",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "test-vectors-ietf-01",
      "headRefOid": "c513de96e58765c912529da8f1807705194be134",
      "closedAt": "2024-03-04T20:52:57Z",
      "mergedAt": "2024-03-04T20:52:57Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "cd6cea1557013f5e8da4f4f60d5c123c4a8aa4ee"
      },
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for providing the test vectors!\r\n\r\n1. I think it'd be good to make separate files instead of putting it into the main file directly. See for example #65.\r\n2. Adding the public key might be useful as well.\r\n3. Your v6 key doesn't have the SEIPDv2 Feature Flag and I think therefore the encrypted message is a PKESKv3+SEIPDv1 message. It should include the SEIPDv2 flag and create a PKESKv6+SEIPDv2 message.\r\n4. Also, the symmetric and AEAD algo preferences should include AES 256 (which we recommend in the draft).\r\n5. Intermediate Values would be good, too.\r\n6. You should also remove the checksums of the ASCII armor. We can decide to leave it for the v4 keys / PKESKv3+SEIPDv1, I'm not sure about that.\r\n\r\nIf you don't have the time to fix points 3 and 4, I can provide the v6 key + v6 PKESK/v2 SEIPD as well, just let me know.\r\n\r\nintermediate values that I currently print for the encrypted message to the v4 key:\r\n\r\n```\r\n[LOG] KMAC256 domSeparation: 4f70656e504750436f6d706f736974654b657944657269766174696f6e46756e6374696f6e\r\n[LOG] KMAC256 customizationString: 4b4446\r\n[LOG] KMAC256 encData: \r\n[LOG]  - counter: 00000001\r\n[LOG]  - eccKeyShare: e0a9be0a0c0180ec7359fce38a2a73144d759337d8d79f3baf67d358e0644c39\r\n[LOG]  - eccCipherText: 16844f4dee0c8ca335e50193ce078f7d634bc4a4b96ed3fdf63bf30419380f3d\r\n[LOG]  - kyberKeyShare: fdfef7b8ef1323ba5ab948c2605f47bf6eec3f9765d224c024228ad7ebdc10b6\r\n[LOG]  - kyberCipherText: 3168f4452a32b61340f4b258efbe3d665ba7c65f3deb0b37b487efcbb173319d3fea43c462f00365bcbd930a6f5fa21adc33402a586225f5ccee859768f510feb6569cb9be7849e19a45ea13cd95cf79df9a5ee1de4e4b409a3a7f8dcb5f6f9ebaa1c3321771a5f7cc0f520d90004dd53b73b61fdecd0dbfe54a1bfd8bf14f89513869814e5f60b9af7114dd96a3870cc5ee57c4b632f10529fa41f943e11d3e65bd1d816edd8035c451002ecb66c7dc4cda8460280f38419515c5c06641e9076c5897918a4655a670a9aff7a03a935b6b50bea0ee7128569305c1af20d8acfaa671238275b3a5c96c561d14da9a0bc1cb4df9d5d9c45534fea66f4360392999d6f44e80693de6c2f2ccbf5875959912cb92f50f7be2069202ffd5e84d30f56f10009149c5791af898becdba36bba87c93105d9dc16f1011719fbebce4d55e5fa40bbc7e2db40e4b8800c8ddd175f052c6b28f1f62c1608ec271dd69525feed009d2e9f92c0d3ea7a1f102c70be42e4b3f084986c966b13427c055500fcfc4b88377fc8f184ae23b515a10f43e963730b087ddbba0265613cd09b6279f4d4fd2a79bef4f5d22a7cbfe4654d3a97f015f58b82b2b9f32e18e437cad055611272e9c16caa578f72e2e8c9116a7749df4d482c3ea08ce2f57c0776e8f524fed3f90667dc40f9b96e7de90e7e907a62bf59e383825127bc492bdc02e75238ee4526929a68d04af4e03531ff585f5f13a68ad55c9b30dea3c0b0549b229f9e9a73d50f8582c7c93472edda3f7007dde67c533525012360c1f74df36f249a2372461a0133c4e734466a073452aef5a8eb2bdb8166b30c8d3d2d21b443fa85a2378875b5856b3c95594cb89664629a56bd0f24204df2b488f711f1f7ff156a9a7da2bd2d37f5c14dfe089f4fe098efd1afae7fe3a025f2f916ae07296364c5b81f2f77281451cae06e82c765e8e75b25153b6f8f6c486d6c4d8f339b1404b08b2b9535c50a619bbd9bc2ec24d9cc598a1b24f7c2fcd5b865f33f720cdc1e8b4b90d9faeef86a69fba70a7c169dd1e5dc0bd2bc585c0aa6caee7836aedd4f1a1bd814a92169032f705616bfc5a8267566054a5d5de18b416a7a4652146b943f62491521549521b70140c2a8699c4ffa2a2243a62e373bd32ad517b7622bc08d1fcf7ae6963f363d493a946469edf654385b1f56949c3d158f1f53c422bd6196ee29f186837f4f5a2bd56c7688a74ae8e7ba64706d283ca9cbd7f0b5a9b448ec93df50c576ade9a294573d69db8733d9c60cc6b3bf5ae367c565b4c3ea2cf9d057ae25819f1f1f1a8473d094f6de992e09849d0170576db7da737c9ded030c5f02784626b25427f30e6dafb7dae8631588b0694ee8eeeaf66a4d4ad1eaaa3779005b84300d0469b0968c70ef897698120d575812438cc853cba9ff2c5948e35d40954ab72df5123a4f942f520b207438c4d3a6cc7a9e8494bba0e8ba27c27ca39da51b4a088a1b52e81f51cde3896d5feb1389372b411d31cafe2a0ed265b3072deac8dcd\r\n[LOG]  - fixedInfo: 69\r\n[LOG] KMAC256 Output: ed4e6e2c8d995420735c58eee861c4e68e83efc4d3ae180e79176c89ebf3e27e\r\n[LOG] Session Key: 3d0d4978d67436238d5713fab95ff6ccae07ce3d0a7cade0e71fab96e5b066b5\r\n```",
          "createdAt": "2024-02-29T10:02:44Z",
          "updatedAt": "2024-02-29T10:04:27Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "1. Okay\r\n2. Will fix\r\n3. Good catch, will also fix\r\n4. I'll add it, but I also like the implicit version\r\n5. Will add as well\r\n6. Only for V6, V4 technically requires them (the whole point is backwards compat)",
          "createdAt": "2024-02-29T10:22:38Z",
          "updatedAt": "2024-02-29T10:22:38Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I ended up removing the checksum everywhere, they are test vectors anyway",
          "createdAt": "2024-02-29T18:29:08Z",
          "updatedAt": "2024-02-29T18:29:08Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, this looks good to me! I can process all the non-ML-DSA keys and messages and get the same intermediate outputs. ML-DSA I can't process since I don't have it.\r\n\r\nJust a few minor things:\r\n\r\n1. A newline at the end of the test vector files would help. RNP doesn't like it otherwise\r\n2. I'd replace `ML-KEM-768` by `ML-KEM-ipd-768` and also write a note at the beginning of the section that the test vectors use `ML-KEM-ipd` and not the final standard.\r\n3. Same for ML-DSA.\r\n4. Typo: `ML-DSA-67` does not exist :)",
          "createdAt": "2024-03-01T08:42:03Z",
          "updatedAt": "2024-03-01T08:42:03Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "can i discourage you from using references to Golang in the user ID?  it makes the test vector seem implementation-specific, and the goal of a test vector is promoting cross-implementation interoperability.  (not the end of the world if it slips into some version of the draft, but it'd be better to avoid it)",
          "createdAt": "2024-03-01T14:24:32Z",
          "updatedAt": "2024-03-01T14:27:09Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "Let me review the purpose of the v4 EdDSALegacy+PQ/T test vector (`test-vectors/v4-eddsa-sample*`):\r\n\r\n- Some implementations cannot parse v6 or crypto-refresh Ed25519, and we want those implementations to be able to encrypt to this key.\r\n- An implementation that cannot parse v6 will surely also not be able to parse or encrypt to the ML-KEM-768+X25519 \r\n- We offer the PQ/T encryption-capable subkey so that implementations which *can* encrypt to PQ/T can do it.\r\n\r\nIn summary, this test vector represents a \"compromise key\" that is supposed to interoperate with legacy implementations, while *also* being usable by fully up-to-date implementations in 2024 that encrypt with the best-known mechanisms.\r\n\r\nIf that's the goal, then i draw the following conclusions:\r\n\r\n- the \"compromise key\" should advertise SEIPDv2.  Legacy implementations don't need to encrypt using SEIPDv2, but there is no reason to not advertise it for use by up-to-date implementations.  It should also include a \"Preferred AEAD Ciphersuites\" subpacket.\r\n- the \"compromise key\" should also have an ECDH encryption-capable subkey, presumably using Curve25519Legacy, so that legacy implementations can encrypt to it.  I recommend having this second encryption-capable subkey with a creation timestamp and subkey binding signature with earlier timestamps than the PQ/T encryption-capable subkey.\r\n- The ASCII-armored representation of the \"compromise key\" should include the deprecated checksum.\r\n\r\nTest vectors have a way of setting defacto standards, and it would be great to start off with something as close to what we think implementations should be generating as possible.\r\n\r\nHaving the \"compromise key\" test vector be as plausible as possible will also help us to evaluate whether it actually serves the \"compromise\" purpose or not, by testing using it with legacy implementations (similar to [the interop test suite's \"Mock PQ Subkey\" test](https://tests.sequoia-pgp.org/#Mock_PQ_subkey)).\r\n\r\nIt's possible that my three requests above aren't the only things needed to make a good \"compromise key\".   Can you update this test vector to be as close as possible to what you think would be a plausible \"compromise key\"?",
          "createdAt": "2024-03-01T14:43:29Z",
          "updatedAt": "2024-03-01T14:46:04Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "> An implementation that cannot parse v6 will surely also not be able to parse or encrypt to the ML-KEM-768+X25519\r\n\r\nThat's not exactly true. There is the possibility to leave out v6 keys, v6 PKESK and v2 SEIPD entirely (parsing and generating), but to include PQ/T encryption.\r\n\r\n> In summary, this test vector represents a \"compromise key\" that is supposed to interoperate with legacy implementations, while _also_ being usable by fully up-to-date implementations in 2024 that encrypt with the best-known mechanisms.\r\n\r\nThat's exactly the point, yes.\r\n\r\n> the \"compromise key\" should also have an ECDH encryption-capable subkey, presumably using Curve25519Legacy, so that legacy implementations can encrypt to it.  I recommend having this second encryption-capable subkey with a creation timestamp and subkey binding signature with earlier timestamps than the PQ/T encryption-capable subkey.\r\n\r\nAgreed. Our intent was to add an ECDH subkey, good that you noticed that it's missing here. The timestamp thing is an interesting idea. We should add this to the migration considerations (if we think it's useful, might as well not have an impact at all).\r\n\r\n> The ASCII-armored representation of the \"compromise key\" should include the deprecated checksum.\r\n\r\nI agree.",
          "createdAt": "2024-03-01T15:44:14Z",
          "updatedAt": "2024-03-01T15:50:52Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "@TJ-91 wrote:\r\n> There is the possibility to leave out v6 keys, v6 PKESK and v2 SEIPD entirely (parsing and generating), but to include PQ/T encryption.\r\n\r\nSure, but i think the goal should be interoperating with actual legacy software, not interoperating with an implementer practicing deliberate avoidance.  There is no way to interoperate with an implementer who is trying to not interoperate, so there is no point in targeting them.  And the v6 key and sig formats, and v2 SEIPD are now stable, well-specified, and simple to implement compared with anything like ML-KEM.",
          "createdAt": "2024-03-01T16:28:36Z",
          "updatedAt": "2024-03-01T16:31:21Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, I'll do the following changes to the vectors:\r\n- Change the UserIDs\r\n- Add the SEIPD flags to the v4 key \r\n- Add both a SEIPDv1 and a SEIPDv2 encrypted message to the v4 key\r\n- Add an ECDH subkey to the v4 key\r\n- Add the CRC24 on the v4 armored key\r\n\r\nRegarding\r\n\r\n> I recommend having this second encryption-capable subkey with a creation timestamp and subkey binding signature with earlier timestamps than the PQ/T encryption-capable subkey.\r\n\r\nNote that in the spec we explicitly state\r\n\r\n> Implementations SHOULD prefer PQ(/T) keys when multiple options are available.\r\n\r\nNot setting an earlier date can also be a test for this case.",
          "createdAt": "2024-03-04T09:28:38Z",
          "updatedAt": "2024-03-04T09:28:38Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "@dkg\r\n\r\n> there is no way to interoperate with an implementer who is trying to not interoperate, so there is no point in targeting them.\r\n\r\nI'm not sure whether it's helpful to frame it like this. Trying to not interoperate is not the same as waiting until everything plays out (see e.g. Kai Engerts views on this). Anyway, I think it'll not make much difference: If a legacy implementation is interoperable, then also a \"v4-PQC-only\" implementation can manage to be interoperable.\r\n\r\n@wussler \r\n\r\n> Note that in the spec we explicitly state\r\n>> Implementations SHOULD prefer PQ(/T) keys when multiple options are available.\r\n\r\nGood point. Anyway, I think we shouldn't rush the timestamp thing. Let's properly discuss this, it's not crucial for the test vectors now.",
          "createdAt": "2024-03-04T09:44:07Z",
          "updatedAt": "2024-03-04T09:44:07Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I ended up doing:\r\n- Changed the UserIDs to `PQC user (Test Key) <pqc-test-key@example.com>`\r\n- Added the SEIPD flags to the v4 key\r\n- Added both a SEIPDv1 and a SEIPDv2 encrypted message to the v4 key\r\n- Added an ECDH subkey to the v4 key with the _same creation date_\r\n- Added the CRC24 on the v4 armored key and SEIPDv1 message\r\n\r\n@TJ-91 PR should be ready and rebased on main. Can you please check if the artifacts are correct on your side?\r\n\r\n@dkg do you see any further issue with the keys?\r\n\r\n@falko-strenzke @fluppe2 as agreed I removed the (unverified) vectors for ML-DSA.\r\n",
          "createdAt": "2024-03-04T13:31:32Z",
          "updatedAt": "2024-03-04T13:31:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85x3D1Z",
          "commit": {
            "abbreviatedOid": "c1a9ab5"
          },
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T03:32:37Z",
          "updatedAt": "2024-03-01T03:32:37Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "v6 certificates need a direct key self-sig on the primary key (see [crypto-refresh \u00a710.1.1](https://www.ietf.org/archive/id/draft-ietf-openpgp-crypto-refresh-13.html#name-openpgp-v6-certificate-stru))",
              "createdAt": "2024-03-01T03:32:37Z",
              "updatedAt": "2024-03-01T03:32:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85x4Wpm",
          "commit": {
            "abbreviatedOid": "c1a9ab5"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T08:42:54Z",
          "updatedAt": "2024-03-01T08:42:54Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "The test vectors seem to have it, so just the description is missing",
              "createdAt": "2024-03-01T08:42:54Z",
              "updatedAt": "2024-03-01T08:42:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85x4YtV",
          "commit": {
            "abbreviatedOid": "c1a9ab5"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T08:47:42Z",
          "updatedAt": "2024-03-01T08:47:42Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Right, missed this in the description. I will push now a commit to fix",
              "createdAt": "2024-03-01T08:47:42Z",
              "updatedAt": "2024-03-01T08:47:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85x4k7r",
          "commit": {
            "abbreviatedOid": "357cab5"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-01T09:13:10Z",
          "updatedAt": "2024-03-01T09:13:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85yHOks",
          "commit": {
            "abbreviatedOid": "c513de9"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I can import and decrypt the test vectors. The subpackets look good to me and I checked some of the intermediate output, which also looks good to me \ud83d\udc4d ",
          "createdAt": "2024-03-04T14:43:10Z",
          "updatedAt": "2024-03-04T14:43:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85yIEkC",
          "commit": {
            "abbreviatedOid": "c513de9"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T16:08:35Z",
          "updatedAt": "2024-03-04T16:08:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 97,
      "id": "PR_kwDOIrmZ-85oo6ui",
      "title": "Remove rebase artifact",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/97",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-04T21:09:26Z",
      "updatedAt": "2024-03-04T21:11:32Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "57c59e5fbebefd7c2c6c248a42d6f87c5841f64a",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "fix-rebase-artifact",
      "headRefOid": "eb340e1d1a9cc806ac7e43fa67ef715cba433d44",
      "closedAt": "2024-03-04T21:11:32Z",
      "mergedAt": "2024-03-04T21:11:32Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "2369ab5234bfcdc8b9cdee0c8de225452dbd2717"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 98,
      "id": "PR_kwDOIrmZ-85oo8UY",
      "title": "Release version 02",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/98",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-04T21:13:32Z",
      "updatedAt": "2024-03-04T21:15:52Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "2369ab5234bfcdc8b9cdee0c8de225452dbd2717",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "release-version-02",
      "headRefOid": "ce7059441369072c051a50f9241d85be6114fb4d",
      "closedAt": "2024-03-04T21:15:52Z",
      "mergedAt": "2024-03-04T21:15:52Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "b8238c015dcd7a97778518db88376ea366bb51df"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 99,
      "id": "PR_kwDOIrmZ-85qZLEx",
      "title": "update SLH-DSA to IETF-119 proposal",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/99",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For technical reasons, namely being able to proceed with other changes affecting larger portions of the draft without creating any conflicts, the editors would like to merge this PR as soon as it is found to make the correct transformation to the new three SLH-DSA-SHAKE code points (removing the parametrization) in a  *technical sense* (which has an impact on the document structure and the textual reference to the algorithm) .\r\n\r\nThe criterion for merging it should not be that there is already consensus on the exact number of SLH-DSA code points or the text for their justification in the \"Additional Considerations\" section. That can be agreed on in the further discussion on the list and then we can open another PR for the required changes.",
      "createdAt": "2024-03-21T17:05:07Z",
      "updatedAt": "2024-03-25T12:20:12Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "b8238c015dcd7a97778518db88376ea366bb51df",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "slh-dsa-new-code-points",
      "headRefOid": "2a31c15deccba3db1dd6703e3185ef044417c78c",
      "closedAt": "2024-03-25T12:20:12Z",
      "mergedAt": "2024-03-25T12:20:12Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "7dfa4224c57d8dbd66bc5a9bed3b87eb56c718e4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-850f6RB",
          "commit": {
            "abbreviatedOid": "a22b167"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me.",
          "createdAt": "2024-03-22T11:02:28Z",
          "updatedAt": "2024-03-22T11:02:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-850mpLZ",
          "commit": {
            "abbreviatedOid": "a22b167"
          },
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This seems like a reasonable next step to me.  I've noted some formatting concerns about the markdown that made the diff a bit harder to review than i would have liked, and some notes about language/vocab that i think can be cleaned up, and a few more details that i think could be added to the discussion, but none of those should block this step.  I'm happy to re-raise those issues after this is merged.",
          "createdAt": "2024-03-23T02:51:41Z",
          "updatedAt": "2024-03-23T03:18:16Z",
          "comments": [
            {
              "originalPosition": 383,
              "body": "This looks like it is a pretty noisy change because the way that the table has been formatted is such that every line of the table will change whenever one of the columns changes width.\r\n\r\nthat makes it tough to review, but it looks OK to me.  If there are infelicities in the resultant draft we can fix them up later :)\r\n\r\nIf you want future diffs to be easier to review, i recommend not trying to make the table a perfect fixed-width ascii table in the source markdown, but rather write each line as though it were on its own.  kramdown-rfc will restructure the table to be nice, readable ASCII in the txt output  format, and you'll get cleaner diffs.",
              "createdAt": "2024-03-23T02:51:41Z",
              "updatedAt": "2024-03-23T03:18:16Z"
            },
            {
              "originalPosition": 348,
              "body": "It might be worth mentioning the performance characteristics for signature _verification_ in this paragraph as well, as there are many deployments (e.g. code signing) where a signature might be created once but verified thousands of times.  Understanding the performance characteristics for the verifiers would be a good question to answer here.",
              "createdAt": "2024-03-23T02:56:54Z",
              "updatedAt": "2024-03-23T03:18:16Z"
            },
            {
              "originalPosition": 345,
              "body": "This is also a bit of a messy diff to read because it seems to be mainly a re-flow of the text, with only a few minor adjustments.   Having cleaner semantic diffs is one of the reasons that the crypto-refresh markdown source was formatted with one sentence per line.  That said, modulo the comments above, i think the underlying changes are generally OK here.",
              "createdAt": "2024-03-23T03:01:20Z",
              "updatedAt": "2024-03-23T03:18:16Z"
            },
            {
              "originalPosition": 340,
              "body": "It's not clear to me exactly what \"milder\" security assumptions are supposed to mean.  For example, If it means \"less stringent threat model\" , then that suggests that these signatures are less robust.  But if it means \"less scary threat model\", then that suggests that these signatures are more robust.",
              "createdAt": "2024-03-23T03:15:44Z",
              "updatedAt": "2024-03-23T03:18:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-850pZQq",
          "commit": {
            "abbreviatedOid": "a22b167"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-25T07:20:05Z",
          "updatedAt": "2024-03-25T07:20:05Z",
          "comments": [
            {
              "originalPosition": 345,
              "body": "On sentence per line sounds more reasonable for the purpose of traceability of changes,  indeed. We'll discuss internally whether it could be an option to switch to that formatting. This would require to merge all bigger open PRs first, though.",
              "createdAt": "2024-03-25T07:20:05Z",
              "updatedAt": "2024-03-25T07:20:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-850plVy",
          "commit": {
            "abbreviatedOid": "a22b167"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-25T07:57:08Z",
          "updatedAt": "2024-03-25T07:57:09Z",
          "comments": [
            {
              "originalPosition": 340,
              "body": "Right, \"milder\" is not clear enough. I replaced it by \"weaker\". If it should not be clear how to understand this term, it is explained [here](https://crypto.stackexchange.com/questions/60059/comparing-stronger-vs-weaker-assumptions).",
              "createdAt": "2024-03-25T07:57:09Z",
              "updatedAt": "2024-03-25T07:57:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-850pyZe",
          "commit": {
            "abbreviatedOid": "a22b167"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-25T08:30:17Z",
          "updatedAt": "2024-03-25T08:30:17Z",
          "comments": [
            {
              "originalPosition": 348,
              "body": "OK, I am adding information about the verification times, too.",
              "createdAt": "2024-03-25T08:30:17Z",
              "updatedAt": "2024-03-25T08:30:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-850rn4a",
          "commit": {
            "abbreviatedOid": "a22b167"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-25T12:16:42Z",
          "updatedAt": "2024-03-25T12:16:42Z",
          "comments": [
            {
              "originalPosition": 383,
              "body": "Yes, I will respect that in the future :-) :+1: ",
              "createdAt": "2024-03-25T12:16:42Z",
              "updatedAt": "2024-03-25T12:16:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 100,
      "id": "PR_kwDOIrmZ-85qZRWl",
      "title": "correct misspelled words",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/100",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-21T17:13:31Z",
      "updatedAt": "2024-03-25T12:21:49Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "b8238c015dcd7a97778518db88376ea366bb51df",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "spelling",
      "headRefOid": "6d99078cc39115d903197e31d65cf28c483fc1bd",
      "closedAt": "2024-03-25T12:21:43Z",
      "mergedAt": "2024-03-25T12:21:43Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "d16825b4d3d16a3c93032c19b19f8160a3b8d257"
      },
      "comments": [
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM",
          "createdAt": "2024-03-23T02:43:25Z",
          "updatedAt": "2024-03-23T02:43:25Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "@wussler Could also please approve this spelling correction so that we can merge it?",
          "createdAt": "2024-03-25T12:07:11Z",
          "updatedAt": "2024-03-25T12:07:11Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "@wussler This is trivial one, I'll just force-merge it to get it out of the way.",
          "createdAt": "2024-03-25T12:21:14Z",
          "updatedAt": "2024-03-25T12:21:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-850eHe7",
          "commit": {
            "abbreviatedOid": "6d99078"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-22T06:45:56Z",
          "updatedAt": "2024-03-22T06:45:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 102,
      "id": "PR_kwDOIrmZ-85qqJVC",
      "title": "reformatting of text: one sentence per line",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/102",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I checked the reformatted text to be word-by-word equal to the previous version using [wdiff](https://www.gnu.org/software/wdiff/): `wdiff --no-common ...`.\r\n",
      "createdAt": "2024-03-25T13:24:52Z",
      "updatedAt": "2024-03-26T10:11:08Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "d16825b4d3d16a3c93032c19b19f8160a3b8d257",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "one-sentence-per-line",
      "headRefOid": "79f8626c63d1be7fd164660a5f65cdce19f068f1",
      "closedAt": "2024-03-26T09:49:51Z",
      "mergedAt": "2024-03-26T09:49:51Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "46fb3702c5ea835872e12ac51a691a03b8bfe169"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-850tJlj",
          "commit": {
            "abbreviatedOid": "779def7"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-25T15:02:17Z",
          "updatedAt": "2024-03-25T15:02:17Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-850y6i1",
          "commit": {
            "abbreviatedOid": "779def7"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-26T07:24:49Z",
          "updatedAt": "2024-03-26T09:31:29Z",
          "comments": [
            {
              "originalPosition": 299,
              "body": "This is no longer true, but we should not remove it in this PR",
              "createdAt": "2024-03-26T07:24:49Z",
              "updatedAt": "2024-03-26T09:31:29Z"
            },
            {
              "originalPosition": 1324,
              "body": "This needs to persist the line break as it's in a preformatted block",
              "createdAt": "2024-03-26T09:29:46Z",
              "updatedAt": "2024-03-26T09:31:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-8500Qft",
          "commit": {
            "abbreviatedOid": "779def7"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-26T09:49:19Z",
          "updatedAt": "2024-03-26T09:49:19Z",
          "comments": [
            {
              "originalPosition": 1324,
              "body": "Oh yes, I undid that change again.",
              "createdAt": "2024-03-26T09:49:19Z",
              "updatedAt": "2024-03-26T09:49:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-8500cq8",
          "commit": {
            "abbreviatedOid": "779def7"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-26T10:09:29Z",
          "updatedAt": "2024-03-26T10:09:29Z",
          "comments": [
            {
              "originalPosition": 299,
              "body": "@wussler\r\n\r\nActually, currently this statement still applies since we haven't yet split out the NIST/Brainpool composites. I will make an issue for the split where I note that we need to remove this statement then as well.",
              "createdAt": "2024-03-26T10:09:29Z",
              "updatedAt": "2024-03-26T10:09:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-8500dnb",
          "commit": {
            "abbreviatedOid": "779def7"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-26T10:11:08Z",
          "updatedAt": "2024-03-26T10:11:08Z",
          "comments": [
            {
              "originalPosition": 299,
              "body": "I was referring to the SLH-DSA",
              "createdAt": "2024-03-26T10:11:08Z",
              "updatedAt": "2024-03-26T10:11:08Z"
            }
          ]
        }
      ]
    },
    {
      "number": 103,
      "id": "PR_kwDOIrmZ-85qqMZr",
      "title": "Adding missing changelog entry for slhdsa update",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/103",
      "state": "CLOSED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on the branch of the PR https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/102 (but should not conflict with main)",
      "createdAt": "2024-03-25T13:31:12Z",
      "updatedAt": "2024-03-25T13:33:47Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "d16825b4d3d16a3c93032c19b19f8160a3b8d257",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "changelog-for-slhdsa-update",
      "headRefOid": "fdc4dfdb140e81224f3d7a0f542d7192ab339bb2",
      "closedAt": "2024-03-25T13:33:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "Makes more sense to base it on main, will create a new one.",
          "createdAt": "2024-03-25T13:33:40Z",
          "updatedAt": "2024-03-25T13:33:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 104,
      "id": "PR_kwDOIrmZ-85qqPA3",
      "title": "corrected changelog entry for SLH-DSA update",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/104",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-25T13:37:13Z",
      "updatedAt": "2024-03-26T07:21:12Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "d16825b4d3d16a3c93032c19b19f8160a3b8d257",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "changelog-for-slhdsa-update-2",
      "headRefOid": "0110808199e6433a598ebb337dc8e80559130ef9",
      "closedAt": "2024-03-26T07:21:12Z",
      "mergedAt": "2024-03-26T07:21:12Z",
      "mergedBy": "falko-strenzke",
      "mergeCommit": {
        "oid": "3f953125f4f13800c68b36b417832276d668442a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-850sYmw",
          "commit": {
            "abbreviatedOid": "0110808"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-25T13:41:37Z",
          "updatedAt": "2024-03-25T13:41:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-850t4d_",
          "commit": {
            "abbreviatedOid": "0110808"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-25T16:15:47Z",
          "updatedAt": "2024-03-25T16:15:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 107,
      "id": "PR_kwDOIrmZ-85uGgdI",
      "title": "Remove NIST and Brainpool curve hybrids",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/107",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Remove algorithms with NIST or Brainpool curves\r\n- Remove ECDSA details\r\n- Rename ECC to EdDSA or ECDH based on context\r\n- Remove unneeded references\r\n- Drop SEC1 point encoding",
      "createdAt": "2024-04-30T07:08:51Z",
      "updatedAt": "2024-05-06T15:03:17Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "46fb3702c5ea835872e12ac51a691a03b8bfe169",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "split-drafts",
      "headRefOid": "8748bef50d8bb7256002587c8f57c8912336f5c6",
      "closedAt": "2024-05-06T15:03:17Z",
      "mergedAt": "2024-05-06T15:03:17Z",
      "mergedBy": "TJ-91",
      "mergeCommit": {
        "oid": "7d61d7d6c5a45b53a16e2b6705622a57b2462adb"
      },
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Also looks good to me, I think you covered it all.\r\n\r\nI think we \"needed\" the general ECC term mostly for encompassing ECDSA and EdDSA in one term so it makes sense to include this change here when dropping ECDSA. Or did we have another reason for it?\r\nIf it makes defining separate NIST / Brainpool drafts easier we could keep the more general \"ECC\" wording but I prefer it like it is now and don't think it will be a problem.\r\n\r\nOne really minor thing I would change in the Changelog: I wouldn't write \"Moved NIST and Brainpool curve hybrids to a separate draft\" since we have not yet done it (or have we?)",
          "createdAt": "2024-05-06T08:35:52Z",
          "updatedAt": "2024-05-06T08:35:52Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "> Here for instance, the renaming \"ECC\" to \"ECDH\" or \"EdDSA\", resp., wasn't really necessary.\r\n\r\nTrue, but we drop the ECDH-KEM (because it was the generic KEM for NIST/Brainpool curves), so we couldn't rename it without the split as it would have overloaded the term.\r\n\r\nFor ECDSA/EdDSA is what Johannes pointed out, just wanted to be more precise since now we implement only EdDSA.\r\n\r\n> One really minor thing I would change in the Changelog: I wouldn't write \"Moved NIST and Brainpool curve hybrids to a separate draft\" since we have not yet done it (or have we?)\r\n\r\nI can change it to \"Removed NIST and Brainpool curve hybrids\" if you think it's a good idea @TJ-91, since from the perspective of this draft this is what's happening.",
          "createdAt": "2024-05-06T11:42:09Z",
          "updatedAt": "2024-05-06T11:42:09Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "> I can change it to \"Removed NIST and Brainpool curve hybrids\" if you think it's a good idea @TJ-91, since from the perspective of this draft this is what's happening.\r\n\r\nthat works for me :+1:",
          "createdAt": "2024-05-06T12:29:43Z",
          "updatedAt": "2024-05-06T12:29:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-855m4HB",
          "commit": {
            "abbreviatedOid": "5bd14f9"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good in general to me. There a few editorial changes and spelling corrections that would have better been made in a separate PR, though. For the future I think it will be better if we keep PRs as restricted as possible. Here for instance, the renaming \"ECC\" to \"ECDH\" or \"EdDSA\", resp., wasn't really necessary. It could have been left as it is in this PR (the renaming to \"ECDH\" is completely independent of the split, it could have been applied without the split as well). That would have kept the PR minimal and the renaming could have been done in an editorial PR later on. These are just some ideas how to make reviews simpler in the future, since quite a few people might now check them.",
          "createdAt": "2024-05-06T08:15:42Z",
          "updatedAt": "2024-05-06T08:15:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-855nALz",
          "commit": {
            "abbreviatedOid": "5bd14f9"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-06T08:36:38Z",
          "updatedAt": "2024-05-06T08:36:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-855pnIm",
          "commit": {
            "abbreviatedOid": "5bd14f9"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-06T14:40:31Z",
          "updatedAt": "2024-05-06T14:40:31Z",
          "comments": [
            {
              "originalPosition": 706,
              "body": "```suggestion\r\n- Removed NIST and Brainpool curve hybrids, dropped ECDSA from the current specification.\r\n```",
              "createdAt": "2024-05-06T14:40:31Z",
              "updatedAt": "2024-05-06T14:40:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 109,
      "id": "PR_kwDOIrmZ-85uuXI2",
      "title": "Assign SLH-DSA Codepoints",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/109",
      "state": "CLOSED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I assigned code points 102 - 104 to the three SLH-DSA algorithms now. We can also do 104, 109, 110 or something like that, if there are concerns with using the lower experimental codepoints.\r\n\r\nFixes #105 by removing the now outdated sentence about unassigned code points.",
      "createdAt": "2024-05-07T07:44:16Z",
      "updatedAt": "2024-05-16T07:18:02Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "7d61d7d6c5a45b53a16e2b6705622a57b2462adb",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "slhdsa-codepoints",
      "headRefOid": "4869494a4c92739762726ea337b9d94ceecbb748",
      "closedAt": "2024-05-16T07:18:02Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we need this until we can even produce a SLH-DSA compliant signature?",
          "createdAt": "2024-05-07T14:47:16Z",
          "updatedAt": "2024-05-07T14:47:16Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "@wussler  We don't strictly need them yet, that's true. We had assigned IDs before and the reason we hadn't in the meantime was that the experimental code space was too restricted. Since that's not an issue any more, I re-assigned them. \r\n\r\nBut we can also leave them unassigned for a while longer if you think that's better (but I don't see a particular reason).",
          "createdAt": "2024-05-07T15:32:04Z",
          "updatedAt": "2024-05-07T15:32:04Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I would avoid doing them now to leave some space for the other drafts in the adoption call. We can always see how it goes once we do have the SLH-DSA algorithms to make the test vectors.\r\n\r\nEdit: if you agree I propose to leave this PR open with the `postponed` label",
          "createdAt": "2024-05-15T12:44:21Z",
          "updatedAt": "2024-05-15T12:47:49Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, let's wait with assigning IDs for now. I'm closing this PR since the changes are too minor to be worth keeping around.",
          "createdAt": "2024-05-16T07:18:02Z",
          "updatedAt": "2024-05-16T07:18:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-855visY",
          "commit": {
            "abbreviatedOid": "4869494"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-07T08:53:44Z",
          "updatedAt": "2024-05-07T08:53:44Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "The column says \"Algorithm ID reference\", not \"Algorithm ID\". So unless the column label is changed, I would leave the textual algorithm label there.  The ID itself could maybe be added in a new column (leftmost)?\r\n\r\nThe same applies to the changes to the next table about the hash binding.",
              "createdAt": "2024-05-07T08:53:44Z",
              "updatedAt": "2024-05-07T08:53:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-855vjg2",
          "commit": {
            "abbreviatedOid": "4869494"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-07T08:55:09Z",
          "updatedAt": "2024-05-07T08:55:09Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "It's more reliable for now to keep the textual algorithm description, I think. The temporary inofficial IDs are not a reliable identification token. They might change and then readers might be confused when they see the next version.",
              "createdAt": "2024-05-07T08:55:09Z",
              "updatedAt": "2024-05-07T08:55:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-855vs8C",
          "commit": {
            "abbreviatedOid": "4869494"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-07T09:12:36Z",
          "updatedAt": "2024-05-07T09:12:36Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "To clarify: I only changed to the textual representation in the last iteration (draft 02) since we dropped the code points for the \"MAY\" algorithms and this preserved the meaning for the dropped IDs. All other algorithms use the IDs anyway.\r\n\r\nI think we write \"reference\" to make clear that it's not an assignment (only a reference for convenience)\r\n",
              "createdAt": "2024-05-07T09:12:36Z",
              "updatedAt": "2024-05-07T09:12:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-855wbvM",
          "commit": {
            "abbreviatedOid": "4869494"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-07T10:29:58Z",
          "updatedAt": "2024-05-07T10:29:58Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "I can also live with the proposed change, but I think for now being more explicit in those tables might be better.",
              "createdAt": "2024-05-07T10:29:58Z",
              "updatedAt": "2024-05-07T10:29:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-855wcZR",
          "commit": {
            "abbreviatedOid": "4869494"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-07T10:30:52Z",
          "updatedAt": "2024-05-07T10:30:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 110,
      "id": "PR_kwDOIrmZ-85vXky8",
      "title": "symmetric algorithm preferences: clarify what happens in the absence \u2026",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/110",
      "state": "OPEN",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026of the subpackets\r\n\r\nCloses #106 \r\n\r\nNot sure if the last sentence is really required, but the Crypto Refresh leaves a lot of room for implementations to determine v2 SEIPD support so it can't hurt.",
      "createdAt": "2024-05-14T08:54:29Z",
      "updatedAt": "2024-07-15T14:35:54Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "7d61d7d6c5a45b53a16e2b6705622a57b2462adb",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "issue-106-implicit-preference-packets",
      "headRefOid": "269656ee82b16147dc930a94a5b442aeb8e5f346",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "@wussler @dkg Thanks for the fixes and suggestions.\r\n\r\nThe reason I wrote the text is given in #106:\r\n> The crypto-refresh does not clearly state that the implicit lists of preferred algorithms are in force even when the respective subpacket is missing. We should clarify this at least in the PQC specification.\r\n\r\nIn `5.2.3.15. Preferred AEAD Ciphersuites` strictly speaking, it is not described what happens in the absence of the subpacket. The same is true for the non-AEAD stuff (see `12.2. Symmetric Algorithm Preferences`).\r\n\r\nI do think it's not a problem in the Crypto Refresh since it's clear enough what algorithm to choose in such a case since there is only one choice left, the MTI algorithm. Now we extend this mechanism and set more implicit default options to the lists of the subpackets. Now there is ambiguity in the case of a missing subpacket.\r\n\r\nI am also not very happy with the additional text but with the reasoning I gave, do you still think we can drop this clarification completely?",
          "createdAt": "2024-05-16T08:06:25Z",
          "updatedAt": "2024-05-16T08:06:25Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "I am also happy with @dkg's proposed text, and I think it's now clear what to do in the case of missing subpackets. I also think here would be the right place to add a \"forbid SED tag 9\" for issue #91 ",
          "createdAt": "2024-05-16T08:35:26Z",
          "updatedAt": "2024-05-16T08:35:26Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "@TJ-91 i see what you're saying about the specifics of what is missing, but (a) the text you're proposing is a _lot_ of words to say \"for these purposes, treat a missing subpacket the same as an empty subpacket\", and (b) i don't really know what the alternative interpretation would be likely to be.  are you suggesting that an implementer might really think \"if they have an empty AEAD ciphersuites subpacket, then i know i can use AES256-OCB, but if they have a missing AEAD ciphersuites subpacket, then i know i have to fall back to AES128-OCB\"?  That would be very weird.\r\n\r\nMaybe this would be best illustrated in a test vector, with a minimal certificate with a PQ/T encryption key, and a features packet that supports v2 SEIPD, and no AEAD Ciphersuites subpacket.  then the test vector could include an encrypted message that uses AES256-OCB .",
          "createdAt": "2024-05-16T20:24:11Z",
          "updatedAt": "2024-05-16T20:24:11Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "> are you suggesting that an implementer might really think \"if they have an empty AEAD ciphersuites subpacket, then i know i can use AES256-OCB, but if they have a missing AEAD ciphersuites subpacket, then i know i have to fall back to AES128-OCB\"? That would be very weird.\r\n\r\nThat's true, there is not much potential for harm here.\r\n\r\n> Maybe this would be best illustrated in a test vector\r\n\r\nI don't think the test vector really conveys the message (many would probably not notice the detail or if they do, be confused by it).\r\n",
          "createdAt": "2024-05-17T11:24:36Z",
          "updatedAt": "2024-05-17T11:26:38Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-856syLt",
          "commit": {
            "abbreviatedOid": "269656e"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-15T16:57:25Z",
          "updatedAt": "2024-05-15T16:57:26Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nSupport for the v2 SEIPD feature MUST NOT be assumed on the basis of implicitly added AEAD algorithm pairs alone.\r\n```\r\n\r\nI think the rest of the text is already clear enough about the SEIPDv1 and AEAD. The remaining sounded to me just like a repetition that made the overall concept less clear.\r\n",
              "createdAt": "2024-05-15T16:57:25Z",
              "updatedAt": "2024-05-15T16:57:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-856vM3-",
          "commit": {
            "abbreviatedOid": "269656e"
          },
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think this text can be further simplified while still getting across the main point.\r\n\r\nI don't think implementers need reminding that \"missing subpacket is the same as empty subpacket\" -- in any case, if they do this might not be the right place to put it.\r\n\r\nWe're talking here about adding additional inference about supported encryption algorithms.  rather than stating what the implementation should *not* do (infer v2 SEIPD support on the basis of the PQ(/T) key alone), we should be explicit about what they *should* do: \r\n\r\n- look at the Features subpacket (today), or\r\n- infer support for v2 SEIPD based on some survey of widely available implementations that support PQC (in the future, when such a survey is available).",
          "createdAt": "2024-05-15T23:12:40Z",
          "updatedAt": "2024-05-15T23:24:41Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "s/describhed/described/",
              "createdAt": "2024-05-15T23:12:40Z",
              "updatedAt": "2024-05-15T23:24:41Z"
            },
            {
              "originalPosition": 8,
              "body": "this final line is passive voice: who is doing the assuming or not assuming?\r\n\r\nHow about being clearer, like: \r\n\r\n> When encrypting to a OpenPGP certificate that contains a PQ(/T) key, an implementation MUST NOT infer that the certificate's owner supports v2 SEIPD solely on the basis of the implicitly added AEAD algorithm pairs.",
              "createdAt": "2024-05-15T23:16:25Z",
              "updatedAt": "2024-05-15T23:24:41Z"
            },
            {
              "originalPosition": 8,
              "body": "i tend to agree with @wussler here that we probably don't need to say \"lack of subpacket is the same as empty subpacket\".  We also don't want to imply that any implementation should consider the presence of either encryption-support subpacket as the same as the appropriate bit in the Features subpacket.",
              "createdAt": "2024-05-15T23:20:15Z",
              "updatedAt": "2024-05-15T23:24:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86B0B-m",
          "commit": {
            "abbreviatedOid": "269656e"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-15T14:35:54Z",
          "updatedAt": "2024-07-15T14:35:54Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "The bottom line seems to be that there is consenus to only add the sentence that @dkg propsed above. In that case I ask @TJ-91 to update the PR accordingly. I am ready to close issue #106, which was the reason for the initially proposed changes in this PR, that was raised by me as irrelevant.",
              "createdAt": "2024-07-15T14:35:54Z",
              "updatedAt": "2024-07-15T14:35:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 111,
      "id": "PR_kwDOIrmZ-85vX-Hg",
      "title": "update pquip terminology reference",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/111",
      "state": "CLOSED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #58",
      "createdAt": "2024-05-14T09:45:12Z",
      "updatedAt": "2024-05-16T08:26:03Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "7d61d7d6c5a45b53a16e2b6705622a57b2462adb",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "issue-58-update-pquip-ref",
      "headRefOid": "b5e8e6c3e6c35d69af782bb5ab93222fe860c7ed",
      "closedAt": "2024-05-16T08:26:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems fine to me, but i would recommend relying on kramdown-rfc to generate the reference to the internet-draft directly, so that you don't have to maintain it.  I've offered #112 as an alternative.\r\n\r\nI don't think you need to explicitly tag the version of the I-D you're referencing unless you expect that draft to actually radically change the terminology in use between versions.",
          "createdAt": "2024-05-15T23:11:27Z",
          "updatedAt": "2024-05-15T23:11:27Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, that's a good suggestion. Even if the terminology changes, it'll not be very dramatic.",
          "createdAt": "2024-05-16T07:32:08Z",
          "updatedAt": "2024-05-16T07:32:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-856fR3I",
          "commit": {
            "abbreviatedOid": "b5e8e6c"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-14T11:05:04Z",
          "updatedAt": "2024-05-14T11:05:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 112,
      "id": "PR_kwDOIrmZ-85vl3DX",
      "title": "Change to PQUIP terminology draft",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/112",
      "state": "MERGED",
      "author": "dkg",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "this is a simple alternative to #111 \r\n\r\nCloses: #58 ",
      "createdAt": "2024-05-15T23:10:39Z",
      "updatedAt": "2024-05-17T11:27:48Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "7d61d7d6c5a45b53a16e2b6705622a57b2462adb",
      "headRepository": "dkg/openpgp-pqc",
      "headRefName": "id-reference",
      "headRefOid": "460eae7c0694715aacaf331a45e665c1a0628f81",
      "closedAt": "2024-05-16T08:25:55Z",
      "mergedAt": "2024-05-16T08:25:55Z",
      "mergedBy": "TJ-91",
      "mergeCommit": {
        "oid": "5dfb10938adc6fc28920cac15b63078e423c5603"
      },
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "When I run `make` on my system I get a read timeout:\r\n\r\n```\r\n~/.cache/xml2rfc/reference.I-D.ietf-pquip-pqt-hybrid-terminology.xml: fetching from https://datatracker.ietf.org/doc/bibxml3/draft-ietf-pquip-pqt-hybrid-terminology.xml\r\n*** execution expired while fetching https://datatracker.ietf.org/doc/bibxml3/draft-ietf-pquip-pqt-hybrid-terminology.xml\r\n~/draft-openpgp-pqc/lib/.gems/ruby/3.0.0/gems/kramdown-rfc2629-1.6.26/lib/kramdown-rfc2629.rb:1105:in `read': execution expired (Net::OpenTimeout)\r\n\r\n[...]\r\n\r\nError: Unable to parse the XML document: /dev/stdin\r\nmake: *** [lib/main.mk:72: draft-ietf-openpgp-pqc.xml] Error 1\r\n```\r\n\r\nDoes it run on your system? It can very well be a problem on my side.",
          "createdAt": "2024-05-16T07:36:39Z",
          "updatedAt": "2024-05-16T07:36:39Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Works for me :+1: ",
          "createdAt": "2024-05-16T08:21:13Z",
          "updatedAt": "2024-05-16T08:21:13Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "Then let's merge this and I'll fix my system :+1:",
          "createdAt": "2024-05-16T08:25:47Z",
          "updatedAt": "2024-05-16T08:25:47Z"
        },
        {
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "body": "@TJ-91 that's a strange error message.  is your implementation blocked by some sort of firewall?  does `wget https://datatracker.ietf.org/doc/bibxml3/draft-ietf-pquip-pqt-hybrid-terminology.xml` work for you?",
          "createdAt": "2024-05-16T20:33:43Z",
          "updatedAt": "2024-05-16T20:33:43Z"
        },
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm behind a proxy which sometimes causes problems. Anyway, I've got it resolved now :)",
          "createdAt": "2024-05-17T11:27:46Z",
          "updatedAt": "2024-05-17T11:27:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-856yFjR",
          "commit": {
            "abbreviatedOid": "460eae7"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-16T08:21:30Z",
          "updatedAt": "2024-05-16T08:21:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-856yJzZ",
          "commit": {
            "abbreviatedOid": "460eae7"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-16T08:25:28Z",
          "updatedAt": "2024-05-16T08:25:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 113,
      "id": "PR_kwDOIrmZ-85wL-ZT",
      "title": "Clarify SED and Key Binding Sigs",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/113",
      "state": "MERGED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #91 \r\n\r\n",
      "createdAt": "2024-05-22T11:01:38Z",
      "updatedAt": "2024-05-27T10:23:02Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "5dfb10938adc6fc28920cac15b63078e423c5603",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "issue-91-key-binding-sig-hash-and-sed",
      "headRefOid": "0bec5c5b012ee6a0e52383b3f06ac1c7fc8c6624",
      "closedAt": "2024-05-27T10:23:02Z",
      "mergedAt": "2024-05-27T10:23:02Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "3fdf81182103a1ae605f918f417c097858a7ab9c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-857bvr-",
          "commit": {
            "abbreviatedOid": "c234215"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Just minor formatting comments",
          "createdAt": "2024-05-22T11:04:22Z",
          "updatedAt": "2024-05-22T11:05:31Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nImplementations MUST NOT use Symmetrically Encrypted Data packets (tag 9) to encrypt data protected with the algorithms described in this document.\r\n```",
              "createdAt": "2024-05-22T11:04:22Z",
              "updatedAt": "2024-05-22T11:05:31Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nSubkey binding signatures over algorithms described in this document and primary key binding signatures made by algorithms described in this document MUST NOT be made with `MD5`, `SHA-1`, or `RIPEMD-160`.\r\nA receiving implementation MUST treat such a signature as invalid.\r\n```",
              "createdAt": "2024-05-22T11:04:43Z",
              "updatedAt": "2024-05-22T11:05:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-857--zY",
          "commit": {
            "abbreviatedOid": "0bec5c5"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-27T06:45:00Z",
          "updatedAt": "2024-05-27T06:45:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 114,
      "id": "PR_kwDOIrmZ-85wMENp",
      "title": "Fix Experimental Code Point Assignment",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/114",
      "state": "MERGED",
      "author": "TJ-91",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "109 was assigned by accident.\r\nAdapted the reasoning for not assigning code points for \"MAY\" algorithms.",
      "createdAt": "2024-05-22T11:11:24Z",
      "updatedAt": "2024-05-22T11:17:11Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "5dfb10938adc6fc28920cac15b63078e423c5603",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "fix-alg-id-assignemnts",
      "headRefOid": "4f027cccd4739b679728f7141ac68b16859ec16e",
      "closedAt": "2024-05-22T11:17:11Z",
      "mergedAt": "2024-05-22T11:17:11Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "a031f1f5c7dd0e94c4a5ceee5ada211139b6f980"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-857b2rG",
          "commit": {
            "abbreviatedOid": "4f027cc"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-22T11:16:50Z",
          "updatedAt": "2024-05-22T11:16:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 116,
      "id": "PR_kwDOIrmZ-85wP1vh",
      "title": "Switch KDF to  SHA3-256",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/116",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Adapt the KDF proposal to the discussion held at IETF 119",
      "createdAt": "2024-05-22T19:38:49Z",
      "updatedAt": "2024-05-27T12:22:09Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "3fdf81182103a1ae605f918f417c097858a7ab9c",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "sha3-kdf-2",
      "headRefOid": "80b19a02030631314c272536369fc63652631ab3",
      "closedAt": "2024-05-27T12:22:09Z",
      "mergedAt": "2024-05-27T12:22:09Z",
      "mergedBy": "TJ-91",
      "mergeCommit": {
        "oid": "dba75bcaeedd7a0009725a352c5b5bae07b95141"
      },
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "@TJ-91 should be fixed",
          "createdAt": "2024-05-23T12:29:49Z",
          "updatedAt": "2024-05-23T12:29:49Z"
        },
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "Ufff, I forgot in how many places we referenced this...\r\n\r\n> I think in most of the places it would be better to write \"SHA3-256\" instead of just \"SHA-3\", what do you think?\r\n\r\nMakes sense, since we use explicitly only this algo\r\n\r\nI also rewrote the security consideration, cutting out the proof for the omission of the PKs and adapting the references",
          "createdAt": "2024-05-23T13:24:02Z",
          "updatedAt": "2024-05-23T13:24:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-857mzOf",
          "commit": {
            "abbreviatedOid": "48eaadb"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I can decrypt the updated test vectors so it looks good from that side.\r\nThere are still some things that need to be fixed in the document:\r\n\r\n* There are still multiple occurances of `KMAC`\r\n* `multiKeyCombine`:\r\n  * `//   customizationString - the UTF-8 encoding of the string \"KDF\"` should be removed\r\n  * Not sure if `domSeparation` really needs to be a constant in the `multiKeyCombine` any longer\r\n  * the lines describing the `ecdhKeyShare` and `ecdhCipherText` have incorrect whitespaces",
          "createdAt": "2024-05-23T12:02:58Z",
          "updatedAt": "2024-05-23T12:02:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-857nRSJ",
          "commit": {
            "abbreviatedOid": "95608e1"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I think in most of the places it would be better to write \"SHA3-256\" instead of just \"SHA-3\", what do you think?\r\n\r\nAnother thing I just noticed is in Section 9.3. \r\n> Furthermore, we do not require the recipients public key into the key combiner as the public key material is already included in the component key derivation functions. Given two KEMs which we assume to be multi-user secure, we combine their outputs using a KEM-combiner:\r\n\r\nI suppose that's not how we do it anymore.\r\n\r\nAlso the first two paragraphs that describe the `fixedInfo` and the domain separation are not 100% accurate any longer since we mix the two now in the `fixedInfo`. The reference to Section 4.2.2 for `domSeparation` is also wrong now.\r\n\r\nProbably we can just slightly rewrite the first three paragraphs and remove the rest",
          "createdAt": "2024-05-23T12:57:17Z",
          "updatedAt": "2024-05-23T12:57:17Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-857_qNc",
          "commit": {
            "abbreviatedOid": "95608e1"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T08:14:35Z",
          "updatedAt": "2024-05-27T08:25:24Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "It might make sense to prefix the algID with a length field. That makes the construction forward compatible even when multi byte algorithm IDs should be introduced.",
              "createdAt": "2024-05-27T08:14:35Z",
              "updatedAt": "2024-05-27T08:25:24Z"
            },
            {
              "originalPosition": 62,
              "body": "However, I think we are running into problem when doing it naively this way. Since the fixedInfo comes at the end, the whole string is currently only unabigously parsable from its rear end. But then we would need right-encoding of the algorithm ID field, i.e. `fixedInfo = algID || len(algID) || domSeparation`.",
              "createdAt": "2024-05-27T08:22:51Z",
              "updatedAt": "2024-05-27T08:25:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858AIJi",
          "commit": {
            "abbreviatedOid": "95608e1"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T08:58:50Z",
          "updatedAt": "2024-05-27T08:58:50Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "I also think we should encode it at the end, if we do so.\r\n\r\nOn the other hand, in this (unlinkely) case, I think we could also alter the domain separation? We'll need a new key/PKESK/... version for that",
              "createdAt": "2024-05-27T08:58:50Z",
              "updatedAt": "2024-05-27T08:58:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858AbCK",
          "commit": {
            "abbreviatedOid": "95608e1"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T09:30:12Z",
          "updatedAt": "2024-05-27T09:30:12Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "I do not think that the string needs to be parsed, so it shouldn't matter where we place it from that perspective.\r\n\r\nI assume you are worried about ambiguities / collisions where the boundary between the alg ID byte(s) and the KEM bytes clash? When viewing both the length, and the KEM input as \"arbitrary length and arbitrary content\" strings, wouldn't we have the same problem even when encoding the length of the algorithm ID? Since we have multiple variable-length fields following each other without a clear boundary. Thus, we need to prefix the length of the other variable input (the KEM data), too.\r\n\r\nAlso, I would change it to simply `0x01` instead of `len(algID)`, since multi-byte IDs are only a remote possibility now.\r\nFurther, I agree with Aron, that we will always have the freedom to adjust the KEM inputs for newly introduced algorithms. The `domSeparation` could then be used to unambigously define the \"version\" of the KDF.",
              "createdAt": "2024-05-27T09:30:12Z",
              "updatedAt": "2024-05-27T09:30:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858As8j",
          "commit": {
            "abbreviatedOid": "95608e1"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T10:04:02Z",
          "updatedAt": "2024-05-27T10:04:02Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "> When viewing both the length, and the KEM input as \"arbitrary length and arbitrary content\" strings, wouldn't we have the same problem even when encoding the length of the algorithm ID? Since we have multiple variable-length fields following each other without a clear boundary. Thus, we need to prefix the length of the other variable input (the KEM data), too.\r\n\r\nWhat I propose aims exactly at solving this problem. When the string is anambiguously parsable from the rear, collisions cannot happen: after the algorithm ID has been parsed from the rear, the lengths of the other fields are known.\r\n\r\nChanging the domain separation string might again lead to possible collisions. Thus the new  domain separation string would need to be of the same length as the current one. Maybe we should include a two digit (i.e. two byte) version number in the `domSeparation` string and set it to \"00\" for now.",
              "createdAt": "2024-05-27T10:04:02Z",
              "updatedAt": "2024-05-27T10:04:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858AzvL",
          "commit": {
            "abbreviatedOid": "95608e1"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T10:19:39Z",
          "updatedAt": "2024-05-27T10:19:40Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "> after the algorithm ID has been parsed from the rear, the lengths of the other fields are known.\r\n\r\nYou are right, that does fix it. We can still consider prefixing all variable-length fields but that's just a matter of preference (but it might become required if we introduce more variable-length fields).\r\n\r\n> Maybe we should include a two digit (i.e. two byte) version number in the `domSeparation` string and set it to \"00\" for now.\r\n\r\nI think it's a good idea. Alternatively, we can use one byte, e.g., `fixedInfo = algID || len(algID) || KDFVersion || domSeparation`. However, I don't think there are any benefits of one over the other.",
              "createdAt": "2024-05-27T10:19:40Z",
              "updatedAt": "2024-05-27T10:19:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858BIhI",
          "commit": {
            "abbreviatedOid": "95608e1"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T11:08:19Z",
          "updatedAt": "2024-05-27T11:08:19Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "Making the domain separation `OpenPGPCompositeKDFv1`",
              "createdAt": "2024-05-27T11:08:19Z",
              "updatedAt": "2024-05-27T11:08:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858BQUr",
          "commit": {
            "abbreviatedOid": "99ed67b"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-27T11:27:29Z",
          "updatedAt": "2024-05-27T11:27:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-858BpRf",
          "commit": {
            "abbreviatedOid": "80b19a0"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-27T12:21:58Z",
          "updatedAt": "2024-05-27T12:21:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 117,
      "id": "PR_kwDOIrmZ-85wpvEO",
      "title": "remove whitespaces from formal algorithm names",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/117",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-27T11:32:32Z",
      "updatedAt": "2024-05-27T12:55:00Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "dba75bcaeedd7a0009725a352c5b5bae07b95141",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "algo-names-no-ws",
      "headRefOid": "6fa85ef1670d91efbb3de10afcdbde100624d3bd",
      "closedAt": "2024-05-27T12:55:00Z",
      "mergedAt": "2024-05-27T12:55:00Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "1d0e6da4a363a7859febce8c49ab8002d629ad9b"
      },
      "comments": [
        {
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "body": "We still have \"ML-KEM-ipd-768 + X25519\" (from the test vectors where the string is with \"ipd\"",
          "createdAt": "2024-05-27T12:28:00Z",
          "updatedAt": "2024-05-27T12:28:00Z"
        },
        {
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "body": "> We still have \"ML-KEM-ipd-768 + X25519\" (from the test vectors where the string is with \"ipd\"\r\n\r\nFixed this in above commit.",
          "createdAt": "2024-05-27T12:49:24Z",
          "updatedAt": "2024-05-27T12:49:24Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-858BTQP",
          "commit": {
            "abbreviatedOid": "7c63abc"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-27T11:34:44Z",
          "updatedAt": "2024-05-27T11:57:11Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nTBD                   | SLH-DSA-SHAKE-128s               | MAY         | {{slhdsa}}\r\nTBD                   | SLH-DSA-SHAKE-128f               | MAY         | {{slhdsa}}\r\nTBD                   | SLH-DSA-SHAKE-256s               | MAY         | {{slhdsa}}\r\n```",
              "createdAt": "2024-05-27T11:34:44Z",
              "updatedAt": "2024-05-27T11:57:12Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nID                    | Algorithm                        | Requirement | Definition\r\n---------------------:| -------------------------------- | ----------- | --------------------\r\n```",
              "createdAt": "2024-05-27T11:34:55Z",
              "updatedAt": "2024-05-27T11:57:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858Bs1k",
          "commit": {
            "abbreviatedOid": "f9f7f07"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T12:30:08Z",
          "updatedAt": "2024-05-27T12:30:08Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\nID                    | Algorithm                        | Requirement | Definition\r\n---------------------:| -------------------------------- | ----------- | --------------------\r\n```",
              "createdAt": "2024-05-27T12:30:08Z",
              "updatedAt": "2024-05-27T12:30:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858B131",
          "commit": {
            "abbreviatedOid": "1fa3f96"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-27T12:50:14Z",
          "updatedAt": "2024-05-27T12:50:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 118,
      "id": "PR_kwDOIrmZ-85wqTtK",
      "title": "Fix changelog",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/118",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-27T12:58:33Z",
      "updatedAt": "2024-05-27T13:08:53Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "1d0e6da4a363a7859febce8c49ab8002d629ad9b",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "fix-changelog",
      "headRefOid": "dc1e9323041e7f259c1201cc8a4674588ad33a53",
      "closedAt": "2024-05-27T13:08:52Z",
      "mergedAt": "2024-05-27T13:08:52Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "a84b0b4dd47d9589b565d26eab914bbc41eb32f6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-858B7hN",
          "commit": {
            "abbreviatedOid": "dc1e932"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-27T13:02:19Z",
          "updatedAt": "2024-05-27T13:02:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-858B-Fh",
          "commit": {
            "abbreviatedOid": "dc1e932"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-27T13:07:52Z",
          "updatedAt": "2024-05-27T13:07:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 119,
      "id": "PR_kwDOIrmZ-85wtmD-",
      "title": "Add \"obsolete\" to SED description",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/119",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Reflect @kaie suggestion in #91 ",
      "createdAt": "2024-05-28T03:58:05Z",
      "updatedAt": "2024-05-28T07:07:16Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "a84b0b4dd47d9589b565d26eab914bbc41eb32f6",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "sed-obsolete",
      "headRefOid": "1f4da05ebc38ce66e0b9f570c22949ee6e9ab2de",
      "closedAt": "2024-05-28T07:07:16Z",
      "mergedAt": "2024-05-28T07:07:16Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "f75c6001da1e6e0151c85530b97398f50eb7d023"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-858FwVQ",
          "commit": {
            "abbreviatedOid": "1f4da05"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-28T06:41:46Z",
          "updatedAt": "2024-05-28T06:41:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-858F7S6",
          "commit": {
            "abbreviatedOid": "1f4da05"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-28T07:06:26Z",
          "updatedAt": "2024-05-28T07:06:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 120,
      "id": "PR_kwDOIrmZ-85wuUHI",
      "title": "Rewrite parallel encryption guidance",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/120",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR addresses #2 and #67, removing the normative section about recipients, and making it an example for applications supporting it.\r\nA review of all the terms \"recipient\" and \"sender\" was done, to remove the implicit reference to email",
      "createdAt": "2024-05-28T07:00:15Z",
      "updatedAt": "2024-07-08T13:42:15Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "a84b0b4dd47d9589b565d26eab914bbc41eb32f6",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "redefine-recipient",
      "headRefOid": "c37bdae79dde53306e5e528ea0f29b4b4162a30c",
      "closedAt": "2024-07-08T13:42:15Z",
      "mergedAt": "2024-07-08T13:42:15Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "1bbde0340d2b6f83af4b53d8d330ae2003923c7d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-858GCco",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I think the PR achieves what was agreed on in the interim. I am not sure that the new term \"communication party\" is avoiding the notion of a message transmission completely, but it clearly seems to be an improvement over \"recipient\". I also don't find any better term.\r\n\r\nOnce my proposed correction was decided on, I will approve this PR.",
          "createdAt": "2024-05-28T07:21:06Z",
          "updatedAt": "2024-05-28T07:44:21Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "This is not pertaining to the changes, but to the text as was before: Actually, whether the encryption has to be considered \"multi algorithm\" or not depends on whether the set of keys used belong to different algorithms. So  probably we should rather write: \r\n```suggestion\r\nAccordingly, when a message is encrypted using multiple PKESK packages for different encryption keys, a non-composite, potentially multi-algorithm, public-key encryption is realized where the communication party has to decrypt only one of the PKESK packages in order to decrypt the message.\r\n```",
              "createdAt": "2024-05-28T07:21:06Z",
              "updatedAt": "2024-05-28T07:44:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858GQg8",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-28T07:47:52Z",
          "updatedAt": "2024-05-28T07:47:53Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Since we're talking about signatures here, I guess \"verifier\" or something like that would work.\r\n\r\nAn alternative would be to simply state how the verification procedure works, not how an entity (recipient/comm. party) has to perform it. Something like \"composite sigs are only considered valid if all component sigs are valid\"\r\n\r\n\"communication party\" might be weird in some contexts.",
              "createdAt": "2024-05-28T07:47:53Z",
              "updatedAt": "2024-05-28T07:47:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858GSNA",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-28T07:51:07Z",
          "updatedAt": "2024-05-28T07:51:07Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "I think the feedback in the Interim was not to avoid the word \"recipient\" everywhere. I think here it is sufficiently clear what is meant by \"recipient\" and I think it's the best word to use. The ambiguity comes in when matching multiple keys/certs to a recipient / entity and it becomes a more abstract concept.\r\n\r\nFor a PKESK packet there is a recipient / recipient key and for a SEIPD message the recipients are each recipient of the list of PKESK packets. I think that's common wording also in the Crypto Refresh.",
              "createdAt": "2024-05-28T07:51:07Z",
              "updatedAt": "2024-05-28T07:51:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858GUXs",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-28T07:55:08Z",
          "updatedAt": "2024-05-28T07:55:08Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "Yes, it is correct the the term \"recipient\" is used throughout the crypto-refresh. So we should rather stick to it and probably just avoid conveying the idea of differentiating between keys that belong to a single recipient and to multiple recipients.",
              "createdAt": "2024-05-28T07:55:08Z",
              "updatedAt": "2024-05-28T07:55:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858GUcV",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-28T07:55:16Z",
          "updatedAt": "2024-05-28T07:55:16Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "Here I think we run into the problem that the abstract concept of a recipient (outside of PKESKs) is not well defined. Might be ok for the non-normative statement, though.",
              "createdAt": "2024-05-28T07:55:16Z",
              "updatedAt": "2024-05-28T07:55:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858GU-f",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-28T07:56:16Z",
          "updatedAt": "2024-05-28T07:56:17Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "I think that here the word \"recipient\" would be unterstood in the context of the PKESK packet(s) so it'd be ok to use\r\n\r\nEdit: alternative in line 900 looks good, resolving this",
              "createdAt": "2024-05-28T07:56:17Z",
              "updatedAt": "2024-07-04T14:04:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-858GVTv",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-28T07:56:54Z",
          "updatedAt": "2024-05-28T07:56:54Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "Also here I think \"recipient\" is ok to use",
              "createdAt": "2024-05-28T07:56:54Z",
              "updatedAt": "2024-05-28T07:56:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85_XY2D",
          "commit": {
            "abbreviatedOid": "fb62b6a"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-24T21:42:32Z",
          "updatedAt": "2024-06-24T21:42:32Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I don't think it's verification only here, if we want to use `verifier` we also need to say `decrypter`?",
              "createdAt": "2024-06-24T21:42:32Z",
              "updatedAt": "2024-06-24T21:42:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85_XZSj",
          "commit": {
            "abbreviatedOid": "fb62b6a"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-24T21:43:31Z",
          "updatedAt": "2024-06-24T21:43:31Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\nAn implementation SHOULD use `AES-256` in the case of a v1 SEIPD packet, or `AES-256` with any available AEAD mode in the case of a v2 SEIPD packet, if all recipients indicate support for it (explicitly or implicitly).\r\n```",
              "createdAt": "2024-06-24T21:43:31Z",
              "updatedAt": "2024-06-24T21:43:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85_XaDe",
          "commit": {
            "abbreviatedOid": "a9f7e1f"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-24T21:46:11Z",
          "updatedAt": "2024-06-24T21:46:11Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I think it's fine as an explanation of the previous sentence",
              "createdAt": "2024-06-24T21:46:11Z",
              "updatedAt": "2024-06-24T21:46:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85_YEYn",
          "commit": {
            "abbreviatedOid": "a9f7e1f"
          },
          "author": "dkg",
          "authorAssociation": "COLLABORATOR",
          "state": "DISMISSED",
          "body": "I'm with @TJ-91 in that i think \"communication party\" has gotten too abstract to be useful.  can we pull back a little bit?",
          "createdAt": "2024-06-25T00:02:33Z",
          "updatedAt": "2024-07-08T10:12:38Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "seems to me that we have a \"generating\" implementation and a \"consuming\" or \"evaluating\" implementation.  \"Communication party\" is rather too vague.",
              "createdAt": "2024-06-25T00:02:33Z",
              "updatedAt": "2024-06-25T00:06:59Z"
            },
            {
              "originalPosition": 17,
              "body": "what is a \"PKESK package\"?  does this mean \"packet\"?  i recognize it's not a part of the text edited here, but it could be cleaned up while we're touching this line.\r\n\r\nagain, i think \"communication party\" is too generic.  we're talking about the \"consuming\" or \"evaluating\" implementation, not the generating implementation.  in this case, we're just talking about decryption, so we could just say \"the decrypting party\".",
              "createdAt": "2024-06-25T00:04:24Z",
              "updatedAt": "2024-06-25T00:06:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-85_Xai_",
          "commit": {
            "abbreviatedOid": "a9f7e1f"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-24T21:47:42Z",
          "updatedAt": "2024-07-04T15:52:44Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "This was completely moved and re-worded, avoiding the concept of communication party or recipient",
              "createdAt": "2024-06-24T21:47:42Z",
              "updatedAt": "2024-07-04T15:52:44Z"
            },
            {
              "originalPosition": 89,
              "body": "Up to you all, this makes no difference in my opinion",
              "createdAt": "2024-06-24T21:48:15Z",
              "updatedAt": "2024-07-04T15:52:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86AwEQY",
          "commit": {
            "abbreviatedOid": "dab350a"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me. Thanks for the work Aron. I just propose two corrections regarding wording.",
          "createdAt": "2024-07-05T07:04:43Z",
          "updatedAt": "2024-07-05T07:16:09Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "```suggestion\r\nIn section {{pq-key-preference}} it is explained how to deal with multiple key scenarios.\r\n```",
              "createdAt": "2024-07-05T07:04:43Z",
              "updatedAt": "2024-07-05T07:16:09Z"
            },
            {
              "originalPosition": 89,
              "body": "```suggestion\r\nIn a signature stripping attack, an adversary removes one or more of the signatures such that only a subset of the signatures remain in the message at the point when it is verified.\r\n```",
              "createdAt": "2024-07-05T07:14:25Z",
              "updatedAt": "2024-07-05T07:16:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86Aw3t7",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-05T09:04:30Z",
          "updatedAt": "2024-07-05T09:04:31Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I would still rather rewrite this. IMO that problem is outside of the scope of the OpenPGP protocol and more an application thing. The protocol layer doesn't necessarily know that two certificates / keys that it processes for encrypting are somehow linked. And even if it does, it can't know the intent of the application/user.\r\nSee also #67, I think the critique still applies to this: Do we mean the second or the third scenario, or both, and what is the criterion for an application to determine that two certificates belong to the same recipient in the third scenario?\r\n\r\nIn any case, I would change the paragraph to start with the more obvious case first:\r\n\r\n> For instance, in the case that a certificate has both a PQ/T and an ECC encryption-capable valid subkey, the PQ/T subkey SHOULD be preferred.\r\n\r\nAnd then we can add the \"multiple certificate scenario\" a bit more vaguely. The best I could come up with is the following:\r\n\r\n> Further, if an application can determine (by any means not defined in this document) that encrypting to a PQ/T certificate and a traditional certificate serves the same purpose, it should omit encrypting to the traditional certificate.\r\n\r\nSorry for being a bit picky here but I think sooner or later someone will re-raise this issue.",
              "createdAt": "2024-07-05T09:04:30Z",
              "updatedAt": "2024-07-05T09:04:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86Aw5n6",
          "commit": {
            "abbreviatedOid": "dab350a"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-05T09:08:19Z",
          "updatedAt": "2024-07-05T09:08:19Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I'd try to state this more concisely since it's more or less stating the obvious.\r\n\r\n```suggestion\r\nFurthermore, the OpenPGP protocol also allows parallel encryption to different keys by using multiple PKESK packets, thus realizing non-composite multi-algorithm public-key encryption.\r\n```",
              "createdAt": "2024-07-05T09:08:19Z",
              "updatedAt": "2024-07-05T09:08:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86AxXew",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-05T10:17:55Z",
          "updatedAt": "2024-07-05T10:17:55Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "After looking closer again I agree with Johannes, here the assumptions about the identity of the recipient will most likely have to be more vague.",
              "createdAt": "2024-07-05T10:17:55Z",
              "updatedAt": "2024-07-05T10:17:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86A5pz6",
          "commit": {
            "abbreviatedOid": "dab350a"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T08:17:14Z",
          "updatedAt": "2024-07-08T08:17:14Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "```suggestion\r\nFor instance, in case that a certificate has both a PQ/T and an ECC encryption-capable valid subkey, the PQ/T subkey SHOULD be preferred.\r\nFurthermore, if an application can anyhow determine that encrypting to a PQ/T certificate and a traditional certificate is redundant, it should omit encrypting to the traditional certificate.\r\n```\r\nWhat about this?",
              "createdAt": "2024-07-08T08:17:14Z",
              "updatedAt": "2024-07-08T08:17:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86A5wmt",
          "commit": {
            "abbreviatedOid": "411b863"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T08:27:47Z",
          "updatedAt": "2024-07-08T08:27:47Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I think we're almost there. But \"SHOULD be preferred\" might not be clear enough, as we also want to express that in this case the traditional key should not be used at all. So I would write for instance \" ... valid subkey, the PQ/T subkey SHOULD be used and the traditional key SHOULD NOT be used.\"\r\n\r\nFurthermore, I wouldn't write \"and an *ECC* encryption-capable valid subkey\" but rather \"and a *traditional* encryption-capable valid subkey\" in order not to create the false assumption that it only refers to ECC keys (other types of keys might be around for quite some time).",
              "createdAt": "2024-07-08T08:27:47Z",
              "updatedAt": "2024-07-08T08:27:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86A53tp",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T08:40:37Z",
          "updatedAt": "2024-07-08T08:40:37Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "That's the point of \"for instance\", IMO. I would rather remove the normative part from an example then or remove the \"for instance\".\r\n\r\nNormative way:\r\n```suggestion\r\nIn case that a certificate has both a valid PQ/T and a valid traditional subkey, an implementation SHOULD use the PQ/T subkey only.\r\nFurthermore, if an application can anyhow determine that encrypting to a PQ/T certificate and a traditional certificate is redundant, it should omit encrypting to the traditional certificate.\r\n```\r\nExample way:\r\n```suggestion\r\nFor instance, an implementation that encrypts messages for a recipient for which both a valid PQ/T and a valid ECC encryption subkey are available, the implementation should use the PQ/T subkey only.\r\nFurthermore, if an application can anyhow determine that encrypting to a PQ/T certificate and a traditional certificate is redundant, it should omit encrypting to the traditional certificate.\r\n```\r\nSomehow hybrid, but not normative:\r\n```suggestion\r\nFor instance, an implementation that encrypts messages for a recipient for which both a valid PQ/T and a valid traditional encryption subkey are available, the implementation should use the PQ/T subkey only.\r\nFurthermore, if an application can anyhow determine that encrypting to a PQ/T certificate and a traditional certificate is redundant, it should omit encrypting to the traditional certificate.\r\n```",
              "createdAt": "2024-07-08T08:40:37Z",
              "updatedAt": "2024-07-08T08:40:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86A6MKM",
          "commit": {
            "abbreviatedOid": "411b863"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T09:11:50Z",
          "updatedAt": "2024-07-08T09:11:51Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I would write:\r\n\r\n> For instance, an implementation that encrypts a message to a certificate for which both a valid PQ/T and a valid traditional encryption subkey are available, the implementation should encrypt to the PQ/T subkey only.\r\n\r\nThis is adapted from your \"Example way\" to avoid the \"recipient\" terminology, and I also replaced \"use\" by \"encrypt to\", as well as \"ECC\" by \"traditional\".\r\n\r\nI'm happy with your suggestion for the \"multiple certificate scenario\".",
              "createdAt": "2024-07-08T09:11:51Z",
              "updatedAt": "2024-07-08T09:11:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86A6aGY",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T09:36:25Z",
          "updatedAt": "2024-07-08T09:36:25Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I vote for the normative variant @wussler has posted above.\r\n\r\n(An example with ECC is in my point potentially misleaing \u2013 even though from a formal point it is correct since it is an example. But our aim here by rendering the guidance as an example is only with respect to the set of keys, I don't see a need to make it concrete with respect to the public-key encryption algorithm.)\r\n\r\nI also generally agree to the second sentence about the redundant certificate. That solves the problem of the using the word \"recipient\" well in my view. But the use of the word \"anyhow\" doesn't seem right to me. I ran the sentence through deepl and it doesn't translate to German correctly. I think we need to replace \"anyhow\" with \"in some way\" or with \"somehow\". Or maybe even better \r\n\r\n\"Furthermore, if an application has any means to determine ...\"",
              "createdAt": "2024-07-08T09:36:25Z",
              "updatedAt": "2024-07-08T09:37:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86A6h2E",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T09:51:17Z",
          "updatedAt": "2024-07-08T09:51:18Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "Ok, then let's go with the normative variant.\r\n\r\nI was a bit unsure about \"anyhow\" myself but cannot judge it. I vote for your suggestion to write \"Furthermore, if an application has any means to determine ...\".\r\n\r\n\r\n",
              "createdAt": "2024-07-08T09:51:18Z",
              "updatedAt": "2024-07-08T09:51:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86A6ljj",
          "commit": {
            "abbreviatedOid": "3c06088"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T09:58:00Z",
          "updatedAt": "2024-07-08T09:58:00Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "```suggestion\r\nIn case that a certificate has both a valid PQ/T and a valid traditional subkey, an implementation SHOULD use the PQ/T subkey only.\r\nFurthermore, if an application has any means to determine that encrypting to a PQ/T certificate and a traditional certificate is redundant, it should omit encrypting to the traditional certificate.\r\n```",
              "createdAt": "2024-07-08T09:58:00Z",
              "updatedAt": "2024-07-08T09:58:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86A6tbD",
          "commit": {
            "abbreviatedOid": "e1edfaf"
          },
          "author": "falko-strenzke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-08T10:11:12Z",
          "updatedAt": "2024-07-08T10:11:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-86A6-Kr",
          "commit": {
            "abbreviatedOid": "e1edfaf"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T10:47:26Z",
          "updatedAt": "2024-07-08T10:47:26Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "Sorry for the holdup, but I just noticed that we should phrase it a bit narrower. Otherwise this statement also includes the signature case and contradicts what we write in line 905, 906.\r\n\r\n```suggestion\r\nWhen encrypting to a certificate that has both a valid PQ/T and a valid traditional encryption subkey, an implementation SHOULD use the PQ/T subkey only.\r\n```",
              "createdAt": "2024-07-08T10:47:26Z",
              "updatedAt": "2024-07-08T10:47:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86A6-PK",
          "commit": {
            "abbreviatedOid": "e1edfaf"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T10:47:36Z",
          "updatedAt": "2024-07-08T10:47:36Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "still needs to be removed",
              "createdAt": "2024-07-08T10:47:36Z",
              "updatedAt": "2024-07-08T10:47:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86A6-ZL",
          "commit": {
            "abbreviatedOid": "e1edfaf"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T10:47:55Z",
          "updatedAt": "2024-07-08T10:47:56Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-07-08T10:47:55Z",
              "updatedAt": "2024-07-08T10:47:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-86A8kOT",
          "commit": {
            "abbreviatedOid": "c37bdae"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-08T13:41:38Z",
          "updatedAt": "2024-07-08T13:41:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 121,
      "id": "PR_kwDOIrmZ-85yHNMl",
      "title": "added generated .xml to ignores",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/121",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-11T13:23:43Z",
      "updatedAt": "2024-06-24T21:37:43Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "f75c6001da1e6e0151c85530b97398f50eb7d023",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "ignore-xml",
      "headRefOid": "a69dda2463e81f59fba2b9d7da96bebdceb6ffbf",
      "closedAt": "2024-06-24T21:37:43Z",
      "mergedAt": "2024-06-24T21:37:43Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "34198c82ea206a23e28df2db5b4fe616f8971c6b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-859y5--",
          "commit": {
            "abbreviatedOid": "a69dda2"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-11T13:35:55Z",
          "updatedAt": "2024-06-11T13:35:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85_XW3O",
          "commit": {
            "abbreviatedOid": "a69dda2"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-24T21:37:08Z",
          "updatedAt": "2024-06-24T21:37:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 122,
      "id": "PR_kwDOIrmZ-85yHWAu",
      "title": "added missing inputs to multiKeyCombine",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/122",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-11T13:40:02Z",
      "updatedAt": "2024-06-24T21:38:24Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "f75c6001da1e6e0151c85530b97398f50eb7d023",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "kem-combiner-inputs",
      "headRefOid": "7d68f04a0b6f942df19b33fc26c6b5cff2c01d1d",
      "closedAt": "2024-06-24T21:38:23Z",
      "mergedAt": "2024-06-24T21:38:23Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "da1fb50ce0f9b48c2d29bb27acd7fe6899a70c5e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-859y_yZ",
          "commit": {
            "abbreviatedOid": "abb32fe"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-11T13:44:40Z",
          "updatedAt": "2024-06-11T13:44:40Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Good that you noticed it's missing! I would move the `ecdhPublicKey` line up such that all inputs are in the correct order",
              "createdAt": "2024-06-11T13:44:40Z",
              "updatedAt": "2024-06-11T13:44:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOIrmZ-859zRBQ",
          "commit": {
            "abbreviatedOid": "bb9c236"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-11T14:09:03Z",
          "updatedAt": "2024-06-11T14:09:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85_XWQ2",
          "commit": {
            "abbreviatedOid": "7d68f04"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-24T21:35:29Z",
          "updatedAt": "2024-06-24T21:35:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 123,
      "id": "PR_kwDOIrmZ-85yHXPa",
      "title": "added missing commas when giving section number after reference",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/123",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-11T13:42:30Z",
      "updatedAt": "2024-06-24T21:37:57Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "f75c6001da1e6e0151c85530b97398f50eb7d023",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "commas-in-refs",
      "headRefOid": "152520dd8447df157864e07428307b71218b4415",
      "closedAt": "2024-06-24T21:37:57Z",
      "mergedAt": "2024-06-24T21:37:57Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "0d5b27d48677906e95d8f20de723d4368f629a6f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-859zAZV",
          "commit": {
            "abbreviatedOid": "152520d"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-11T13:45:35Z",
          "updatedAt": "2024-06-11T13:45:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85_XWu4",
          "commit": {
            "abbreviatedOid": "152520d"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-24T21:36:42Z",
          "updatedAt": "2024-06-24T21:36:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 124,
      "id": "PR_kwDOIrmZ-85yHbPX",
      "title": "fixed singular/plural typo",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/124",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-11T13:49:25Z",
      "updatedAt": "2024-06-24T21:38:06Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "f75c6001da1e6e0151c85530b97398f50eb7d023",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "typo-plural",
      "headRefOid": "4b61bbdce3c718a2c8160ea679d5bb25b9fee00d",
      "closedAt": "2024-06-24T21:38:05Z",
      "mergedAt": "2024-06-24T21:38:05Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "7d5dbd2a2d6d23a3a8edc27dfc2723c630325a23"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-859zEj0",
          "commit": {
            "abbreviatedOid": "4b61bbd"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-11T13:51:23Z",
          "updatedAt": "2024-06-11T13:51:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85_XWbe",
          "commit": {
            "abbreviatedOid": "4b61bbd"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-24T21:36:02Z",
          "updatedAt": "2024-06-24T21:36:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 125,
      "id": "PR_kwDOIrmZ-85y7gPE",
      "title": "fixed order of symAlgId and len(C) in algo description",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/125",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-19T08:41:05Z",
      "updatedAt": "2024-06-24T21:38:45Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "f75c6001da1e6e0151c85530b97398f50eb7d023",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "fix-order-pkesk",
      "headRefOid": "59394135eaedc699d31f0ec369def2a1f6c76151",
      "closedAt": "2024-06-24T21:38:45Z",
      "mergedAt": "2024-06-24T21:38:45Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "e55c6d15bc1b1954f2a34c61d6cb7074a8925640"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-85---za",
          "commit": {
            "abbreviatedOid": "5939413"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-20T13:28:47Z",
          "updatedAt": "2024-06-20T13:28:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-85_XV9r",
          "commit": {
            "abbreviatedOid": "5939413"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-24T21:34:23Z",
          "updatedAt": "2024-06-24T21:34:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 128,
      "id": "PR_kwDOIrmZ-850ggNL",
      "title": "add note about the planned modifications of the KEM combiner",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/128",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-05T07:42:18Z",
      "updatedAt": "2024-07-08T07:48:25Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "e55c6d15bc1b1954f2a34c61d6cb7074a8925640",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "note-kem-kdf-change",
      "headRefOid": "aab3956f54d6d63fd04b2780ed4e436495f94ca8",
      "closedAt": "2024-07-08T07:48:25Z",
      "mergedAt": "2024-07-08T07:48:24Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "7f31501c57337492a2fd3b467690138dbd04e7e2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-86Aw6ZR",
          "commit": {
            "abbreviatedOid": "aab3956"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-05T09:10:07Z",
          "updatedAt": "2024-07-05T09:10:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-86A5aDD",
          "commit": {
            "abbreviatedOid": "aab3956"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-08T07:48:13Z",
          "updatedAt": "2024-07-08T07:48:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 129,
      "id": "PR_kwDOIrmZ-850iwwN",
      "title": "corrections of spelling and wording",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/129",
      "state": "MERGED",
      "author": "falko-strenzke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-05T14:16:19Z",
      "updatedAt": "2024-07-08T07:47:08Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "e55c6d15bc1b1954f2a34c61d6cb7074a8925640",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "corrections-falko",
      "headRefOid": "9f10cc8c24905def87497c1b8e86cbf1b841f879",
      "closedAt": "2024-07-08T07:47:08Z",
      "mergedAt": "2024-07-08T07:47:08Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "de054fcc9c73a9935b49d0c200703cdb13bd5dde"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-86Ay46D",
          "commit": {
            "abbreviatedOid": "9f10cc8"
          },
          "author": "TJ-91",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-05T14:19:50Z",
          "updatedAt": "2024-07-05T14:19:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOIrmZ-86A5ZcL",
          "commit": {
            "abbreviatedOid": "9f10cc8"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-08T07:47:00Z",
          "updatedAt": "2024-07-08T07:47:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 130,
      "id": "PR_kwDOIrmZ-850twwo",
      "title": "Fix ML-DSA signature size",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/130",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://csrc.nist.gov/files/pubs/fips/204/ipd/docs/fips-204-initial-public-comments-2023.pdf\r\n\r\nComment on page 6 points this out\r\n",
      "createdAt": "2024-07-08T15:54:50Z",
      "updatedAt": "2024-07-08T19:48:21Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "1bbde0340d2b6f83af4b53d8d330ae2003923c7d",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "fix-mldsa-sig-size",
      "headRefOid": "383627ced7f8b5f6ed4eee80f6e86f40d3b2d09a",
      "closedAt": "2024-07-08T19:48:21Z",
      "mergedAt": "2024-07-08T19:48:21Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "910722085abbffd423785e5ac349324a6abfc409"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOIrmZ-86A_5Eb",
          "commit": {
            "abbreviatedOid": "dadddae"
          },
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T19:44:26Z",
          "updatedAt": "2024-07-08T19:44:26Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n- Fixed parameters order in PKESK description\r\n```",
              "createdAt": "2024-07-08T19:44:26Z",
              "updatedAt": "2024-07-08T19:44:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 131,
      "id": "PR_kwDOIrmZ-850t82s",
      "title": "Add ML-DSA-ipd test vectors",
      "url": "https://github.com/openpgp-pqc/draft-openpgp-pqc/pull/131",
      "state": "MERGED",
      "author": "wussler",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-08T16:20:45Z",
      "updatedAt": "2024-07-08T19:55:25Z",
      "baseRepository": "openpgp-pqc/draft-openpgp-pqc",
      "baseRefName": "main",
      "baseRefOid": "910722085abbffd423785e5ac349324a6abfc409",
      "headRepository": "openpgp-pqc/draft-openpgp-pqc",
      "headRefName": "add-mldsa-test-vectors",
      "headRefOid": "fe60ce577da910defc97224ab0b469797fd8604a",
      "closedAt": "2024-07-08T19:55:25Z",
      "mergedAt": "2024-07-08T19:55:25Z",
      "mergedBy": "wussler",
      "mergeCommit": {
        "oid": "3cc29dc899e4fdfeadcd09305c4efdc80db502e2"
      },
      "comments": [
        {
          "author": "wussler",
          "authorAssociation": "COLLABORATOR",
          "body": "This MR depends on #130 ",
          "createdAt": "2024-07-08T16:21:02Z",
          "updatedAt": "2024-07-08T16:21:02Z"
        }
      ],
      "reviews": []
    }
  ]
}